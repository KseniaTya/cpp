# Generated from D:/cpp/parser/grCpp2.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,144,2459,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,1,0,3,0,402,8,0,1,0,1,0,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,3,1,414,8,1,1,2,1,2,3,2,418,8,2,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,429,8,3,1,4,1,4,3,4,433,8,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,448,8,5,1,5,1,
        5,1,5,1,5,1,5,3,5,455,8,5,1,5,1,5,1,5,5,5,460,8,5,10,5,12,5,463,
        9,5,1,6,1,6,3,6,467,8,6,1,6,1,6,1,7,1,7,3,7,473,8,7,1,7,1,7,1,8,
        1,8,1,8,1,8,1,8,1,8,3,8,483,8,8,1,9,1,9,1,10,1,10,1,10,3,10,490,
        8,10,1,10,1,10,1,10,1,10,3,10,496,8,10,5,10,498,8,10,10,10,12,10,
        501,9,10,1,11,1,11,3,11,505,8,11,1,12,1,12,1,12,1,12,3,12,511,8,
        12,1,13,1,13,1,13,1,13,1,13,3,13,518,8,13,1,14,1,14,1,14,1,14,3,
        14,524,8,14,1,14,3,14,527,8,14,1,14,3,14,530,8,14,1,14,3,14,533,
        8,14,1,15,1,15,1,15,1,15,1,15,3,15,540,8,15,1,15,1,15,1,15,1,15,
        1,15,3,15,547,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,3,15,599,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,3,15,614,8,15,1,15,1,15,1,15,1,15,3,15,
        620,8,15,1,15,1,15,1,15,1,15,3,15,626,8,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,639,8,15,10,15,12,15,642,9,
        15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,3,19,651,8,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,666,8,
        19,1,19,1,19,1,19,1,19,3,19,672,8,19,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,702,8,20,1,
        21,1,21,1,22,3,22,707,8,22,1,22,1,22,3,22,711,8,22,1,22,1,22,3,22,
        715,8,22,1,22,3,22,718,8,22,1,22,1,22,3,22,722,8,22,1,22,1,22,1,
        22,1,22,3,22,728,8,22,3,22,730,8,22,1,23,1,23,1,23,1,23,1,24,1,24,
        3,24,738,8,24,1,25,1,25,3,25,742,8,25,1,25,3,25,745,8,25,1,26,1,
        26,1,26,1,26,1,26,3,26,752,8,26,1,26,1,26,1,26,1,26,1,26,3,26,759,
        8,26,5,26,761,8,26,10,26,12,26,764,9,26,1,27,1,27,3,27,768,8,27,
        1,27,1,27,3,27,772,8,27,1,28,3,28,775,8,28,1,28,1,28,1,28,3,28,780,
        8,28,1,28,1,28,1,28,1,28,3,28,786,8,28,1,29,1,29,1,29,1,29,1,29,
        1,30,1,30,1,30,1,30,1,30,1,30,3,30,799,8,30,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,5,31,810,8,31,10,31,12,31,813,9,31,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,827,
        8,32,10,32,12,32,830,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,5,33,841,8,33,10,33,12,33,844,9,33,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,5,34,853,8,34,10,34,12,34,856,9,34,1,35,1,35,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        5,36,875,8,36,10,36,12,36,878,9,36,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,5,37,889,8,37,10,37,12,37,892,9,37,1,38,1,38,1,38,
        1,38,1,38,1,38,5,38,900,8,38,10,38,12,38,903,9,38,1,39,1,39,1,39,
        1,39,1,39,1,39,5,39,911,8,39,10,39,12,39,914,9,39,1,40,1,40,1,40,
        1,40,1,40,1,40,5,40,922,8,40,10,40,12,40,925,9,40,1,41,1,41,1,41,
        1,41,1,41,1,41,5,41,933,8,41,10,41,12,41,936,9,41,1,42,1,42,1,42,
        1,42,1,42,1,42,5,42,944,8,42,10,42,12,42,947,9,42,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,3,43,956,8,43,1,44,1,44,1,44,1,44,1,44,1,44,
        3,44,964,8,44,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,5,46,974,8,
        46,10,46,12,46,977,9,46,1,47,1,47,1,48,1,48,3,48,983,8,48,1,48,1,
        48,3,48,987,8,48,1,48,1,48,3,48,991,8,48,1,48,1,48,3,48,995,8,48,
        1,48,1,48,3,48,999,8,48,1,48,1,48,1,48,3,48,1004,8,48,1,48,3,48,
        1007,8,48,1,49,3,49,1010,8,49,1,49,1,49,1,49,1,49,3,49,1016,8,49,
        1,49,1,49,1,49,1,49,1,49,1,49,3,49,1024,8,49,1,49,1,49,1,49,3,49,
        1029,8,49,1,50,3,50,1032,8,50,1,50,1,50,1,51,1,51,3,51,1038,8,51,
        1,51,1,51,1,52,1,52,1,52,1,52,1,52,5,52,1047,8,52,10,52,12,52,1050,
        9,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,1072,8,53,1,54,1,54,
        3,54,1076,8,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1084,8,54,1,54,
        1,54,1,54,1,54,3,54,1090,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1110,
        8,55,1,55,1,55,3,55,1114,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,3,55,1127,8,55,1,56,1,56,3,56,1131,8,56,1,57,
        3,57,1134,8,57,1,57,1,57,1,57,1,58,1,58,3,58,1141,8,58,1,59,1,59,
        1,59,1,59,1,59,1,59,3,59,1149,8,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,3,59,1159,8,59,1,60,1,60,1,61,1,61,1,61,1,61,1,61,5,61,
        1168,8,61,10,61,12,61,1171,9,61,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,3,62,1182,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
        63,3,63,1192,8,63,1,64,1,64,1,64,3,64,1197,8,64,1,64,1,64,1,64,1,
        64,1,65,3,65,1204,8,65,1,65,3,65,1207,8,65,1,65,1,65,1,65,3,65,1212,
        8,65,1,65,1,65,1,65,3,65,1217,8,65,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,
        3,69,1238,8,69,1,70,1,70,3,70,1242,8,70,1,70,1,70,1,70,3,70,1247,
        8,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,74,3,74,1258,8,74,
        1,75,1,75,1,75,1,75,3,75,1264,8,75,1,76,1,76,3,76,1268,8,76,1,76,
        1,76,1,76,3,76,1273,8,76,1,77,1,77,3,77,1277,8,77,1,77,1,77,1,77,
        3,77,1282,8,77,1,78,3,78,1285,8,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,3,78,1307,8,78,1,79,1,79,1,79,1,79,3,79,1313,8,79,1,80,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1324,8,80,1,81,1,81,3,81,
        1328,8,81,1,81,3,81,1331,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,3,81,1341,8,81,1,81,1,81,1,81,1,81,3,81,1347,8,81,1,81,3,81,
        1350,8,81,1,82,1,82,1,83,1,83,1,83,3,83,1357,8,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,3,83,1367,8,83,1,84,1,84,3,84,1371,8,84,
        1,84,3,84,1374,8,84,1,84,3,84,1377,8,84,1,84,1,84,3,84,1381,8,84,
        1,84,1,84,1,84,3,84,1386,8,84,3,84,1388,8,84,1,85,1,85,3,85,1392,
        8,85,1,85,1,85,3,85,1396,8,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,
        3,86,1405,8,86,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,5,88,
        1416,8,88,10,88,12,88,1419,9,88,1,89,1,89,1,89,1,89,1,89,3,89,1426,
        8,89,1,90,1,90,1,91,1,91,3,91,1432,8,91,1,92,1,92,1,93,1,93,3,93,
        1438,8,93,1,94,1,94,3,94,1442,8,94,1,95,3,95,1445,8,95,1,95,1,95,
        1,95,1,95,1,95,1,95,1,96,3,96,1454,8,96,1,96,1,96,1,96,1,96,1,96,
        1,96,1,97,3,97,1463,8,97,1,97,1,97,1,97,1,97,1,97,1,98,3,98,1471,
        8,98,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,1,101,3,101,1482,
        8,101,1,101,1,101,1,102,1,102,3,102,1488,8,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,3,102,1499,8,102,1,103,3,103,
        1502,8,103,1,103,1,103,1,103,3,103,1507,8,103,1,103,1,103,1,103,
        1,104,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,3,105,
        1522,8,105,1,105,1,105,1,105,1,105,3,105,1528,8,105,1,106,1,106,
        1,106,1,106,1,106,5,106,1535,8,106,10,106,12,106,1538,9,106,1,107,
        1,107,1,107,1,107,1,107,1,107,1,107,3,107,1547,8,107,1,108,1,108,
        1,108,1,108,3,108,1553,8,108,1,108,1,108,1,108,1,108,1,108,1,108,
        3,108,1561,8,108,1,108,1,108,3,108,1565,8,108,1,109,1,109,3,109,
        1569,8,109,1,109,1,109,1,109,3,109,1574,8,109,1,109,1,109,1,109,
        3,109,1579,8,109,1,109,1,109,1,109,1,109,1,109,5,109,1586,8,109,
        10,109,12,109,1589,9,109,1,110,1,110,3,110,1593,8,110,1,111,1,111,
        3,111,1597,8,111,1,112,1,112,1,112,1,112,1,113,1,113,1,114,1,114,
        1,114,1,114,1,115,1,115,3,115,1611,8,115,1,115,1,115,5,115,1615,
        8,115,10,115,12,115,1618,9,115,1,116,1,116,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,3,116,1632,8,116,1,117,1,117,
        1,117,1,117,1,117,1,117,5,117,1640,8,117,10,117,12,117,1643,9,117,
        1,118,1,118,3,118,1647,8,118,1,119,1,119,1,119,1,119,1,119,3,119,
        1654,8,119,1,120,1,120,1,120,1,120,3,120,1660,8,120,1,121,1,121,
        1,121,3,121,1665,8,121,1,121,1,121,1,121,1,121,3,121,1671,8,121,
        1,121,1,121,1,121,1,121,1,121,3,121,1678,8,121,1,121,1,121,3,121,
        1682,8,121,5,121,1684,8,121,10,121,12,121,1687,9,121,1,122,1,122,
        1,122,1,122,3,122,1693,8,122,1,122,3,122,1696,8,122,1,122,3,122,
        1699,8,122,1,122,3,122,1702,8,122,1,123,1,123,1,123,3,123,1707,8,
        123,1,124,1,124,3,124,1711,8,124,1,124,3,124,1714,8,124,1,124,1,
        124,3,124,1718,8,124,1,124,1,124,3,124,1722,8,124,1,124,1,124,1,
        124,3,124,1727,8,124,1,124,3,124,1730,8,124,3,124,1732,8,124,1,125,
        1,125,3,125,1736,8,125,1,126,1,126,1,127,1,127,1,128,3,128,1743,
        8,128,1,128,1,128,1,129,1,129,3,129,1749,8,129,1,130,1,130,3,130,
        1753,8,130,1,130,1,130,1,130,1,130,3,130,1759,8,130,1,131,1,131,
        1,131,3,131,1764,8,131,3,131,1766,8,131,1,132,1,132,1,132,1,132,
        3,132,1772,8,132,1,132,1,132,3,132,1776,8,132,1,132,1,132,1,132,
        1,132,3,132,1782,8,132,1,132,1,132,1,132,1,132,1,132,3,132,1789,
        8,132,1,132,1,132,3,132,1793,8,132,5,132,1795,8,132,10,132,12,132,
        1798,9,132,1,133,1,133,1,133,1,133,3,133,1804,8,133,1,134,1,134,
        1,134,1,134,1,134,1,134,1,134,1,134,3,134,1814,8,134,1,134,1,134,
        3,134,1818,8,134,5,134,1820,8,134,10,134,12,134,1823,9,134,1,135,
        3,135,1826,8,135,1,135,3,135,1829,8,135,1,135,1,135,1,135,1,135,
        3,135,1835,8,135,1,136,1,136,1,136,1,136,1,136,1,136,5,136,1843,
        8,136,10,136,12,136,1846,9,136,1,137,3,137,1849,8,137,1,137,1,137,
        1,137,1,137,3,137,1855,8,137,1,137,1,137,1,137,1,137,1,137,1,137,
        3,137,1863,8,137,1,137,1,137,3,137,1867,8,137,1,137,3,137,1870,8,
        137,1,137,1,137,3,137,1874,8,137,1,137,1,137,1,137,3,137,1879,8,
        137,1,138,3,138,1882,8,138,1,138,3,138,1885,8,138,1,138,1,138,3,
        138,1889,8,138,1,138,1,138,1,139,3,139,1894,8,139,1,139,1,139,1,
        139,1,139,1,139,1,139,1,139,1,139,3,139,1904,8,139,1,140,1,140,1,
        140,1,140,1,140,3,140,1911,8,140,1,141,1,141,1,141,3,141,1916,8,
        141,1,142,1,142,3,142,1920,8,142,1,143,1,143,1,143,3,143,1925,8,
        143,1,143,1,143,1,143,1,143,3,143,1931,8,143,5,143,1933,8,143,10,
        143,12,143,1936,9,143,1,144,1,144,1,144,3,144,1941,8,144,1,144,1,
        144,1,144,1,144,3,144,1947,8,144,1,145,1,145,3,145,1951,8,145,1,
        146,1,146,1,146,3,146,1956,8,146,1,146,1,146,1,147,1,147,3,147,1962,
        8,147,1,147,1,147,3,147,1966,8,147,1,147,3,147,1969,8,147,1,147,
        1,147,3,147,1973,8,147,1,147,3,147,1976,8,147,3,147,1978,8,147,1,
        148,3,148,1981,8,148,1,148,1,148,1,149,1,149,1,150,1,150,1,151,1,
        151,3,151,1991,8,151,1,151,1,151,1,151,3,151,1996,8,151,3,151,1998,
        8,151,1,152,3,152,2001,8,152,1,152,3,152,2004,8,152,1,152,3,152,
        2007,8,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,2016,
        8,152,1,153,1,153,1,153,1,153,1,153,1,153,5,153,2024,8,153,10,153,
        12,153,2027,9,153,1,154,1,154,3,154,2031,8,154,1,154,3,154,2034,
        8,154,1,154,1,154,3,154,2038,8,154,1,154,3,154,2041,8,154,1,154,
        3,154,2044,8,154,1,154,1,154,3,154,2048,8,154,1,155,1,155,1,155,
        1,155,1,155,5,155,2055,8,155,10,155,12,155,2058,9,155,1,156,1,156,
        1,157,1,157,1,157,1,157,1,158,1,158,1,158,1,159,1,159,1,159,3,159,
        2072,8,159,1,159,1,159,1,159,1,159,3,159,2078,8,159,5,159,2080,8,
        159,10,159,12,159,2083,9,159,1,160,3,160,2086,8,160,1,160,1,160,
        3,160,2090,8,160,1,160,1,160,3,160,2094,8,160,1,160,1,160,3,160,
        2098,8,160,1,160,1,160,3,160,2102,8,160,1,160,1,160,3,160,2106,8,
        160,1,161,3,161,2109,8,161,1,161,1,161,3,161,2113,8,161,1,162,1,
        162,1,163,1,163,1,164,1,164,1,164,1,165,1,165,3,165,2124,8,165,1,
        166,1,166,3,166,2128,8,166,1,167,1,167,1,167,1,168,1,168,3,168,2135,
        8,168,1,168,1,168,3,168,2139,8,168,1,168,1,168,1,168,3,168,2144,
        8,168,1,169,1,169,1,169,3,169,2149,8,169,1,169,1,169,1,169,1,169,
        1,169,3,169,2156,8,169,1,170,1,170,3,170,2160,8,170,1,171,1,171,
        1,171,1,172,1,172,1,172,1,172,1,172,3,172,2170,8,172,1,173,1,173,
        1,173,1,173,1,173,1,173,1,174,1,174,1,174,1,174,1,174,1,174,5,174,
        2184,8,174,10,174,12,174,2187,9,174,1,175,1,175,3,175,2191,8,175,
        1,176,1,176,3,176,2195,8,176,1,176,3,176,2198,8,176,1,176,1,176,
        3,176,2202,8,176,1,176,1,176,1,176,1,176,3,176,2208,8,176,1,176,
        3,176,2211,8,176,1,176,1,176,3,176,2215,8,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,3,176,2225,8,176,1,176,3,176,2228,
        8,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,2236,8,176,1,176,
        1,176,1,176,3,176,2241,8,176,1,177,1,177,1,177,3,177,2246,8,177,
        1,177,1,177,1,178,1,178,1,178,1,178,3,178,2254,8,178,1,178,1,178,
        1,178,1,178,1,178,3,178,2261,8,178,1,178,1,178,3,178,2265,8,178,
        1,179,1,179,1,180,1,180,1,180,3,180,2272,8,180,1,180,1,180,1,180,
        1,180,3,180,2278,8,180,5,180,2280,8,180,10,180,12,180,2283,9,180,
        1,181,1,181,1,181,3,181,2288,8,181,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,3,182,2297,8,182,1,182,1,182,3,182,2301,8,182,1,183,
        3,183,2304,8,183,1,183,1,183,1,183,1,184,1,184,1,184,1,184,1,184,
        1,185,1,185,1,185,1,185,1,186,1,186,3,186,2320,8,186,1,186,1,186,
        1,186,1,187,1,187,3,187,2327,8,187,1,188,1,188,1,188,1,188,1,188,
        1,188,1,189,3,189,2336,8,189,1,189,1,189,1,189,1,189,3,189,2342,
        8,189,1,189,1,189,3,189,2346,8,189,1,189,3,189,2349,8,189,1,190,
        1,190,3,190,2353,8,190,1,191,1,191,3,191,2357,8,191,1,192,1,192,
        1,192,3,192,2362,8,192,1,192,1,192,1,193,1,193,1,193,3,193,2369,
        8,193,1,193,1,193,1,193,1,193,3,193,2375,8,193,5,193,2377,8,193,
        10,193,12,193,2380,9,193,1,194,1,194,1,194,1,194,1,194,1,194,3,194,
        2388,8,194,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
        1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
        1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
        1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
        1,195,1,195,1,195,1,195,1,195,1,195,3,195,2438,8,195,1,196,1,196,
        1,196,1,196,4,196,2444,8,196,11,196,12,196,2445,1,196,1,196,1,196,
        3,196,2451,8,196,1,197,1,197,1,198,1,198,1,199,1,199,1,199,0,34,
        10,20,30,52,62,64,66,68,72,74,76,78,80,82,84,92,104,122,176,212,
        218,230,234,242,264,268,272,286,306,310,318,348,360,386,200,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
        224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
        256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
        288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,
        320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,
        352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,
        384,386,388,390,392,394,396,398,0,13,2,0,90,90,94,94,2,0,84,86,90,
        93,1,0,105,106,3,0,94,94,97,104,107,108,5,0,29,29,40,40,50,50,56,
        56,63,63,3,0,27,27,37,37,73,73,2,0,15,15,75,75,2,0,90,90,113,113,
        3,0,14,14,59,59,70,70,2,0,31,31,46,46,1,0,47,49,2,0,30,30,65,65,
        1,0,137,140,2737,0,401,1,0,0,0,2,413,1,0,0,0,4,417,1,0,0,0,6,428,
        1,0,0,0,8,430,1,0,0,0,10,447,1,0,0,0,12,464,1,0,0,0,14,470,1,0,0,
        0,16,482,1,0,0,0,18,484,1,0,0,0,20,486,1,0,0,0,22,504,1,0,0,0,24,
        510,1,0,0,0,26,517,1,0,0,0,28,519,1,0,0,0,30,598,1,0,0,0,32,643,
        1,0,0,0,34,645,1,0,0,0,36,647,1,0,0,0,38,671,1,0,0,0,40,701,1,0,
        0,0,42,703,1,0,0,0,44,729,1,0,0,0,46,731,1,0,0,0,48,735,1,0,0,0,
        50,744,1,0,0,0,52,746,1,0,0,0,54,771,1,0,0,0,56,785,1,0,0,0,58,787,
        1,0,0,0,60,798,1,0,0,0,62,800,1,0,0,0,64,814,1,0,0,0,66,831,1,0,
        0,0,68,845,1,0,0,0,70,857,1,0,0,0,72,859,1,0,0,0,74,879,1,0,0,0,
        76,893,1,0,0,0,78,904,1,0,0,0,80,915,1,0,0,0,82,926,1,0,0,0,84,937,
        1,0,0,0,86,955,1,0,0,0,88,963,1,0,0,0,90,965,1,0,0,0,92,967,1,0,
        0,0,94,978,1,0,0,0,96,1006,1,0,0,0,98,1028,1,0,0,0,100,1031,1,0,
        0,0,102,1035,1,0,0,0,104,1041,1,0,0,0,106,1071,1,0,0,0,108,1089,
        1,0,0,0,110,1126,1,0,0,0,112,1130,1,0,0,0,114,1133,1,0,0,0,116,1140,
        1,0,0,0,118,1158,1,0,0,0,120,1160,1,0,0,0,122,1162,1,0,0,0,124,1181,
        1,0,0,0,126,1191,1,0,0,0,128,1193,1,0,0,0,130,1216,1,0,0,0,132,1218,
        1,0,0,0,134,1226,1,0,0,0,136,1228,1,0,0,0,138,1237,1,0,0,0,140,1246,
        1,0,0,0,142,1248,1,0,0,0,144,1250,1,0,0,0,146,1252,1,0,0,0,148,1257,
        1,0,0,0,150,1263,1,0,0,0,152,1272,1,0,0,0,154,1281,1,0,0,0,156,1306,
        1,0,0,0,158,1312,1,0,0,0,160,1323,1,0,0,0,162,1349,1,0,0,0,164,1351,
        1,0,0,0,166,1366,1,0,0,0,168,1387,1,0,0,0,170,1389,1,0,0,0,172,1404,
        1,0,0,0,174,1406,1,0,0,0,176,1409,1,0,0,0,178,1425,1,0,0,0,180,1427,
        1,0,0,0,182,1431,1,0,0,0,184,1433,1,0,0,0,186,1437,1,0,0,0,188,1441,
        1,0,0,0,190,1444,1,0,0,0,192,1453,1,0,0,0,194,1462,1,0,0,0,196,1470,
        1,0,0,0,198,1472,1,0,0,0,200,1474,1,0,0,0,202,1481,1,0,0,0,204,1498,
        1,0,0,0,206,1501,1,0,0,0,208,1511,1,0,0,0,210,1527,1,0,0,0,212,1529,
        1,0,0,0,214,1546,1,0,0,0,216,1564,1,0,0,0,218,1573,1,0,0,0,220,1590,
        1,0,0,0,222,1596,1,0,0,0,224,1598,1,0,0,0,226,1602,1,0,0,0,228,1604,
        1,0,0,0,230,1608,1,0,0,0,232,1631,1,0,0,0,234,1633,1,0,0,0,236,1644,
        1,0,0,0,238,1653,1,0,0,0,240,1659,1,0,0,0,242,1670,1,0,0,0,244,1688,
        1,0,0,0,246,1703,1,0,0,0,248,1731,1,0,0,0,250,1733,1,0,0,0,252,1737,
        1,0,0,0,254,1739,1,0,0,0,256,1742,1,0,0,0,258,1746,1,0,0,0,260,1758,
        1,0,0,0,262,1765,1,0,0,0,264,1781,1,0,0,0,266,1803,1,0,0,0,268,1805,
        1,0,0,0,270,1834,1,0,0,0,272,1836,1,0,0,0,274,1878,1,0,0,0,276,1881,
        1,0,0,0,278,1903,1,0,0,0,280,1910,1,0,0,0,282,1915,1,0,0,0,284,1919,
        1,0,0,0,286,1921,1,0,0,0,288,1946,1,0,0,0,290,1950,1,0,0,0,292,1952,
        1,0,0,0,294,1977,1,0,0,0,296,1980,1,0,0,0,298,1984,1,0,0,0,300,1986,
        1,0,0,0,302,1997,1,0,0,0,304,2015,1,0,0,0,306,2017,1,0,0,0,308,2047,
        1,0,0,0,310,2049,1,0,0,0,312,2059,1,0,0,0,314,2061,1,0,0,0,316,2065,
        1,0,0,0,318,2068,1,0,0,0,320,2105,1,0,0,0,322,2112,1,0,0,0,324,2114,
        1,0,0,0,326,2116,1,0,0,0,328,2118,1,0,0,0,330,2121,1,0,0,0,332,2125,
        1,0,0,0,334,2129,1,0,0,0,336,2143,1,0,0,0,338,2155,1,0,0,0,340,2159,
        1,0,0,0,342,2161,1,0,0,0,344,2169,1,0,0,0,346,2171,1,0,0,0,348,2177,
        1,0,0,0,350,2190,1,0,0,0,352,2240,1,0,0,0,354,2242,1,0,0,0,356,2264,
        1,0,0,0,358,2266,1,0,0,0,360,2268,1,0,0,0,362,2287,1,0,0,0,364,2300,
        1,0,0,0,366,2303,1,0,0,0,368,2308,1,0,0,0,370,2313,1,0,0,0,372,2317,
        1,0,0,0,374,2324,1,0,0,0,376,2328,1,0,0,0,378,2348,1,0,0,0,380,2350,
        1,0,0,0,382,2356,1,0,0,0,384,2358,1,0,0,0,386,2365,1,0,0,0,388,2387,
        1,0,0,0,390,2437,1,0,0,0,392,2450,1,0,0,0,394,2452,1,0,0,0,396,2454,
        1,0,0,0,398,2456,1,0,0,0,400,402,3,122,61,0,401,400,1,0,0,0,401,
        402,1,0,0,0,402,403,1,0,0,0,403,404,5,0,0,1,404,1,1,0,0,0,405,414,
        3,392,196,0,406,414,5,62,0,0,407,408,5,78,0,0,408,409,3,92,46,0,
        409,410,5,79,0,0,410,414,1,0,0,0,411,414,3,4,2,0,412,414,3,12,6,
        0,413,405,1,0,0,0,413,406,1,0,0,0,413,407,1,0,0,0,413,411,1,0,0,
        0,413,412,1,0,0,0,414,3,1,0,0,0,415,418,3,6,3,0,416,418,3,8,4,0,
        417,415,1,0,0,0,417,416,1,0,0,0,418,5,1,0,0,0,419,429,5,127,0,0,
        420,429,3,342,171,0,421,429,3,328,164,0,422,429,3,344,172,0,423,
        424,5,92,0,0,424,429,3,290,145,0,425,426,5,92,0,0,426,429,3,160,
        80,0,427,429,3,356,178,0,428,419,1,0,0,0,428,420,1,0,0,0,428,421,
        1,0,0,0,428,422,1,0,0,0,428,423,1,0,0,0,428,425,1,0,0,0,428,427,
        1,0,0,0,429,7,1,0,0,0,430,432,3,10,5,0,431,433,5,61,0,0,432,431,
        1,0,0,0,432,433,1,0,0,0,433,434,1,0,0,0,434,435,3,6,3,0,435,9,1,
        0,0,0,436,437,6,5,-1,0,437,448,5,122,0,0,438,439,3,158,79,0,439,
        440,5,122,0,0,440,448,1,0,0,0,441,442,3,182,91,0,442,443,5,122,0,
        0,443,448,1,0,0,0,444,445,3,160,80,0,445,446,5,122,0,0,446,448,1,
        0,0,0,447,436,1,0,0,0,447,438,1,0,0,0,447,441,1,0,0,0,447,444,1,
        0,0,0,448,461,1,0,0,0,449,450,10,2,0,0,450,451,5,127,0,0,451,460,
        5,122,0,0,452,454,10,1,0,0,453,455,5,61,0,0,454,453,1,0,0,0,454,
        455,1,0,0,0,455,456,1,0,0,0,456,457,3,354,177,0,457,458,5,122,0,
        0,458,460,1,0,0,0,459,449,1,0,0,0,459,452,1,0,0,0,460,463,1,0,0,
        0,461,459,1,0,0,0,461,462,1,0,0,0,462,11,1,0,0,0,463,461,1,0,0,0,
        464,466,3,14,7,0,465,467,3,28,14,0,466,465,1,0,0,0,466,467,1,0,0,
        0,467,468,1,0,0,0,468,469,3,102,51,0,469,13,1,0,0,0,470,472,5,80,
        0,0,471,473,3,16,8,0,472,471,1,0,0,0,472,473,1,0,0,0,473,474,1,0,
        0,0,474,475,5,81,0,0,475,15,1,0,0,0,476,483,3,18,9,0,477,483,3,20,
        10,0,478,479,3,18,9,0,479,480,5,117,0,0,480,481,3,20,10,0,481,483,
        1,0,0,0,482,476,1,0,0,0,482,477,1,0,0,0,482,478,1,0,0,0,483,17,1,
        0,0,0,484,485,7,0,0,0,485,19,1,0,0,0,486,487,6,10,-1,0,487,489,3,
        22,11,0,488,490,5,126,0,0,489,488,1,0,0,0,489,490,1,0,0,0,490,499,
        1,0,0,0,491,492,10,1,0,0,492,493,5,117,0,0,493,495,3,22,11,0,494,
        496,5,126,0,0,495,494,1,0,0,0,495,496,1,0,0,0,496,498,1,0,0,0,497,
        491,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,
        21,1,0,0,0,501,499,1,0,0,0,502,505,3,24,12,0,503,505,3,26,13,0,504,
        502,1,0,0,0,504,503,1,0,0,0,505,23,1,0,0,0,506,511,5,127,0,0,507,
        508,5,90,0,0,508,511,5,127,0,0,509,511,5,62,0,0,510,506,1,0,0,0,
        510,507,1,0,0,0,510,509,1,0,0,0,511,25,1,0,0,0,512,513,5,127,0,0,
        513,518,3,280,140,0,514,515,5,90,0,0,515,516,5,127,0,0,516,518,3,
        280,140,0,517,512,1,0,0,0,517,514,1,0,0,0,518,27,1,0,0,0,519,520,
        5,78,0,0,520,521,3,270,135,0,521,523,5,79,0,0,522,524,5,40,0,0,523,
        522,1,0,0,0,523,524,1,0,0,0,524,526,1,0,0,0,525,527,3,382,191,0,
        526,525,1,0,0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,530,3,212,106,
        0,529,528,1,0,0,0,529,530,1,0,0,0,530,532,1,0,0,0,531,533,3,246,
        123,0,532,531,1,0,0,0,532,533,1,0,0,0,533,29,1,0,0,0,534,535,6,15,
        -1,0,535,599,3,2,1,0,536,537,3,156,78,0,537,539,5,78,0,0,538,540,
        3,36,18,0,539,538,1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,
        5,79,0,0,542,599,1,0,0,0,543,544,3,364,182,0,544,546,5,78,0,0,545,
        547,3,36,18,0,546,545,1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,
        549,5,79,0,0,549,599,1,0,0,0,550,551,3,156,78,0,551,552,3,288,144,
        0,552,599,1,0,0,0,553,554,3,364,182,0,554,555,3,288,144,0,555,599,
        1,0,0,0,556,557,5,24,0,0,557,558,5,95,0,0,558,559,3,258,129,0,559,
        560,5,96,0,0,560,561,5,78,0,0,561,562,3,92,46,0,562,563,5,79,0,0,
        563,599,1,0,0,0,564,565,5,58,0,0,565,566,5,95,0,0,566,567,3,258,
        129,0,567,568,5,96,0,0,568,569,5,78,0,0,569,570,3,92,46,0,570,571,
        5,79,0,0,571,599,1,0,0,0,572,573,5,51,0,0,573,574,5,95,0,0,574,575,
        3,258,129,0,575,576,5,96,0,0,576,577,5,78,0,0,577,578,3,92,46,0,
        578,579,5,79,0,0,579,599,1,0,0,0,580,581,5,17,0,0,581,582,5,95,0,
        0,582,583,3,258,129,0,583,584,5,96,0,0,584,585,5,78,0,0,585,586,
        3,92,46,0,586,587,5,79,0,0,587,599,1,0,0,0,588,589,3,34,17,0,589,
        590,5,78,0,0,590,591,3,92,46,0,591,592,5,79,0,0,592,599,1,0,0,0,
        593,594,3,34,17,0,594,595,5,78,0,0,595,596,3,258,129,0,596,597,5,
        79,0,0,597,599,1,0,0,0,598,534,1,0,0,0,598,536,1,0,0,0,598,543,1,
        0,0,0,598,550,1,0,0,0,598,553,1,0,0,0,598,556,1,0,0,0,598,564,1,
        0,0,0,598,572,1,0,0,0,598,580,1,0,0,0,598,588,1,0,0,0,598,593,1,
        0,0,0,599,640,1,0,0,0,600,601,10,19,0,0,601,602,5,80,0,0,602,603,
        3,92,46,0,603,604,5,81,0,0,604,639,1,0,0,0,605,606,10,18,0,0,606,
        607,5,80,0,0,607,608,3,288,144,0,608,609,5,81,0,0,609,639,1,0,0,
        0,610,611,10,17,0,0,611,613,5,78,0,0,612,614,3,36,18,0,613,612,1,
        0,0,0,613,614,1,0,0,0,614,615,1,0,0,0,615,639,5,79,0,0,616,617,10,
        12,0,0,617,619,5,124,0,0,618,620,5,61,0,0,619,618,1,0,0,0,619,620,
        1,0,0,0,620,621,1,0,0,0,621,639,3,4,2,0,622,623,10,11,0,0,623,625,
        5,119,0,0,624,626,5,61,0,0,625,624,1,0,0,0,625,626,1,0,0,0,626,627,
        1,0,0,0,627,639,3,4,2,0,628,629,10,10,0,0,629,630,5,124,0,0,630,
        639,3,38,19,0,631,632,10,9,0,0,632,633,5,119,0,0,633,639,3,38,19,
        0,634,635,10,8,0,0,635,639,5,115,0,0,636,637,10,7,0,0,637,639,5,
        116,0,0,638,600,1,0,0,0,638,605,1,0,0,0,638,610,1,0,0,0,638,616,
        1,0,0,0,638,622,1,0,0,0,638,628,1,0,0,0,638,631,1,0,0,0,638,634,
        1,0,0,0,638,636,1,0,0,0,639,642,1,0,0,0,640,638,1,0,0,0,640,641,
        1,0,0,0,641,31,1,0,0,0,642,640,1,0,0,0,643,644,5,68,0,0,644,33,1,
        0,0,0,645,646,5,68,0,0,646,35,1,0,0,0,647,648,3,286,143,0,648,37,
        1,0,0,0,649,651,3,10,5,0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,
        1,0,0,0,652,653,3,158,79,0,653,654,5,122,0,0,654,655,5,92,0,0,655,
        656,3,158,79,0,656,672,1,0,0,0,657,658,3,10,5,0,658,659,5,61,0,0,
        659,660,3,354,177,0,660,661,5,122,0,0,661,662,5,92,0,0,662,663,3,
        158,79,0,663,672,1,0,0,0,664,666,3,10,5,0,665,664,1,0,0,0,665,666,
        1,0,0,0,666,667,1,0,0,0,667,668,5,92,0,0,668,672,3,158,79,0,669,
        670,5,92,0,0,670,672,3,160,80,0,671,650,1,0,0,0,671,657,1,0,0,0,
        671,665,1,0,0,0,671,669,1,0,0,0,672,39,1,0,0,0,673,702,3,30,15,0,
        674,675,5,115,0,0,675,702,3,60,30,0,676,677,5,116,0,0,677,702,3,
        60,30,0,678,679,3,42,21,0,679,680,3,60,30,0,680,702,1,0,0,0,681,
        682,5,55,0,0,682,702,3,40,20,0,683,684,5,55,0,0,684,685,5,78,0,0,
        685,686,3,258,129,0,686,687,5,79,0,0,687,702,1,0,0,0,688,689,5,55,
        0,0,689,690,5,126,0,0,690,691,5,78,0,0,691,692,5,127,0,0,692,702,
        5,79,0,0,693,694,5,4,0,0,694,695,5,78,0,0,695,696,3,258,129,0,696,
        697,5,79,0,0,697,702,1,0,0,0,698,702,3,58,29,0,699,702,3,44,22,0,
        700,702,3,56,28,0,701,673,1,0,0,0,701,674,1,0,0,0,701,676,1,0,0,
        0,701,678,1,0,0,0,701,681,1,0,0,0,701,683,1,0,0,0,701,688,1,0,0,
        0,701,693,1,0,0,0,701,698,1,0,0,0,701,699,1,0,0,0,701,700,1,0,0,
        0,702,41,1,0,0,0,703,704,7,1,0,0,704,43,1,0,0,0,705,707,5,122,0,
        0,706,705,1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,710,5,42,0,
        0,709,711,3,46,23,0,710,709,1,0,0,0,710,711,1,0,0,0,711,712,1,0,
        0,0,712,714,3,48,24,0,713,715,3,54,27,0,714,713,1,0,0,0,714,715,
        1,0,0,0,715,730,1,0,0,0,716,718,5,122,0,0,717,716,1,0,0,0,717,718,
        1,0,0,0,718,719,1,0,0,0,719,721,5,42,0,0,720,722,3,46,23,0,721,720,
        1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,724,5,78,0,0,724,725,
        3,258,129,0,725,727,5,79,0,0,726,728,3,54,27,0,727,726,1,0,0,0,727,
        728,1,0,0,0,728,730,1,0,0,0,729,706,1,0,0,0,729,717,1,0,0,0,730,
        45,1,0,0,0,731,732,5,78,0,0,732,733,3,36,18,0,733,734,5,79,0,0,734,
        47,1,0,0,0,735,737,3,152,76,0,736,738,3,50,25,0,737,736,1,0,0,0,
        737,738,1,0,0,0,738,49,1,0,0,0,739,741,3,248,124,0,740,742,3,50,
        25,0,741,740,1,0,0,0,741,742,1,0,0,0,742,745,1,0,0,0,743,745,3,52,
        26,0,744,739,1,0,0,0,744,743,1,0,0,0,745,51,1,0,0,0,746,747,6,26,
        -1,0,747,748,5,80,0,0,748,749,3,92,46,0,749,751,5,81,0,0,750,752,
        3,212,106,0,751,750,1,0,0,0,751,752,1,0,0,0,752,762,1,0,0,0,753,
        754,10,1,0,0,754,755,5,80,0,0,755,756,3,94,47,0,756,758,5,81,0,0,
        757,759,3,212,106,0,758,757,1,0,0,0,758,759,1,0,0,0,759,761,1,0,
        0,0,760,753,1,0,0,0,761,764,1,0,0,0,762,760,1,0,0,0,762,763,1,0,
        0,0,763,53,1,0,0,0,764,762,1,0,0,0,765,767,5,78,0,0,766,768,3,36,
        18,0,767,766,1,0,0,0,767,768,1,0,0,0,768,769,1,0,0,0,769,772,5,79,
        0,0,770,772,3,288,144,0,771,765,1,0,0,0,771,770,1,0,0,0,772,55,1,
        0,0,0,773,775,5,122,0,0,774,773,1,0,0,0,774,775,1,0,0,0,775,776,
        1,0,0,0,776,777,5,21,0,0,777,786,3,60,30,0,778,780,5,122,0,0,779,
        778,1,0,0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,782,5,21,0,0,782,
        783,5,80,0,0,783,784,5,81,0,0,784,786,3,60,30,0,785,774,1,0,0,0,
        785,779,1,0,0,0,786,57,1,0,0,0,787,788,5,43,0,0,788,789,5,78,0,0,
        789,790,3,92,46,0,790,791,5,79,0,0,791,59,1,0,0,0,792,799,3,40,20,
        0,793,794,5,78,0,0,794,795,3,258,129,0,795,796,5,79,0,0,796,797,
        3,60,30,0,797,799,1,0,0,0,798,792,1,0,0,0,798,793,1,0,0,0,799,61,
        1,0,0,0,800,801,6,31,-1,0,801,802,3,60,30,0,802,811,1,0,0,0,803,
        804,10,2,0,0,804,805,5,125,0,0,805,810,3,60,30,0,806,807,10,1,0,
        0,807,808,5,118,0,0,808,810,3,60,30,0,809,803,1,0,0,0,809,806,1,
        0,0,0,810,813,1,0,0,0,811,809,1,0,0,0,811,812,1,0,0,0,812,63,1,0,
        0,0,813,811,1,0,0,0,814,815,6,32,-1,0,815,816,3,62,31,0,816,828,
        1,0,0,0,817,818,10,3,0,0,818,819,5,86,0,0,819,827,3,62,31,0,820,
        821,10,2,0,0,821,822,5,87,0,0,822,827,3,62,31,0,823,824,10,1,0,0,
        824,825,5,88,0,0,825,827,3,62,31,0,826,817,1,0,0,0,826,820,1,0,0,
        0,826,823,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,
        0,829,65,1,0,0,0,830,828,1,0,0,0,831,832,6,33,-1,0,832,833,3,64,
        32,0,833,842,1,0,0,0,834,835,10,2,0,0,835,836,5,84,0,0,836,841,3,
        64,32,0,837,838,10,1,0,0,838,839,5,85,0,0,839,841,3,64,32,0,840,
        834,1,0,0,0,840,837,1,0,0,0,841,844,1,0,0,0,842,840,1,0,0,0,842,
        843,1,0,0,0,843,67,1,0,0,0,844,842,1,0,0,0,845,846,6,34,-1,0,846,
        847,3,66,33,0,847,854,1,0,0,0,848,849,10,1,0,0,849,850,3,70,35,0,
        850,851,3,66,33,0,851,853,1,0,0,0,852,848,1,0,0,0,853,856,1,0,0,
        0,854,852,1,0,0,0,854,855,1,0,0,0,855,69,1,0,0,0,856,854,1,0,0,0,
        857,858,7,2,0,0,858,71,1,0,0,0,859,860,6,36,-1,0,860,861,3,68,34,
        0,861,876,1,0,0,0,862,863,10,4,0,0,863,864,5,95,0,0,864,875,3,68,
        34,0,865,866,10,3,0,0,866,867,5,96,0,0,867,875,3,68,34,0,868,869,
        10,2,0,0,869,870,5,111,0,0,870,875,3,68,34,0,871,872,10,1,0,0,872,
        873,5,112,0,0,873,875,3,68,34,0,874,862,1,0,0,0,874,865,1,0,0,0,
        874,868,1,0,0,0,874,871,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,
        876,877,1,0,0,0,877,73,1,0,0,0,878,876,1,0,0,0,879,880,6,37,-1,0,
        880,881,3,72,36,0,881,890,1,0,0,0,882,883,10,2,0,0,883,884,5,109,
        0,0,884,889,3,72,36,0,885,886,10,1,0,0,886,887,5,110,0,0,887,889,
        3,72,36,0,888,882,1,0,0,0,888,885,1,0,0,0,889,892,1,0,0,0,890,888,
        1,0,0,0,890,891,1,0,0,0,891,75,1,0,0,0,892,890,1,0,0,0,893,894,6,
        38,-1,0,894,895,3,74,37,0,895,901,1,0,0,0,896,897,10,1,0,0,897,898,
        5,90,0,0,898,900,3,74,37,0,899,896,1,0,0,0,900,903,1,0,0,0,901,899,
        1,0,0,0,901,902,1,0,0,0,902,77,1,0,0,0,903,901,1,0,0,0,904,905,6,
        39,-1,0,905,906,3,76,38,0,906,912,1,0,0,0,907,908,10,1,0,0,908,909,
        5,89,0,0,909,911,3,76,38,0,910,907,1,0,0,0,911,914,1,0,0,0,912,910,
        1,0,0,0,912,913,1,0,0,0,913,79,1,0,0,0,914,912,1,0,0,0,915,916,6,
        40,-1,0,916,917,3,78,39,0,917,923,1,0,0,0,918,919,10,1,0,0,919,920,
        5,91,0,0,920,922,3,78,39,0,921,918,1,0,0,0,922,925,1,0,0,0,923,921,
        1,0,0,0,923,924,1,0,0,0,924,81,1,0,0,0,925,923,1,0,0,0,926,927,6,
        41,-1,0,927,928,3,80,40,0,928,934,1,0,0,0,929,930,10,1,0,0,930,931,
        5,113,0,0,931,933,3,80,40,0,932,929,1,0,0,0,933,936,1,0,0,0,934,
        932,1,0,0,0,934,935,1,0,0,0,935,83,1,0,0,0,936,934,1,0,0,0,937,938,
        6,42,-1,0,938,939,3,82,41,0,939,945,1,0,0,0,940,941,10,1,0,0,941,
        942,5,114,0,0,942,944,3,82,41,0,943,940,1,0,0,0,944,947,1,0,0,0,
        945,943,1,0,0,0,945,946,1,0,0,0,946,85,1,0,0,0,947,945,1,0,0,0,948,
        956,3,84,42,0,949,950,3,84,42,0,950,951,5,120,0,0,951,952,3,92,46,
        0,952,953,5,121,0,0,953,954,3,88,44,0,954,956,1,0,0,0,955,948,1,
        0,0,0,955,949,1,0,0,0,956,87,1,0,0,0,957,964,3,86,43,0,958,959,3,
        84,42,0,959,960,3,90,45,0,960,961,3,284,142,0,961,964,1,0,0,0,962,
        964,3,380,190,0,963,957,1,0,0,0,963,958,1,0,0,0,963,962,1,0,0,0,
        964,89,1,0,0,0,965,966,7,3,0,0,966,91,1,0,0,0,967,968,6,46,-1,0,
        968,969,3,88,44,0,969,975,1,0,0,0,970,971,10,1,0,0,971,972,5,117,
        0,0,972,974,3,88,44,0,973,970,1,0,0,0,974,977,1,0,0,0,975,973,1,
        0,0,0,975,976,1,0,0,0,976,93,1,0,0,0,977,975,1,0,0,0,978,979,3,86,
        43,0,979,95,1,0,0,0,980,1007,3,98,49,0,981,983,3,212,106,0,982,981,
        1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,1007,3,100,50,0,985,
        987,3,212,106,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,
        988,1007,3,102,51,0,989,991,3,212,106,0,990,989,1,0,0,0,990,991,
        1,0,0,0,991,992,1,0,0,0,992,1007,3,106,53,0,993,995,3,212,106,0,
        994,993,1,0,0,0,994,995,1,0,0,0,995,996,1,0,0,0,996,1007,3,110,55,
        0,997,999,3,212,106,0,998,997,1,0,0,0,998,999,1,0,0,0,999,1000,1,
        0,0,0,1000,1007,3,118,59,0,1001,1007,3,120,60,0,1002,1004,3,212,
        106,0,1003,1002,1,0,0,0,1003,1004,1,0,0,0,1004,1005,1,0,0,0,1005,
        1007,3,370,185,0,1006,980,1,0,0,0,1006,982,1,0,0,0,1006,986,1,0,
        0,0,1006,990,1,0,0,0,1006,994,1,0,0,0,1006,998,1,0,0,0,1006,1001,
        1,0,0,0,1006,1003,1,0,0,0,1007,97,1,0,0,0,1008,1010,3,212,106,0,
        1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,1012,
        5,127,0,0,1012,1013,5,121,0,0,1013,1029,3,96,48,0,1014,1016,3,212,
        106,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,
        1018,5,9,0,0,1018,1019,3,94,47,0,1019,1020,5,121,0,0,1020,1021,3,
        96,48,0,1021,1029,1,0,0,0,1022,1024,3,212,106,0,1023,1022,1,0,0,
        0,1023,1024,1,0,0,0,1024,1025,1,0,0,0,1025,1026,5,20,0,0,1026,1027,
        5,121,0,0,1027,1029,3,96,48,0,1028,1009,1,0,0,0,1028,1015,1,0,0,
        0,1028,1023,1,0,0,0,1029,99,1,0,0,0,1030,1032,3,92,46,0,1031,1030,
        1,0,0,0,1031,1032,1,0,0,0,1032,1033,1,0,0,0,1033,1034,5,123,0,0,
        1034,101,1,0,0,0,1035,1037,5,82,0,0,1036,1038,3,104,52,0,1037,1036,
        1,0,0,0,1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,1040,5,83,0,0,1040,
        103,1,0,0,0,1041,1042,6,52,-1,0,1042,1043,3,96,48,0,1043,1048,1,
        0,0,0,1044,1045,10,1,0,0,1045,1047,3,96,48,0,1046,1044,1,0,0,0,1047,
        1050,1,0,0,0,1048,1046,1,0,0,0,1048,1049,1,0,0,0,1049,105,1,0,0,
        0,1050,1048,1,0,0,0,1051,1052,5,36,0,0,1052,1053,5,78,0,0,1053,1054,
        3,108,54,0,1054,1055,5,79,0,0,1055,1056,3,96,48,0,1056,1072,1,0,
        0,0,1057,1058,5,36,0,0,1058,1059,5,78,0,0,1059,1060,3,108,54,0,1060,
        1061,5,79,0,0,1061,1062,3,96,48,0,1062,1063,5,25,0,0,1063,1064,3,
        96,48,0,1064,1072,1,0,0,0,1065,1066,5,60,0,0,1066,1067,5,78,0,0,
        1067,1068,3,108,54,0,1068,1069,5,79,0,0,1069,1070,3,96,48,0,1070,
        1072,1,0,0,0,1071,1051,1,0,0,0,1071,1057,1,0,0,0,1071,1065,1,0,0,
        0,1072,107,1,0,0,0,1073,1090,3,92,46,0,1074,1076,3,212,106,0,1075,
        1074,1,0,0,0,1075,1076,1,0,0,0,1076,1077,1,0,0,0,1077,1078,3,140,
        70,0,1078,1079,3,238,119,0,1079,1080,5,94,0,0,1080,1081,3,284,142,
        0,1081,1090,1,0,0,0,1082,1084,3,212,106,0,1083,1082,1,0,0,0,1083,
        1084,1,0,0,0,1084,1085,1,0,0,0,1085,1086,3,140,70,0,1086,1087,3,
        238,119,0,1087,1088,3,288,144,0,1088,1090,1,0,0,0,1089,1073,1,0,
        0,0,1089,1075,1,0,0,0,1089,1083,1,0,0,0,1090,109,1,0,0,0,1091,1092,
        5,77,0,0,1092,1093,5,78,0,0,1093,1094,3,108,54,0,1094,1095,5,79,
        0,0,1095,1096,3,96,48,0,1096,1127,1,0,0,0,1097,1098,5,22,0,0,1098,
        1099,3,96,48,0,1099,1100,5,77,0,0,1100,1101,5,78,0,0,1101,1102,3,
        92,46,0,1102,1103,5,79,0,0,1103,1104,5,123,0,0,1104,1127,1,0,0,0,
        1105,1106,5,33,0,0,1106,1107,5,78,0,0,1107,1109,3,112,56,0,1108,
        1110,3,108,54,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,1111,1,
        0,0,0,1111,1113,5,123,0,0,1112,1114,3,92,46,0,1113,1112,1,0,0,0,
        1113,1114,1,0,0,0,1114,1115,1,0,0,0,1115,1116,5,79,0,0,1116,1117,
        3,96,48,0,1117,1127,1,0,0,0,1118,1119,5,33,0,0,1119,1120,5,78,0,
        0,1120,1121,3,114,57,0,1121,1122,5,121,0,0,1122,1123,3,116,58,0,
        1123,1124,5,79,0,0,1124,1125,3,96,48,0,1125,1127,1,0,0,0,1126,1091,
        1,0,0,0,1126,1097,1,0,0,0,1126,1105,1,0,0,0,1126,1118,1,0,0,0,1127,
        111,1,0,0,0,1128,1131,3,100,50,0,1129,1131,3,130,65,0,1130,1128,
        1,0,0,0,1130,1129,1,0,0,0,1131,113,1,0,0,0,1132,1134,3,212,106,0,
        1133,1132,1,0,0,0,1133,1134,1,0,0,0,1134,1135,1,0,0,0,1135,1136,
        3,140,70,0,1136,1137,3,238,119,0,1137,115,1,0,0,0,1138,1141,3,92,
        46,0,1139,1141,3,288,144,0,1140,1138,1,0,0,0,1140,1139,1,0,0,0,1141,
        117,1,0,0,0,1142,1143,5,8,0,0,1143,1159,5,123,0,0,1144,1145,5,18,
        0,0,1145,1159,5,123,0,0,1146,1148,5,52,0,0,1147,1149,3,92,46,0,1148,
        1147,1,0,0,0,1148,1149,1,0,0,0,1149,1150,1,0,0,0,1150,1159,5,123,
        0,0,1151,1152,5,52,0,0,1152,1153,3,288,144,0,1153,1154,5,123,0,0,
        1154,1159,1,0,0,0,1155,1156,5,35,0,0,1156,1157,5,127,0,0,1157,1159,
        5,123,0,0,1158,1142,1,0,0,0,1158,1144,1,0,0,0,1158,1146,1,0,0,0,
        1158,1151,1,0,0,0,1158,1155,1,0,0,0,1159,119,1,0,0,0,1160,1161,3,
        126,63,0,1161,121,1,0,0,0,1162,1163,6,61,-1,0,1163,1164,3,124,62,
        0,1164,1169,1,0,0,0,1165,1166,10,1,0,0,1166,1168,3,124,62,0,1167,
        1165,1,0,0,0,1168,1171,1,0,0,0,1169,1167,1,0,0,0,1169,1170,1,0,0,
        0,1170,123,1,0,0,0,1171,1169,1,0,0,0,1172,1182,3,126,63,0,1173,1182,
        3,276,138,0,1174,1182,3,346,173,0,1175,1182,3,366,183,0,1176,1182,
        3,368,184,0,1177,1182,3,210,105,0,1178,1182,3,186,93,0,1179,1182,
        3,134,67,0,1180,1182,3,136,68,0,1181,1172,1,0,0,0,1181,1173,1,0,
        0,0,1181,1174,1,0,0,0,1181,1175,1,0,0,0,1181,1176,1,0,0,0,1181,1177,
        1,0,0,0,1181,1178,1,0,0,0,1181,1179,1,0,0,0,1181,1180,1,0,0,0,1182,
        125,1,0,0,0,1183,1192,3,130,65,0,1184,1192,3,208,104,0,1185,1192,
        3,200,100,0,1186,1192,3,204,102,0,1187,1192,3,206,103,0,1188,1192,
        3,132,66,0,1189,1192,3,128,64,0,1190,1192,3,170,85,0,1191,1183,1,
        0,0,0,1191,1184,1,0,0,0,1191,1185,1,0,0,0,1191,1186,1,0,0,0,1191,
        1187,1,0,0,0,1191,1188,1,0,0,0,1191,1189,1,0,0,0,1191,1190,1,0,0,
        0,1192,127,1,0,0,0,1193,1194,5,72,0,0,1194,1196,5,127,0,0,1195,1197,
        3,212,106,0,1196,1195,1,0,0,0,1196,1197,1,0,0,0,1197,1198,1,0,0,
        0,1198,1199,5,94,0,0,1199,1200,3,258,129,0,1200,1201,5,123,0,0,1201,
        129,1,0,0,0,1202,1204,3,140,70,0,1203,1202,1,0,0,0,1203,1204,1,0,
        0,0,1204,1206,1,0,0,0,1205,1207,3,234,117,0,1206,1205,1,0,0,0,1206,
        1207,1,0,0,0,1207,1208,1,0,0,0,1208,1217,5,123,0,0,1209,1211,3,212,
        106,0,1210,1212,3,140,70,0,1211,1210,1,0,0,0,1211,1212,1,0,0,0,1212,
        1213,1,0,0,0,1213,1214,3,234,117,0,1214,1215,5,123,0,0,1215,1217,
        1,0,0,0,1216,1203,1,0,0,0,1216,1209,1,0,0,0,1217,131,1,0,0,0,1218,
        1219,5,57,0,0,1219,1220,5,78,0,0,1220,1221,3,94,47,0,1221,1222,5,
        117,0,0,1222,1223,5,136,0,0,1223,1224,5,79,0,0,1224,1225,5,123,0,
        0,1225,133,1,0,0,0,1226,1227,5,123,0,0,1227,135,1,0,0,0,1228,1229,
        3,212,106,0,1229,1230,5,123,0,0,1230,137,1,0,0,0,1231,1238,3,142,
        71,0,1232,1238,3,148,74,0,1233,1238,3,144,72,0,1234,1238,5,34,0,
        0,1235,1238,5,67,0,0,1236,1238,5,16,0,0,1237,1231,1,0,0,0,1237,1232,
        1,0,0,0,1237,1233,1,0,0,0,1237,1234,1,0,0,0,1237,1235,1,0,0,0,1237,
        1236,1,0,0,0,1238,139,1,0,0,0,1239,1241,3,138,69,0,1240,1242,3,212,
        106,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,1247,1,0,0,0,1243,
        1244,3,138,69,0,1244,1245,3,140,70,0,1245,1247,1,0,0,0,1246,1239,
        1,0,0,0,1246,1243,1,0,0,0,1247,141,1,0,0,0,1248,1249,7,4,0,0,1249,
        143,1,0,0,0,1250,1251,7,5,0,0,1251,145,1,0,0,0,1252,1253,5,127,0,
        0,1253,147,1,0,0,0,1254,1258,3,150,75,0,1255,1258,3,292,146,0,1256,
        1258,3,166,83,0,1257,1254,1,0,0,0,1257,1255,1,0,0,0,1257,1256,1,
        0,0,0,1258,149,1,0,0,0,1259,1264,3,156,78,0,1260,1264,3,162,81,0,
        1261,1264,3,364,182,0,1262,1264,3,252,126,0,1263,1259,1,0,0,0,1263,
        1260,1,0,0,0,1263,1261,1,0,0,0,1263,1262,1,0,0,0,1264,151,1,0,0,
        0,1265,1267,3,148,74,0,1266,1268,3,212,106,0,1267,1266,1,0,0,0,1267,
        1268,1,0,0,0,1268,1273,1,0,0,0,1269,1270,3,148,74,0,1270,1271,3,
        152,76,0,1271,1273,1,0,0,0,1272,1265,1,0,0,0,1272,1269,1,0,0,0,1273,
        153,1,0,0,0,1274,1276,3,150,75,0,1275,1277,3,212,106,0,1276,1275,
        1,0,0,0,1276,1277,1,0,0,0,1277,1282,1,0,0,0,1278,1279,3,150,75,0,
        1279,1280,3,154,77,0,1280,1282,1,0,0,0,1281,1274,1,0,0,0,1281,1278,
        1,0,0,0,1282,155,1,0,0,0,1283,1285,3,10,5,0,1284,1283,1,0,0,0,1284,
        1285,1,0,0,0,1285,1286,1,0,0,0,1286,1307,3,158,79,0,1287,1288,3,
        10,5,0,1288,1289,5,61,0,0,1289,1290,3,354,177,0,1290,1307,1,0,0,
        0,1291,1307,5,11,0,0,1292,1307,5,12,0,0,1293,1307,5,13,0,0,1294,
        1307,5,76,0,0,1295,1307,5,7,0,0,1296,1307,5,53,0,0,1297,1307,5,38,
        0,0,1298,1307,5,39,0,0,1299,1307,5,54,0,0,1300,1307,5,71,0,0,1301,
        1307,5,32,0,0,1302,1307,5,23,0,0,1303,1307,5,74,0,0,1304,1307,5,
        6,0,0,1305,1307,3,160,80,0,1306,1284,1,0,0,0,1306,1287,1,0,0,0,1306,
        1291,1,0,0,0,1306,1292,1,0,0,0,1306,1293,1,0,0,0,1306,1294,1,0,0,
        0,1306,1295,1,0,0,0,1306,1296,1,0,0,0,1306,1297,1,0,0,0,1306,1298,
        1,0,0,0,1306,1299,1,0,0,0,1306,1300,1,0,0,0,1306,1301,1,0,0,0,1306,
        1302,1,0,0,0,1306,1303,1,0,0,0,1306,1304,1,0,0,0,1306,1305,1,0,0,
        0,1307,157,1,0,0,0,1308,1313,3,290,145,0,1309,1313,3,164,82,0,1310,
        1313,3,146,73,0,1311,1313,3,354,177,0,1312,1308,1,0,0,0,1312,1309,
        1,0,0,0,1312,1310,1,0,0,0,1312,1311,1,0,0,0,1313,159,1,0,0,0,1314,
        1315,5,19,0,0,1315,1316,5,78,0,0,1316,1317,3,92,46,0,1317,1318,5,
        79,0,0,1318,1324,1,0,0,0,1319,1320,5,19,0,0,1320,1321,5,78,0,0,1321,
        1322,5,6,0,0,1322,1324,5,79,0,0,1323,1314,1,0,0,0,1323,1319,1,0,
        0,0,1324,161,1,0,0,0,1325,1327,3,300,150,0,1326,1328,3,212,106,0,
        1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1330,1,0,0,0,1329,1331,
        3,10,5,0,1330,1329,1,0,0,0,1330,1331,1,0,0,0,1331,1332,1,0,0,0,1332,
        1333,5,127,0,0,1333,1350,1,0,0,0,1334,1335,3,300,150,0,1335,1336,
        3,354,177,0,1336,1350,1,0,0,0,1337,1338,3,300,150,0,1338,1340,3,
        10,5,0,1339,1341,5,61,0,0,1340,1339,1,0,0,0,1340,1341,1,0,0,0,1341,
        1342,1,0,0,0,1342,1343,3,354,177,0,1343,1350,1,0,0,0,1344,1346,5,
        26,0,0,1345,1347,3,10,5,0,1346,1345,1,0,0,0,1346,1347,1,0,0,0,1347,
        1348,1,0,0,0,1348,1350,5,127,0,0,1349,1325,1,0,0,0,1349,1334,1,0,
        0,0,1349,1337,1,0,0,0,1349,1344,1,0,0,0,1350,163,1,0,0,0,1351,1352,
        5,127,0,0,1352,165,1,0,0,0,1353,1354,3,168,84,0,1354,1356,5,82,0,
        0,1355,1357,3,176,88,0,1356,1355,1,0,0,0,1356,1357,1,0,0,0,1357,
        1358,1,0,0,0,1358,1359,5,83,0,0,1359,1367,1,0,0,0,1360,1361,3,168,
        84,0,1361,1362,5,82,0,0,1362,1363,3,176,88,0,1363,1364,5,117,0,0,
        1364,1365,5,83,0,0,1365,1367,1,0,0,0,1366,1353,1,0,0,0,1366,1360,
        1,0,0,0,1367,167,1,0,0,0,1368,1370,3,172,86,0,1369,1371,3,212,106,
        0,1370,1369,1,0,0,0,1370,1371,1,0,0,0,1371,1373,1,0,0,0,1372,1374,
        5,127,0,0,1373,1372,1,0,0,0,1373,1374,1,0,0,0,1374,1376,1,0,0,0,
        1375,1377,3,174,87,0,1376,1375,1,0,0,0,1376,1377,1,0,0,0,1377,1388,
        1,0,0,0,1378,1380,3,172,86,0,1379,1381,3,212,106,0,1380,1379,1,0,
        0,0,1380,1381,1,0,0,0,1381,1382,1,0,0,0,1382,1383,3,10,5,0,1383,
        1385,5,127,0,0,1384,1386,3,174,87,0,1385,1384,1,0,0,0,1385,1386,
        1,0,0,0,1386,1388,1,0,0,0,1387,1368,1,0,0,0,1387,1378,1,0,0,0,1388,
        169,1,0,0,0,1389,1391,3,172,86,0,1390,1392,3,212,106,0,1391,1390,
        1,0,0,0,1391,1392,1,0,0,0,1392,1393,1,0,0,0,1393,1395,5,127,0,0,
        1394,1396,3,174,87,0,1395,1394,1,0,0,0,1395,1396,1,0,0,0,1396,1397,
        1,0,0,0,1397,1398,5,123,0,0,1398,171,1,0,0,0,1399,1405,5,26,0,0,
        1400,1401,5,26,0,0,1401,1405,5,14,0,0,1402,1403,5,26,0,0,1403,1405,
        5,59,0,0,1404,1399,1,0,0,0,1404,1400,1,0,0,0,1404,1402,1,0,0,0,1405,
        173,1,0,0,0,1406,1407,5,121,0,0,1407,1408,3,152,76,0,1408,175,1,
        0,0,0,1409,1410,6,88,-1,0,1410,1411,3,178,89,0,1411,1417,1,0,0,0,
        1412,1413,10,1,0,0,1413,1414,5,117,0,0,1414,1416,3,178,89,0,1415,
        1412,1,0,0,0,1416,1419,1,0,0,0,1417,1415,1,0,0,0,1417,1418,1,0,0,
        0,1418,177,1,0,0,0,1419,1417,1,0,0,0,1420,1426,3,180,90,0,1421,1422,
        3,180,90,0,1422,1423,5,94,0,0,1423,1424,3,94,47,0,1424,1426,1,0,
        0,0,1425,1420,1,0,0,0,1425,1421,1,0,0,0,1426,179,1,0,0,0,1427,1428,
        5,127,0,0,1428,181,1,0,0,0,1429,1432,3,184,92,0,1430,1432,3,198,
        99,0,1431,1429,1,0,0,0,1431,1430,1,0,0,0,1432,183,1,0,0,0,1433,1434,
        5,127,0,0,1434,185,1,0,0,0,1435,1438,3,188,94,0,1436,1438,3,194,
        97,0,1437,1435,1,0,0,0,1437,1436,1,0,0,0,1438,187,1,0,0,0,1439,1442,
        3,190,95,0,1440,1442,3,192,96,0,1441,1439,1,0,0,0,1441,1440,1,0,
        0,0,1442,189,1,0,0,0,1443,1445,5,37,0,0,1444,1443,1,0,0,0,1444,1445,
        1,0,0,0,1445,1446,1,0,0,0,1446,1447,5,41,0,0,1447,1448,5,127,0,0,
        1448,1449,5,82,0,0,1449,1450,3,196,98,0,1450,1451,5,83,0,0,1451,
        191,1,0,0,0,1452,1454,5,37,0,0,1453,1452,1,0,0,0,1453,1454,1,0,0,
        0,1454,1455,1,0,0,0,1455,1456,5,41,0,0,1456,1457,3,184,92,0,1457,
        1458,5,82,0,0,1458,1459,3,196,98,0,1459,1460,5,83,0,0,1460,193,1,
        0,0,0,1461,1463,5,37,0,0,1462,1461,1,0,0,0,1462,1463,1,0,0,0,1463,
        1464,1,0,0,0,1464,1465,5,41,0,0,1465,1466,5,82,0,0,1466,1467,3,196,
        98,0,1467,1468,5,83,0,0,1468,195,1,0,0,0,1469,1471,3,122,61,0,1470,
        1469,1,0,0,0,1470,1471,1,0,0,0,1471,197,1,0,0,0,1472,1473,5,127,
        0,0,1473,199,1,0,0,0,1474,1475,5,41,0,0,1475,1476,5,127,0,0,1476,
        1477,5,94,0,0,1477,1478,3,202,101,0,1478,1479,5,123,0,0,1479,201,
        1,0,0,0,1480,1482,3,10,5,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,1482,
        1483,1,0,0,0,1483,1484,3,182,91,0,1484,203,1,0,0,0,1485,1487,5,72,
        0,0,1486,1488,5,69,0,0,1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,
        1489,1,0,0,0,1489,1490,3,10,5,0,1490,1491,3,6,3,0,1491,1492,5,123,
        0,0,1492,1499,1,0,0,0,1493,1494,5,72,0,0,1494,1495,5,122,0,0,1495,
        1496,3,6,3,0,1496,1497,5,123,0,0,1497,1499,1,0,0,0,1498,1485,1,0,
        0,0,1498,1493,1,0,0,0,1499,205,1,0,0,0,1500,1502,3,212,106,0,1501,
        1500,1,0,0,0,1501,1502,1,0,0,0,1502,1503,1,0,0,0,1503,1504,5,72,
        0,0,1504,1506,5,41,0,0,1505,1507,3,10,5,0,1506,1505,1,0,0,0,1506,
        1507,1,0,0,0,1507,1508,1,0,0,0,1508,1509,3,182,91,0,1509,1510,5,
        123,0,0,1510,207,1,0,0,0,1511,1512,5,5,0,0,1512,1513,5,78,0,0,1513,
        1514,5,136,0,0,1514,1515,5,79,0,0,1515,1516,5,123,0,0,1516,209,1,
        0,0,0,1517,1518,5,29,0,0,1518,1519,5,136,0,0,1519,1521,5,82,0,0,
        1520,1522,3,122,61,0,1521,1520,1,0,0,0,1521,1522,1,0,0,0,1522,1523,
        1,0,0,0,1523,1528,5,83,0,0,1524,1525,5,29,0,0,1525,1526,5,136,0,
        0,1526,1528,3,124,62,0,1527,1517,1,0,0,0,1527,1524,1,0,0,0,1528,
        211,1,0,0,0,1529,1530,6,106,-1,0,1530,1531,3,214,107,0,1531,1536,
        1,0,0,0,1532,1533,10,1,0,0,1533,1535,3,214,107,0,1534,1532,1,0,0,
        0,1535,1538,1,0,0,0,1536,1534,1,0,0,0,1536,1537,1,0,0,0,1537,213,
        1,0,0,0,1538,1536,1,0,0,0,1539,1540,5,80,0,0,1540,1541,5,80,0,0,
        1541,1542,3,218,109,0,1542,1543,5,81,0,0,1543,1544,5,81,0,0,1544,
        1547,1,0,0,0,1545,1547,3,216,108,0,1546,1539,1,0,0,0,1546,1545,1,
        0,0,0,1547,215,1,0,0,0,1548,1549,5,3,0,0,1549,1550,5,78,0,0,1550,
        1552,3,258,129,0,1551,1553,5,126,0,0,1552,1551,1,0,0,0,1552,1553,
        1,0,0,0,1553,1554,1,0,0,0,1554,1555,5,79,0,0,1555,1565,1,0,0,0,1556,
        1557,5,3,0,0,1557,1558,5,78,0,0,1558,1560,3,94,47,0,1559,1561,5,
        126,0,0,1560,1559,1,0,0,0,1560,1561,1,0,0,0,1561,1562,1,0,0,0,1562,
        1563,5,79,0,0,1563,1565,1,0,0,0,1564,1548,1,0,0,0,1564,1556,1,0,
        0,0,1565,217,1,0,0,0,1566,1568,6,109,-1,0,1567,1569,3,220,110,0,
        1568,1567,1,0,0,0,1568,1569,1,0,0,0,1569,1574,1,0,0,0,1570,1571,
        3,220,110,0,1571,1572,5,126,0,0,1572,1574,1,0,0,0,1573,1566,1,0,
        0,0,1573,1570,1,0,0,0,1574,1587,1,0,0,0,1575,1576,10,3,0,0,1576,
        1578,5,117,0,0,1577,1579,3,220,110,0,1578,1577,1,0,0,0,1578,1579,
        1,0,0,0,1579,1586,1,0,0,0,1580,1581,10,1,0,0,1581,1582,5,117,0,0,
        1582,1583,3,220,110,0,1583,1584,5,126,0,0,1584,1586,1,0,0,0,1585,
        1575,1,0,0,0,1585,1580,1,0,0,0,1586,1589,1,0,0,0,1587,1585,1,0,0,
        0,1587,1588,1,0,0,0,1588,219,1,0,0,0,1589,1587,1,0,0,0,1590,1592,
        3,222,111,0,1591,1593,3,228,114,0,1592,1591,1,0,0,0,1592,1593,1,
        0,0,0,1593,221,1,0,0,0,1594,1597,5,127,0,0,1595,1597,3,224,112,0,
        1596,1594,1,0,0,0,1596,1595,1,0,0,0,1597,223,1,0,0,0,1598,1599,3,
        226,113,0,1599,1600,5,122,0,0,1600,1601,5,127,0,0,1601,225,1,0,0,
        0,1602,1603,5,127,0,0,1603,227,1,0,0,0,1604,1605,5,78,0,0,1605,1606,
        3,230,115,0,1606,1607,5,79,0,0,1607,229,1,0,0,0,1608,1610,6,115,
        -1,0,1609,1611,3,232,116,0,1610,1609,1,0,0,0,1610,1611,1,0,0,0,1611,
        1616,1,0,0,0,1612,1613,10,1,0,0,1613,1615,3,232,116,0,1614,1612,
        1,0,0,0,1615,1618,1,0,0,0,1616,1614,1,0,0,0,1616,1617,1,0,0,0,1617,
        231,1,0,0,0,1618,1616,1,0,0,0,1619,1620,5,78,0,0,1620,1621,3,230,
        115,0,1621,1622,5,79,0,0,1622,1632,1,0,0,0,1623,1624,5,80,0,0,1624,
        1625,3,230,115,0,1625,1626,5,81,0,0,1626,1632,1,0,0,0,1627,1628,
        5,82,0,0,1628,1629,3,230,115,0,1629,1630,5,83,0,0,1630,1632,1,0,
        0,0,1631,1619,1,0,0,0,1631,1623,1,0,0,0,1631,1627,1,0,0,0,1632,233,
        1,0,0,0,1633,1634,6,117,-1,0,1634,1635,3,236,118,0,1635,1641,1,0,
        0,0,1636,1637,10,1,0,0,1637,1638,5,117,0,0,1638,1640,3,236,118,0,
        1639,1636,1,0,0,0,1640,1643,1,0,0,0,1641,1639,1,0,0,0,1641,1642,
        1,0,0,0,1642,235,1,0,0,0,1643,1641,1,0,0,0,1644,1646,3,238,119,0,
        1645,1647,3,280,140,0,1646,1645,1,0,0,0,1646,1647,1,0,0,0,1647,237,
        1,0,0,0,1648,1654,3,240,120,0,1649,1650,3,242,121,0,1650,1651,3,
        244,122,0,1651,1652,3,246,123,0,1652,1654,1,0,0,0,1653,1648,1,0,
        0,0,1653,1649,1,0,0,0,1654,239,1,0,0,0,1655,1660,3,242,121,0,1656,
        1657,3,248,124,0,1657,1658,3,240,120,0,1658,1660,1,0,0,0,1659,1655,
        1,0,0,0,1659,1656,1,0,0,0,1660,241,1,0,0,0,1661,1662,6,121,-1,0,
        1662,1664,3,256,128,0,1663,1665,3,212,106,0,1664,1663,1,0,0,0,1664,
        1665,1,0,0,0,1665,1671,1,0,0,0,1666,1667,5,78,0,0,1667,1668,3,240,
        120,0,1668,1669,5,79,0,0,1669,1671,1,0,0,0,1670,1661,1,0,0,0,1670,
        1666,1,0,0,0,1671,1685,1,0,0,0,1672,1673,10,3,0,0,1673,1684,3,244,
        122,0,1674,1675,10,2,0,0,1675,1677,5,80,0,0,1676,1678,3,94,47,0,
        1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,1679,1,0,0,0,1679,1681,
        5,81,0,0,1680,1682,3,212,106,0,1681,1680,1,0,0,0,1681,1682,1,0,0,
        0,1682,1684,1,0,0,0,1683,1672,1,0,0,0,1683,1674,1,0,0,0,1684,1687,
        1,0,0,0,1685,1683,1,0,0,0,1685,1686,1,0,0,0,1686,243,1,0,0,0,1687,
        1685,1,0,0,0,1688,1689,5,78,0,0,1689,1690,3,270,135,0,1690,1692,
        5,79,0,0,1691,1693,3,250,125,0,1692,1691,1,0,0,0,1692,1693,1,0,0,
        0,1693,1695,1,0,0,0,1694,1696,3,254,127,0,1695,1694,1,0,0,0,1695,
        1696,1,0,0,0,1696,1698,1,0,0,0,1697,1699,3,382,191,0,1698,1697,1,
        0,0,0,1698,1699,1,0,0,0,1699,1701,1,0,0,0,1700,1702,3,212,106,0,
        1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,245,1,0,0,0,1703,1704,5,
        119,0,0,1704,1706,3,154,77,0,1705,1707,3,260,130,0,1706,1705,1,0,
        0,0,1706,1707,1,0,0,0,1707,247,1,0,0,0,1708,1710,5,86,0,0,1709,1711,
        3,212,106,0,1710,1709,1,0,0,0,1710,1711,1,0,0,0,1711,1713,1,0,0,
        0,1712,1714,3,250,125,0,1713,1712,1,0,0,0,1713,1714,1,0,0,0,1714,
        1732,1,0,0,0,1715,1717,5,90,0,0,1716,1718,3,212,106,0,1717,1716,
        1,0,0,0,1717,1718,1,0,0,0,1718,1732,1,0,0,0,1719,1721,5,113,0,0,
        1720,1722,3,212,106,0,1721,1720,1,0,0,0,1721,1722,1,0,0,0,1722,1732,
        1,0,0,0,1723,1724,3,10,5,0,1724,1726,5,86,0,0,1725,1727,3,212,106,
        0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1729,1,0,0,0,1728,1730,
        3,250,125,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1732,1,0,0,
        0,1731,1708,1,0,0,0,1731,1715,1,0,0,0,1731,1719,1,0,0,0,1731,1723,
        1,0,0,0,1732,249,1,0,0,0,1733,1735,3,252,126,0,1734,1736,3,250,125,
        0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,251,1,0,0,0,1737,1738,
        7,6,0,0,1738,253,1,0,0,0,1739,1740,7,7,0,0,1740,255,1,0,0,0,1741,
        1743,5,126,0,0,1742,1741,1,0,0,0,1742,1743,1,0,0,0,1743,1744,1,0,
        0,0,1744,1745,3,4,2,0,1745,257,1,0,0,0,1746,1748,3,152,76,0,1747,
        1749,3,260,130,0,1748,1747,1,0,0,0,1748,1749,1,0,0,0,1749,259,1,
        0,0,0,1750,1759,3,262,131,0,1751,1753,3,264,132,0,1752,1751,1,0,
        0,0,1752,1753,1,0,0,0,1753,1754,1,0,0,0,1754,1755,3,244,122,0,1755,
        1756,3,246,123,0,1756,1759,1,0,0,0,1757,1759,3,266,133,0,1758,1750,
        1,0,0,0,1758,1752,1,0,0,0,1758,1757,1,0,0,0,1759,261,1,0,0,0,1760,
        1766,3,264,132,0,1761,1763,3,248,124,0,1762,1764,3,262,131,0,1763,
        1762,1,0,0,0,1763,1764,1,0,0,0,1764,1766,1,0,0,0,1765,1760,1,0,0,
        0,1765,1761,1,0,0,0,1766,263,1,0,0,0,1767,1768,6,132,-1,0,1768,1782,
        3,244,122,0,1769,1771,5,80,0,0,1770,1772,3,94,47,0,1771,1770,1,0,
        0,0,1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,1775,5,81,0,0,1774,
        1776,3,212,106,0,1775,1774,1,0,0,0,1775,1776,1,0,0,0,1776,1782,1,
        0,0,0,1777,1778,5,78,0,0,1778,1779,3,262,131,0,1779,1780,5,79,0,
        0,1780,1782,1,0,0,0,1781,1767,1,0,0,0,1781,1769,1,0,0,0,1781,1777,
        1,0,0,0,1782,1796,1,0,0,0,1783,1784,10,5,0,0,1784,1795,3,244,122,
        0,1785,1786,10,3,0,0,1786,1788,5,80,0,0,1787,1789,3,94,47,0,1788,
        1787,1,0,0,0,1788,1789,1,0,0,0,1789,1790,1,0,0,0,1790,1792,5,81,
        0,0,1791,1793,3,212,106,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,
        1795,1,0,0,0,1794,1783,1,0,0,0,1794,1785,1,0,0,0,1795,1798,1,0,0,
        0,1796,1794,1,0,0,0,1796,1797,1,0,0,0,1797,265,1,0,0,0,1798,1796,
        1,0,0,0,1799,1804,3,268,134,0,1800,1801,3,248,124,0,1801,1802,3,
        266,133,0,1802,1804,1,0,0,0,1803,1799,1,0,0,0,1803,1800,1,0,0,0,
        1804,267,1,0,0,0,1805,1806,6,134,-1,0,1806,1807,5,126,0,0,1807,1821,
        1,0,0,0,1808,1809,10,3,0,0,1809,1820,3,244,122,0,1810,1811,10,2,
        0,0,1811,1813,5,80,0,0,1812,1814,3,94,47,0,1813,1812,1,0,0,0,1813,
        1814,1,0,0,0,1814,1815,1,0,0,0,1815,1817,5,81,0,0,1816,1818,3,212,
        106,0,1817,1816,1,0,0,0,1817,1818,1,0,0,0,1818,1820,1,0,0,0,1819,
        1808,1,0,0,0,1819,1810,1,0,0,0,1820,1823,1,0,0,0,1821,1819,1,0,0,
        0,1821,1822,1,0,0,0,1822,269,1,0,0,0,1823,1821,1,0,0,0,1824,1826,
        3,272,136,0,1825,1824,1,0,0,0,1825,1826,1,0,0,0,1826,1828,1,0,0,
        0,1827,1829,5,126,0,0,1828,1827,1,0,0,0,1828,1829,1,0,0,0,1829,1835,
        1,0,0,0,1830,1831,3,272,136,0,1831,1832,5,117,0,0,1832,1833,5,126,
        0,0,1833,1835,1,0,0,0,1834,1825,1,0,0,0,1834,1830,1,0,0,0,1835,271,
        1,0,0,0,1836,1837,6,136,-1,0,1837,1838,3,274,137,0,1838,1844,1,0,
        0,0,1839,1840,10,1,0,0,1840,1841,5,117,0,0,1841,1843,3,274,137,0,
        1842,1839,1,0,0,0,1843,1846,1,0,0,0,1844,1842,1,0,0,0,1844,1845,
        1,0,0,0,1845,273,1,0,0,0,1846,1844,1,0,0,0,1847,1849,3,212,106,0,
        1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1850,1,0,0,0,1850,1851,
        3,140,70,0,1851,1852,3,238,119,0,1852,1879,1,0,0,0,1853,1855,3,212,
        106,0,1854,1853,1,0,0,0,1854,1855,1,0,0,0,1855,1856,1,0,0,0,1856,
        1857,3,140,70,0,1857,1858,3,238,119,0,1858,1859,5,94,0,0,1859,1860,
        3,284,142,0,1860,1879,1,0,0,0,1861,1863,3,212,106,0,1862,1861,1,
        0,0,0,1862,1863,1,0,0,0,1863,1864,1,0,0,0,1864,1866,3,140,70,0,1865,
        1867,3,260,130,0,1866,1865,1,0,0,0,1866,1867,1,0,0,0,1867,1879,1,
        0,0,0,1868,1870,3,212,106,0,1869,1868,1,0,0,0,1869,1870,1,0,0,0,
        1870,1871,1,0,0,0,1871,1873,3,140,70,0,1872,1874,3,260,130,0,1873,
        1872,1,0,0,0,1873,1874,1,0,0,0,1874,1875,1,0,0,0,1875,1876,5,94,
        0,0,1876,1877,3,284,142,0,1877,1879,1,0,0,0,1878,1848,1,0,0,0,1878,
        1854,1,0,0,0,1878,1862,1,0,0,0,1878,1869,1,0,0,0,1879,275,1,0,0,
        0,1880,1882,3,212,106,0,1881,1880,1,0,0,0,1881,1882,1,0,0,0,1882,
        1884,1,0,0,0,1883,1885,3,140,70,0,1884,1883,1,0,0,0,1884,1885,1,
        0,0,0,1885,1886,1,0,0,0,1886,1888,3,238,119,0,1887,1889,3,310,155,
        0,1888,1887,1,0,0,0,1888,1889,1,0,0,0,1889,1890,1,0,0,0,1890,1891,
        3,278,139,0,1891,277,1,0,0,0,1892,1894,3,334,167,0,1893,1892,1,0,
        0,0,1893,1894,1,0,0,0,1894,1895,1,0,0,0,1895,1904,3,102,51,0,1896,
        1904,3,372,186,0,1897,1898,5,94,0,0,1898,1899,5,20,0,0,1899,1904,
        5,123,0,0,1900,1901,5,94,0,0,1901,1902,5,21,0,0,1902,1904,5,123,
        0,0,1903,1893,1,0,0,0,1903,1896,1,0,0,0,1903,1897,1,0,0,0,1903,1900,
        1,0,0,0,1904,279,1,0,0,0,1905,1911,3,282,141,0,1906,1907,5,78,0,
        0,1907,1908,3,36,18,0,1908,1909,5,79,0,0,1909,1911,1,0,0,0,1910,
        1905,1,0,0,0,1910,1906,1,0,0,0,1911,281,1,0,0,0,1912,1913,5,94,0,
        0,1913,1916,3,284,142,0,1914,1916,3,288,144,0,1915,1912,1,0,0,0,
        1915,1914,1,0,0,0,1916,283,1,0,0,0,1917,1920,3,88,44,0,1918,1920,
        3,288,144,0,1919,1917,1,0,0,0,1919,1918,1,0,0,0,1920,285,1,0,0,0,
        1921,1922,6,143,-1,0,1922,1924,3,284,142,0,1923,1925,5,126,0,0,1924,
        1923,1,0,0,0,1924,1925,1,0,0,0,1925,1934,1,0,0,0,1926,1927,10,1,
        0,0,1927,1928,5,117,0,0,1928,1930,3,284,142,0,1929,1931,5,126,0,
        0,1930,1929,1,0,0,0,1930,1931,1,0,0,0,1931,1933,1,0,0,0,1932,1926,
        1,0,0,0,1933,1936,1,0,0,0,1934,1932,1,0,0,0,1934,1935,1,0,0,0,1935,
        287,1,0,0,0,1936,1934,1,0,0,0,1937,1938,5,82,0,0,1938,1940,3,286,
        143,0,1939,1941,5,117,0,0,1940,1939,1,0,0,0,1940,1941,1,0,0,0,1941,
        1942,1,0,0,0,1942,1943,5,83,0,0,1943,1947,1,0,0,0,1944,1945,5,82,
        0,0,1945,1947,5,83,0,0,1946,1937,1,0,0,0,1946,1944,1,0,0,0,1947,
        289,1,0,0,0,1948,1951,5,127,0,0,1949,1951,3,354,177,0,1950,1948,
        1,0,0,0,1950,1949,1,0,0,0,1951,291,1,0,0,0,1952,1953,3,294,147,0,
        1953,1955,5,82,0,0,1954,1956,3,302,151,0,1955,1954,1,0,0,0,1955,
        1956,1,0,0,0,1956,1957,1,0,0,0,1957,1958,5,83,0,0,1958,293,1,0,0,
        0,1959,1961,3,300,150,0,1960,1962,3,212,106,0,1961,1960,1,0,0,0,
        1961,1962,1,0,0,0,1962,1963,1,0,0,0,1963,1965,3,296,148,0,1964,1966,
        3,298,149,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,1968,1,0,0,
        0,1967,1969,3,316,158,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,1969,
        1978,1,0,0,0,1970,1972,3,300,150,0,1971,1973,3,212,106,0,1972,1971,
        1,0,0,0,1972,1973,1,0,0,0,1973,1975,1,0,0,0,1974,1976,3,316,158,
        0,1975,1974,1,0,0,0,1975,1976,1,0,0,0,1976,1978,1,0,0,0,1977,1959,
        1,0,0,0,1977,1970,1,0,0,0,1978,295,1,0,0,0,1979,1981,3,10,5,0,1980,
        1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,0,0,1982,1983,3,290,
        145,0,1983,297,1,0,0,0,1984,1985,5,31,0,0,1985,299,1,0,0,0,1986,
        1987,7,8,0,0,1987,301,1,0,0,0,1988,1990,3,304,152,0,1989,1991,3,
        302,151,0,1990,1989,1,0,0,0,1990,1991,1,0,0,0,1991,1998,1,0,0,0,
        1992,1993,3,326,163,0,1993,1995,5,121,0,0,1994,1996,3,302,151,0,
        1995,1994,1,0,0,0,1995,1996,1,0,0,0,1996,1998,1,0,0,0,1997,1988,
        1,0,0,0,1997,1992,1,0,0,0,1998,303,1,0,0,0,1999,2001,3,212,106,0,
        2000,1999,1,0,0,0,2000,2001,1,0,0,0,2001,2003,1,0,0,0,2002,2004,
        3,140,70,0,2003,2002,1,0,0,0,2003,2004,1,0,0,0,2004,2006,1,0,0,0,
        2005,2007,3,306,153,0,2006,2005,1,0,0,0,2006,2007,1,0,0,0,2007,2008,
        1,0,0,0,2008,2016,5,123,0,0,2009,2016,3,276,138,0,2010,2016,3,204,
        102,0,2011,2016,3,132,66,0,2012,2016,3,346,173,0,2013,2016,3,128,
        64,0,2014,2016,3,134,67,0,2015,2000,1,0,0,0,2015,2009,1,0,0,0,2015,
        2010,1,0,0,0,2015,2011,1,0,0,0,2015,2012,1,0,0,0,2015,2013,1,0,0,
        0,2015,2014,1,0,0,0,2016,305,1,0,0,0,2017,2018,6,153,-1,0,2018,2019,
        3,308,154,0,2019,2025,1,0,0,0,2020,2021,10,1,0,0,2021,2022,5,117,
        0,0,2022,2024,3,308,154,0,2023,2020,1,0,0,0,2024,2027,1,0,0,0,2025,
        2023,1,0,0,0,2025,2026,1,0,0,0,2026,307,1,0,0,0,2027,2025,1,0,0,
        0,2028,2030,3,238,119,0,2029,2031,3,310,155,0,2030,2029,1,0,0,0,
        2030,2031,1,0,0,0,2031,2033,1,0,0,0,2032,2034,3,314,157,0,2033,2032,
        1,0,0,0,2033,2034,1,0,0,0,2034,2048,1,0,0,0,2035,2037,3,238,119,
        0,2036,2038,3,282,141,0,2037,2036,1,0,0,0,2037,2038,1,0,0,0,2038,
        2048,1,0,0,0,2039,2041,5,127,0,0,2040,2039,1,0,0,0,2040,2041,1,0,
        0,0,2041,2043,1,0,0,0,2042,2044,3,212,106,0,2043,2042,1,0,0,0,2043,
        2044,1,0,0,0,2044,2045,1,0,0,0,2045,2046,5,121,0,0,2046,2048,3,94,
        47,0,2047,2028,1,0,0,0,2047,2035,1,0,0,0,2047,2040,1,0,0,0,2048,
        309,1,0,0,0,2049,2050,6,155,-1,0,2050,2051,3,312,156,0,2051,2056,
        1,0,0,0,2052,2053,10,1,0,0,2053,2055,3,312,156,0,2054,2052,1,0,0,
        0,2055,2058,1,0,0,0,2056,2054,1,0,0,0,2056,2057,1,0,0,0,2057,311,
        1,0,0,0,2058,2056,1,0,0,0,2059,2060,7,9,0,0,2060,313,1,0,0,0,2061,
        2062,5,94,0,0,2062,2063,5,130,0,0,2063,2064,6,157,-1,0,2064,315,
        1,0,0,0,2065,2066,5,121,0,0,2066,2067,3,318,159,0,2067,317,1,0,0,
        0,2068,2069,6,159,-1,0,2069,2071,3,320,160,0,2070,2072,5,126,0,0,
        2071,2070,1,0,0,0,2071,2072,1,0,0,0,2072,2081,1,0,0,0,2073,2074,
        10,1,0,0,2074,2075,5,117,0,0,2075,2077,3,320,160,0,2076,2078,5,126,
        0,0,2077,2076,1,0,0,0,2077,2078,1,0,0,0,2078,2080,1,0,0,0,2079,2073,
        1,0,0,0,2080,2083,1,0,0,0,2081,2079,1,0,0,0,2081,2082,1,0,0,0,2082,
        319,1,0,0,0,2083,2081,1,0,0,0,2084,2086,3,212,106,0,2085,2084,1,
        0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,0,0,2087,2106,3,324,162,0,
        2088,2090,3,212,106,0,2089,2088,1,0,0,0,2089,2090,1,0,0,0,2090,2091,
        1,0,0,0,2091,2093,5,73,0,0,2092,2094,3,326,163,0,2093,2092,1,0,0,
        0,2093,2094,1,0,0,0,2094,2095,1,0,0,0,2095,2106,3,324,162,0,2096,
        2098,3,212,106,0,2097,2096,1,0,0,0,2097,2098,1,0,0,0,2098,2099,1,
        0,0,0,2099,2101,3,326,163,0,2100,2102,5,73,0,0,2101,2100,1,0,0,0,
        2101,2102,1,0,0,0,2102,2103,1,0,0,0,2103,2104,3,324,162,0,2104,2106,
        1,0,0,0,2105,2085,1,0,0,0,2105,2089,1,0,0,0,2105,2097,1,0,0,0,2106,
        321,1,0,0,0,2107,2109,3,10,5,0,2108,2107,1,0,0,0,2108,2109,1,0,0,
        0,2109,2110,1,0,0,0,2110,2113,3,290,145,0,2111,2113,3,160,80,0,2112,
        2108,1,0,0,0,2112,2111,1,0,0,0,2113,323,1,0,0,0,2114,2115,3,322,
        161,0,2115,325,1,0,0,0,2116,2117,7,10,0,0,2117,327,1,0,0,0,2118,
        2119,5,45,0,0,2119,2120,3,330,165,0,2120,329,1,0,0,0,2121,2123,3,
        152,76,0,2122,2124,3,332,166,0,2123,2122,1,0,0,0,2123,2124,1,0,0,
        0,2124,331,1,0,0,0,2125,2127,3,248,124,0,2126,2128,3,332,166,0,2127,
        2126,1,0,0,0,2127,2128,1,0,0,0,2128,333,1,0,0,0,2129,2130,5,121,
        0,0,2130,2131,3,336,168,0,2131,335,1,0,0,0,2132,2134,3,338,169,0,
        2133,2135,5,126,0,0,2134,2133,1,0,0,0,2134,2135,1,0,0,0,2135,2144,
        1,0,0,0,2136,2138,3,338,169,0,2137,2139,5,126,0,0,2138,2137,1,0,
        0,0,2138,2139,1,0,0,0,2139,2140,1,0,0,0,2140,2141,5,117,0,0,2141,
        2142,3,336,168,0,2142,2144,1,0,0,0,2143,2132,1,0,0,0,2143,2136,1,
        0,0,0,2144,337,1,0,0,0,2145,2146,3,340,170,0,2146,2148,5,78,0,0,
        2147,2149,3,36,18,0,2148,2147,1,0,0,0,2148,2149,1,0,0,0,2149,2150,
        1,0,0,0,2150,2151,5,79,0,0,2151,2156,1,0,0,0,2152,2153,3,340,170,
        0,2153,2154,3,288,144,0,2154,2156,1,0,0,0,2155,2145,1,0,0,0,2155,
        2152,1,0,0,0,2156,339,1,0,0,0,2157,2160,3,322,161,0,2158,2160,5,
        127,0,0,2159,2157,1,0,0,0,2159,2158,1,0,0,0,2160,341,1,0,0,0,2161,
        2162,5,45,0,0,2162,2163,3,390,195,0,2163,343,1,0,0,0,2164,2165,5,
        45,0,0,2165,2166,5,136,0,0,2166,2170,5,127,0,0,2167,2168,5,45,0,
        0,2168,2170,5,139,0,0,2169,2164,1,0,0,0,2169,2167,1,0,0,0,2170,345,
        1,0,0,0,2171,2172,5,61,0,0,2172,2173,5,95,0,0,2173,2174,3,348,174,
        0,2174,2175,5,96,0,0,2175,2176,3,124,62,0,2176,347,1,0,0,0,2177,
        2178,6,174,-1,0,2178,2179,3,350,175,0,2179,2185,1,0,0,0,2180,2181,
        10,1,0,0,2181,2182,5,117,0,0,2182,2184,3,350,175,0,2183,2180,1,0,
        0,0,2184,2187,1,0,0,0,2185,2183,1,0,0,0,2185,2186,1,0,0,0,2186,349,
        1,0,0,0,2187,2185,1,0,0,0,2188,2191,3,352,176,0,2189,2191,3,274,
        137,0,2190,2188,1,0,0,0,2190,2189,1,0,0,0,2191,351,1,0,0,0,2192,
        2194,5,14,0,0,2193,2195,5,126,0,0,2194,2193,1,0,0,0,2194,2195,1,
        0,0,0,2195,2197,1,0,0,0,2196,2198,5,127,0,0,2197,2196,1,0,0,0,2197,
        2198,1,0,0,0,2198,2241,1,0,0,0,2199,2201,5,14,0,0,2200,2202,5,127,
        0,0,2201,2200,1,0,0,0,2201,2202,1,0,0,0,2202,2203,1,0,0,0,2203,2204,
        5,94,0,0,2204,2241,3,258,129,0,2205,2207,5,69,0,0,2206,2208,5,126,
        0,0,2207,2206,1,0,0,0,2207,2208,1,0,0,0,2208,2210,1,0,0,0,2209,2211,
        5,127,0,0,2210,2209,1,0,0,0,2210,2211,1,0,0,0,2211,2241,1,0,0,0,
        2212,2214,5,69,0,0,2213,2215,5,127,0,0,2214,2213,1,0,0,0,2214,2215,
        1,0,0,0,2215,2216,1,0,0,0,2216,2217,5,94,0,0,2217,2241,3,258,129,
        0,2218,2219,5,61,0,0,2219,2220,5,95,0,0,2220,2221,3,348,174,0,2221,
        2222,5,96,0,0,2222,2224,5,14,0,0,2223,2225,5,126,0,0,2224,2223,1,
        0,0,0,2224,2225,1,0,0,0,2225,2227,1,0,0,0,2226,2228,5,127,0,0,2227,
        2226,1,0,0,0,2227,2228,1,0,0,0,2228,2241,1,0,0,0,2229,2230,5,61,
        0,0,2230,2231,5,95,0,0,2231,2232,3,348,174,0,2232,2233,5,96,0,0,
        2233,2235,5,14,0,0,2234,2236,5,127,0,0,2235,2234,1,0,0,0,2235,2236,
        1,0,0,0,2236,2237,1,0,0,0,2237,2238,5,94,0,0,2238,2239,3,4,2,0,2239,
        2241,1,0,0,0,2240,2192,1,0,0,0,2240,2199,1,0,0,0,2240,2205,1,0,0,
        0,2240,2212,1,0,0,0,2240,2218,1,0,0,0,2240,2229,1,0,0,0,2241,353,
        1,0,0,0,2242,2243,3,358,179,0,2243,2245,5,95,0,0,2244,2246,3,360,
        180,0,2245,2244,1,0,0,0,2245,2246,1,0,0,0,2246,2247,1,0,0,0,2247,
        2248,5,96,0,0,2248,355,1,0,0,0,2249,2265,3,354,177,0,2250,2251,3,
        342,171,0,2251,2253,5,95,0,0,2252,2254,3,360,180,0,2253,2252,1,0,
        0,0,2253,2254,1,0,0,0,2254,2255,1,0,0,0,2255,2256,5,96,0,0,2256,
        2265,1,0,0,0,2257,2258,3,344,172,0,2258,2260,5,95,0,0,2259,2261,
        3,360,180,0,2260,2259,1,0,0,0,2260,2261,1,0,0,0,2261,2262,1,0,0,
        0,2262,2263,5,96,0,0,2263,2265,1,0,0,0,2264,2249,1,0,0,0,2264,2250,
        1,0,0,0,2264,2257,1,0,0,0,2265,357,1,0,0,0,2266,2267,5,127,0,0,2267,
        359,1,0,0,0,2268,2269,6,180,-1,0,2269,2271,3,362,181,0,2270,2272,
        5,126,0,0,2271,2270,1,0,0,0,2271,2272,1,0,0,0,2272,2281,1,0,0,0,
        2273,2274,10,1,0,0,2274,2275,5,117,0,0,2275,2277,3,362,181,0,2276,
        2278,5,126,0,0,2277,2276,1,0,0,0,2277,2278,1,0,0,0,2278,2280,1,0,
        0,0,2279,2273,1,0,0,0,2280,2283,1,0,0,0,2281,2279,1,0,0,0,2281,2282,
        1,0,0,0,2282,361,1,0,0,0,2283,2281,1,0,0,0,2284,2288,3,258,129,0,
        2285,2288,3,94,47,0,2286,2288,3,4,2,0,2287,2284,1,0,0,0,2287,2285,
        1,0,0,0,2287,2286,1,0,0,0,2288,363,1,0,0,0,2289,2290,5,69,0,0,2290,
        2291,3,10,5,0,2291,2292,5,127,0,0,2292,2301,1,0,0,0,2293,2294,5,
        69,0,0,2294,2296,3,10,5,0,2295,2297,5,61,0,0,2296,2295,1,0,0,0,2296,
        2297,1,0,0,0,2297,2298,1,0,0,0,2298,2299,3,354,177,0,2299,2301,1,
        0,0,0,2300,2289,1,0,0,0,2300,2293,1,0,0,0,2301,365,1,0,0,0,2302,
        2304,5,29,0,0,2303,2302,1,0,0,0,2303,2304,1,0,0,0,2304,2305,1,0,
        0,0,2305,2306,5,61,0,0,2306,2307,3,124,62,0,2307,367,1,0,0,0,2308,
        2309,5,61,0,0,2309,2310,5,95,0,0,2310,2311,5,96,0,0,2311,2312,3,
        124,62,0,2312,369,1,0,0,0,2313,2314,5,66,0,0,2314,2315,3,102,51,
        0,2315,2316,3,374,187,0,2316,371,1,0,0,0,2317,2319,5,66,0,0,2318,
        2320,3,334,167,0,2319,2318,1,0,0,0,2319,2320,1,0,0,0,2320,2321,1,
        0,0,0,2321,2322,3,102,51,0,2322,2323,3,374,187,0,2323,373,1,0,0,
        0,2324,2326,3,376,188,0,2325,2327,3,374,187,0,2326,2325,1,0,0,0,
        2326,2327,1,0,0,0,2327,375,1,0,0,0,2328,2329,5,10,0,0,2329,2330,
        5,78,0,0,2330,2331,3,378,189,0,2331,2332,5,79,0,0,2332,2333,3,102,
        51,0,2333,377,1,0,0,0,2334,2336,3,212,106,0,2335,2334,1,0,0,0,2335,
        2336,1,0,0,0,2336,2337,1,0,0,0,2337,2338,3,152,76,0,2338,2339,3,
        238,119,0,2339,2349,1,0,0,0,2340,2342,3,212,106,0,2341,2340,1,0,
        0,0,2341,2342,1,0,0,0,2342,2343,1,0,0,0,2343,2345,3,152,76,0,2344,
        2346,3,260,130,0,2345,2344,1,0,0,0,2345,2346,1,0,0,0,2346,2349,1,
        0,0,0,2347,2349,5,126,0,0,2348,2335,1,0,0,0,2348,2341,1,0,0,0,2348,
        2347,1,0,0,0,2349,379,1,0,0,0,2350,2352,5,64,0,0,2351,2353,3,88,
        44,0,2352,2351,1,0,0,0,2352,2353,1,0,0,0,2353,381,1,0,0,0,2354,2357,
        3,384,192,0,2355,2357,3,388,194,0,2356,2354,1,0,0,0,2356,2355,1,
        0,0,0,2357,383,1,0,0,0,2358,2359,5,64,0,0,2359,2361,5,78,0,0,2360,
        2362,3,386,193,0,2361,2360,1,0,0,0,2361,2362,1,0,0,0,2362,2363,1,
        0,0,0,2363,2364,5,79,0,0,2364,385,1,0,0,0,2365,2366,6,193,-1,0,2366,
        2368,3,258,129,0,2367,2369,5,126,0,0,2368,2367,1,0,0,0,2368,2369,
        1,0,0,0,2369,2378,1,0,0,0,2370,2371,10,1,0,0,2371,2372,5,117,0,0,
        2372,2374,3,258,129,0,2373,2375,5,126,0,0,2374,2373,1,0,0,0,2374,
        2375,1,0,0,0,2375,2377,1,0,0,0,2376,2370,1,0,0,0,2377,2380,1,0,0,
        0,2378,2376,1,0,0,0,2378,2379,1,0,0,0,2379,387,1,0,0,0,2380,2378,
        1,0,0,0,2381,2382,5,43,0,0,2382,2383,5,78,0,0,2383,2384,3,94,47,
        0,2384,2385,5,79,0,0,2385,2388,1,0,0,0,2386,2388,5,43,0,0,2387,2381,
        1,0,0,0,2387,2386,1,0,0,0,2388,389,1,0,0,0,2389,2438,5,42,0,0,2390,
        2438,5,21,0,0,2391,2392,5,42,0,0,2392,2393,5,80,0,0,2393,2438,5,
        81,0,0,2394,2395,5,21,0,0,2395,2396,5,80,0,0,2396,2438,5,81,0,0,
        2397,2438,5,84,0,0,2398,2438,5,85,0,0,2399,2438,5,86,0,0,2400,2438,
        5,87,0,0,2401,2438,5,88,0,0,2402,2438,5,89,0,0,2403,2438,5,90,0,
        0,2404,2438,5,91,0,0,2405,2438,5,92,0,0,2406,2438,5,93,0,0,2407,
        2438,5,94,0,0,2408,2438,5,95,0,0,2409,2438,5,96,0,0,2410,2438,5,
        97,0,0,2411,2438,5,98,0,0,2412,2438,5,99,0,0,2413,2438,5,100,0,0,
        2414,2438,5,101,0,0,2415,2438,5,102,0,0,2416,2438,5,103,0,0,2417,
        2438,5,104,0,0,2418,2438,5,105,0,0,2419,2438,5,106,0,0,2420,2438,
        5,108,0,0,2421,2438,5,107,0,0,2422,2438,5,109,0,0,2423,2438,5,110,
        0,0,2424,2438,5,111,0,0,2425,2438,5,112,0,0,2426,2438,5,113,0,0,
        2427,2438,5,114,0,0,2428,2438,5,115,0,0,2429,2438,5,116,0,0,2430,
        2438,5,117,0,0,2431,2438,5,118,0,0,2432,2438,5,119,0,0,2433,2434,
        5,78,0,0,2434,2438,5,79,0,0,2435,2436,5,80,0,0,2436,2438,5,81,0,
        0,2437,2389,1,0,0,0,2437,2390,1,0,0,0,2437,2391,1,0,0,0,2437,2394,
        1,0,0,0,2437,2397,1,0,0,0,2437,2398,1,0,0,0,2437,2399,1,0,0,0,2437,
        2400,1,0,0,0,2437,2401,1,0,0,0,2437,2402,1,0,0,0,2437,2403,1,0,0,
        0,2437,2404,1,0,0,0,2437,2405,1,0,0,0,2437,2406,1,0,0,0,2437,2407,
        1,0,0,0,2437,2408,1,0,0,0,2437,2409,1,0,0,0,2437,2410,1,0,0,0,2437,
        2411,1,0,0,0,2437,2412,1,0,0,0,2437,2413,1,0,0,0,2437,2414,1,0,0,
        0,2437,2415,1,0,0,0,2437,2416,1,0,0,0,2437,2417,1,0,0,0,2437,2418,
        1,0,0,0,2437,2419,1,0,0,0,2437,2420,1,0,0,0,2437,2421,1,0,0,0,2437,
        2422,1,0,0,0,2437,2423,1,0,0,0,2437,2424,1,0,0,0,2437,2425,1,0,0,
        0,2437,2426,1,0,0,0,2437,2427,1,0,0,0,2437,2428,1,0,0,0,2437,2429,
        1,0,0,0,2437,2430,1,0,0,0,2437,2431,1,0,0,0,2437,2432,1,0,0,0,2437,
        2433,1,0,0,0,2437,2435,1,0,0,0,2438,391,1,0,0,0,2439,2451,5,128,
        0,0,2440,2451,5,134,0,0,2441,2451,5,135,0,0,2442,2444,5,136,0,0,
        2443,2442,1,0,0,0,2444,2445,1,0,0,0,2445,2443,1,0,0,0,2445,2446,
        1,0,0,0,2446,2451,1,0,0,0,2447,2451,3,394,197,0,2448,2451,3,396,
        198,0,2449,2451,3,398,199,0,2450,2439,1,0,0,0,2450,2440,1,0,0,0,
        2450,2441,1,0,0,0,2450,2443,1,0,0,0,2450,2447,1,0,0,0,2450,2448,
        1,0,0,0,2450,2449,1,0,0,0,2451,393,1,0,0,0,2452,2453,7,11,0,0,2453,
        395,1,0,0,0,2454,2455,5,44,0,0,2455,397,1,0,0,0,2456,2457,7,12,0,
        0,2457,399,1,0,0,0,314,401,413,417,428,432,447,454,459,461,466,472,
        482,489,495,499,504,510,517,523,526,529,532,539,546,598,613,619,
        625,638,640,650,665,671,701,706,710,714,717,721,727,729,737,741,
        744,751,758,762,767,771,774,779,785,798,809,811,826,828,840,842,
        854,874,876,888,890,901,912,923,934,945,955,963,975,982,986,990,
        994,998,1003,1006,1009,1015,1023,1028,1031,1037,1048,1071,1075,1083,
        1089,1109,1113,1126,1130,1133,1140,1148,1158,1169,1181,1191,1196,
        1203,1206,1211,1216,1237,1241,1246,1257,1263,1267,1272,1276,1281,
        1284,1306,1312,1323,1327,1330,1340,1346,1349,1356,1366,1370,1373,
        1376,1380,1385,1387,1391,1395,1404,1417,1425,1431,1437,1441,1444,
        1453,1462,1470,1481,1487,1498,1501,1506,1521,1527,1536,1546,1552,
        1560,1564,1568,1573,1578,1585,1587,1592,1596,1610,1616,1631,1641,
        1646,1653,1659,1664,1670,1677,1681,1683,1685,1692,1695,1698,1701,
        1706,1710,1713,1717,1721,1726,1729,1731,1735,1742,1748,1752,1758,
        1763,1765,1771,1775,1781,1788,1792,1794,1796,1803,1813,1817,1819,
        1821,1825,1828,1834,1844,1848,1854,1862,1866,1869,1873,1878,1881,
        1884,1888,1893,1903,1910,1915,1919,1924,1930,1934,1940,1946,1950,
        1955,1961,1965,1968,1972,1975,1977,1980,1990,1995,1997,2000,2003,
        2006,2015,2025,2030,2033,2037,2040,2043,2047,2056,2071,2077,2081,
        2085,2089,2093,2097,2101,2105,2108,2112,2123,2127,2134,2138,2143,
        2148,2155,2159,2169,2185,2190,2194,2197,2201,2207,2210,2214,2224,
        2227,2235,2240,2245,2253,2260,2264,2271,2277,2281,2287,2296,2300,
        2303,2319,2326,2335,2341,2345,2348,2352,2356,2361,2368,2374,2378,
        2387,2437,2445,2450
    ]

class grCpp2Parser ( Parser ):

    grammarFileName = "grCpp2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "'alignas'", 
                     "'alignof'", "'asm'", "'auto'", "'bool'", "'break'", 
                     "'case'", "'catch'", "'char'", "'char16_t'", "'char32_t'", 
                     "'class'", "'const'", "'constexpr'", "'const_cast'", 
                     "'continue'", "'decltype'", "'default'", "'delete'", 
                     "'do'", "'double'", "'dynamic_cast'", "'else'", "'enum'", 
                     "'explicit'", "'export'", "'extern'", "'false'", "'final'", 
                     "'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'", 
                     "'int'", "'long'", "'mutable'", "'namespace'", "'new'", 
                     "'noexcept'", "'nullptr'", "'operator'", "'override'", 
                     "'private'", "'protected'", "'public'", "'register'", 
                     "'reinterpret_cast'", "'return'", "'short'", "'signed'", 
                     "'sizeof'", "'static'", "'static_assert'", "'static_cast'", 
                     "'struct'", "'switch'", "'template'", "'this'", "'thread_local'", 
                     "'throw'", "'true'", "'try'", "'typedef'", "'typeid'", 
                     "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'", 
                     "'void'", "'volatile'", "'wchar_t'", "'while'", "'('", 
                     "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", "'!'", "'='", 
                     "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'^='", "'&='", "'|='", "'<<'", "'>>'", "'<<='", "'>>='", 
                     "'=='", "'!='", "'<='", "'>='", "'&&'", "'||'", "'++'", 
                     "'--'", "','", "'->*'", "'->'", "'?'", "':'", "'::'", 
                     "';'", "'.'", "'.*'", "'...'" ]

    symbolicNames = [ "<INVALID>", "MultiLineMacro", "Directive", "Alignas", 
                      "Alignof", "Asm", "Auto", "Bool", "Break", "Case", 
                      "Catch", "Char", "Char16", "Char32", "Class", "Const", 
                      "Constexpr", "Const_cast", "Continue", "Decltype", 
                      "Default", "Delete", "Do", "Double", "Dynamic_cast", 
                      "Else", "Enum", "Explicit", "Export", "Extern", "False", 
                      "Final", "Float", "For", "Friend", "Goto", "If", "Inline", 
                      "Int", "Long", "Mutable", "Namespace", "New", "Noexcept", 
                      "Nullptr", "Operator", "Override", "Private", "Protected", 
                      "Public", "Register", "Reinterpret_cast", "Return", 
                      "Short", "Signed", "Sizeof", "Static", "Static_assert", 
                      "Static_cast", "Struct", "Switch", "Template", "This", 
                      "Thread_local", "Throw", "True", "Try", "Typedef", 
                      "Typeid_", "Typename_", "Union", "Unsigned", "Using", 
                      "Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen", 
                      "RightParen", "LeftBracket", "RightBracket", "LeftBrace", 
                      "RightBrace", "Plus", "Minus", "Star", "Div", "Mod", 
                      "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", 
                      "Greater", "PlusAssign", "MinusAssign", "StarAssign", 
                      "DivAssign", "ModAssign", "XorAssign", "AndAssign", 
                      "OrAssign", "LeftShift", "RightShift", "LeftShiftAssign", 
                      "RightShiftAssign", "Equal", "NotEqual", "LessEqual", 
                      "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
                      "Comma", "ArrowStar", "Arrow", "Question", "Colon", 
                      "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis", 
                      "Identifier", "Integerliteral", "Decimalliteral", 
                      "Octalliteral", "Hexadecimalliteral", "Binaryliteral", 
                      "Integersuffix", "Characterliteral", "Floatingliteral", 
                      "Stringliteral", "Userdefinedintegerliteral", "Userdefinedfloatingliteral", 
                      "Userdefinedstringliteral", "Userdefinedcharacterliteral", 
                      "Whitespace", "Newline", "BlockComment", "LineComment" ]

    RULE_translationunit = 0
    RULE_primaryexpression = 1
    RULE_idexpression = 2
    RULE_unqualifiedid = 3
    RULE_qualifiedid = 4
    RULE_nestednamespecifier = 5
    RULE_lambdaexpression = 6
    RULE_lambdaintroducer = 7
    RULE_lambdacapture = 8
    RULE_capturedefault = 9
    RULE_capturelist = 10
    RULE_capture = 11
    RULE_simplecapture = 12
    RULE_initcapture = 13
    RULE_lambdadeclarator = 14
    RULE_postfixexpression = 15
    RULE_typeidofexpr = 16
    RULE_typeidofthetypeid = 17
    RULE_expressionlist = 18
    RULE_pseudodestructorname = 19
    RULE_unaryexpression = 20
    RULE_unaryoperator = 21
    RULE_newexpression = 22
    RULE_newplacement = 23
    RULE_newtypeid = 24
    RULE_newdeclarator = 25
    RULE_noptrnewdeclarator = 26
    RULE_newinitializer = 27
    RULE_deleteexpression = 28
    RULE_noexceptexpression = 29
    RULE_castexpression = 30
    RULE_pmexpression = 31
    RULE_multiplicativeexpression = 32
    RULE_additiveexpression = 33
    RULE_shiftexpression = 34
    RULE_shiftoperator = 35
    RULE_relationalexpression = 36
    RULE_equalityexpression = 37
    RULE_andexpression = 38
    RULE_exclusiveorexpression = 39
    RULE_inclusiveorexpression = 40
    RULE_logicalandexpression = 41
    RULE_logicalorexpression = 42
    RULE_conditionalexpression = 43
    RULE_assignmentexpression = 44
    RULE_assignmentoperator = 45
    RULE_expression = 46
    RULE_constantexpression = 47
    RULE_statement = 48
    RULE_labeledstatement = 49
    RULE_expressionstatement = 50
    RULE_compoundstatement = 51
    RULE_statementseq = 52
    RULE_selectionstatement = 53
    RULE_condition = 54
    RULE_iterationstatement = 55
    RULE_forinitstatement = 56
    RULE_forrangedeclaration = 57
    RULE_forrangeinitializer = 58
    RULE_jumpstatement = 59
    RULE_declarationstatement = 60
    RULE_declarationseq = 61
    RULE_declaration = 62
    RULE_blockdeclaration = 63
    RULE_aliasdeclaration = 64
    RULE_simpledeclaration = 65
    RULE_static_assertdeclaration = 66
    RULE_emptydeclaration = 67
    RULE_attributedeclaration = 68
    RULE_declspecifier = 69
    RULE_declspecifierseq = 70
    RULE_storageclassspecifier = 71
    RULE_functionspecifier = 72
    RULE_typedefname = 73
    RULE_typespecifier = 74
    RULE_trailingtypespecifier = 75
    RULE_typespecifierseq = 76
    RULE_trailingtypespecifierseq = 77
    RULE_simpletypespecifier = 78
    RULE_thetypename = 79
    RULE_decltypespecifier = 80
    RULE_elaboratedtypespecifier = 81
    RULE_enumname = 82
    RULE_enumspecifier = 83
    RULE_enumhead = 84
    RULE_opaqueenumdeclaration = 85
    RULE_enumkey = 86
    RULE_enumbase = 87
    RULE_enumeratorlist = 88
    RULE_enumeratordefinition = 89
    RULE_enumerator = 90
    RULE_namespacename = 91
    RULE_originalnamespacename = 92
    RULE_namespacedefinition = 93
    RULE_namednamespacedefinition = 94
    RULE_originalnamespacedefinition = 95
    RULE_extensionnamespacedefinition = 96
    RULE_unnamednamespacedefinition = 97
    RULE_namespacebody = 98
    RULE_namespacealias = 99
    RULE_namespacealiasdefinition = 100
    RULE_qualifiednamespacespecifier = 101
    RULE_usingdeclaration = 102
    RULE_usingdirective = 103
    RULE_asmdefinition = 104
    RULE_linkagespecification = 105
    RULE_attributespecifierseq = 106
    RULE_attributespecifier = 107
    RULE_alignmentspecifier = 108
    RULE_attributelist = 109
    RULE_attribute = 110
    RULE_attributetoken = 111
    RULE_attributescopedtoken = 112
    RULE_attributenamespace = 113
    RULE_attributeargumentclause = 114
    RULE_balancedtokenseq = 115
    RULE_balancedtoken = 116
    RULE_initdeclaratorlist = 117
    RULE_initdeclarator = 118
    RULE_declarator = 119
    RULE_ptrdeclarator = 120
    RULE_noptrdeclarator = 121
    RULE_parametersandqualifiers = 122
    RULE_trailingreturntype = 123
    RULE_ptroperator = 124
    RULE_cvqualifierseq = 125
    RULE_cvqualifier = 126
    RULE_refqualifier = 127
    RULE_declaratorid = 128
    RULE_thetypeid = 129
    RULE_abstractdeclarator = 130
    RULE_ptrabstractdeclarator = 131
    RULE_noptrabstractdeclarator = 132
    RULE_abstractpackdeclarator = 133
    RULE_noptrabstractpackdeclarator = 134
    RULE_parameterdeclarationclause = 135
    RULE_parameterdeclarationlist = 136
    RULE_parameterdeclaration = 137
    RULE_functiondefinition = 138
    RULE_functionbody = 139
    RULE_initializer = 140
    RULE_braceorequalinitializer = 141
    RULE_initializerclause = 142
    RULE_initializerlist = 143
    RULE_bracedinitlist = 144
    RULE_classname = 145
    RULE_classspecifier = 146
    RULE_classhead = 147
    RULE_classheadname = 148
    RULE_classvirtspecifier = 149
    RULE_classkey = 150
    RULE_memberspecification = 151
    RULE_memberdeclaration = 152
    RULE_memberdeclaratorlist = 153
    RULE_memberdeclarator = 154
    RULE_virtspecifierseq = 155
    RULE_virtspecifier = 156
    RULE_purespecifier = 157
    RULE_baseclause = 158
    RULE_basespecifierlist = 159
    RULE_basespecifier = 160
    RULE_classordecltype = 161
    RULE_basetypespecifier = 162
    RULE_accessspecifier = 163
    RULE_conversionfunctionid = 164
    RULE_conversiontypeid = 165
    RULE_conversiondeclarator = 166
    RULE_ctorinitializer = 167
    RULE_meminitializerlist = 168
    RULE_meminitializer = 169
    RULE_meminitializerid = 170
    RULE_operatorfunctionid = 171
    RULE_literaloperatorid = 172
    RULE_templatedeclaration = 173
    RULE_templateparameterlist = 174
    RULE_templateparameter = 175
    RULE_typeparameter = 176
    RULE_simpletemplateid = 177
    RULE_templateid = 178
    RULE_templatename = 179
    RULE_templateargumentlist = 180
    RULE_templateargument = 181
    RULE_typenamespecifier = 182
    RULE_explicitinstantiation = 183
    RULE_explicitspecialization = 184
    RULE_tryblock = 185
    RULE_functiontryblock = 186
    RULE_handlerseq = 187
    RULE_handler = 188
    RULE_exceptiondeclaration = 189
    RULE_throwexpression = 190
    RULE_exceptionspecification = 191
    RULE_dynamicexceptionspecification = 192
    RULE_typeidlist = 193
    RULE_noexceptspecification = 194
    RULE_theoperator = 195
    RULE_literal = 196
    RULE_booleanliteral = 197
    RULE_pointerliteral = 198
    RULE_userdefinedliteral = 199

    ruleNames =  [ "translationunit", "primaryexpression", "idexpression", 
                   "unqualifiedid", "qualifiedid", "nestednamespecifier", 
                   "lambdaexpression", "lambdaintroducer", "lambdacapture", 
                   "capturedefault", "capturelist", "capture", "simplecapture", 
                   "initcapture", "lambdadeclarator", "postfixexpression", 
                   "typeidofexpr", "typeidofthetypeid", "expressionlist", 
                   "pseudodestructorname", "unaryexpression", "unaryoperator", 
                   "newexpression", "newplacement", "newtypeid", "newdeclarator", 
                   "noptrnewdeclarator", "newinitializer", "deleteexpression", 
                   "noexceptexpression", "castexpression", "pmexpression", 
                   "multiplicativeexpression", "additiveexpression", "shiftexpression", 
                   "shiftoperator", "relationalexpression", "equalityexpression", 
                   "andexpression", "exclusiveorexpression", "inclusiveorexpression", 
                   "logicalandexpression", "logicalorexpression", "conditionalexpression", 
                   "assignmentexpression", "assignmentoperator", "expression", 
                   "constantexpression", "statement", "labeledstatement", 
                   "expressionstatement", "compoundstatement", "statementseq", 
                   "selectionstatement", "condition", "iterationstatement", 
                   "forinitstatement", "forrangedeclaration", "forrangeinitializer", 
                   "jumpstatement", "declarationstatement", "declarationseq", 
                   "declaration", "blockdeclaration", "aliasdeclaration", 
                   "simpledeclaration", "static_assertdeclaration", "emptydeclaration", 
                   "attributedeclaration", "declspecifier", "declspecifierseq", 
                   "storageclassspecifier", "functionspecifier", "typedefname", 
                   "typespecifier", "trailingtypespecifier", "typespecifierseq", 
                   "trailingtypespecifierseq", "simpletypespecifier", "thetypename", 
                   "decltypespecifier", "elaboratedtypespecifier", "enumname", 
                   "enumspecifier", "enumhead", "opaqueenumdeclaration", 
                   "enumkey", "enumbase", "enumeratorlist", "enumeratordefinition", 
                   "enumerator", "namespacename", "originalnamespacename", 
                   "namespacedefinition", "namednamespacedefinition", "originalnamespacedefinition", 
                   "extensionnamespacedefinition", "unnamednamespacedefinition", 
                   "namespacebody", "namespacealias", "namespacealiasdefinition", 
                   "qualifiednamespacespecifier", "usingdeclaration", "usingdirective", 
                   "asmdefinition", "linkagespecification", "attributespecifierseq", 
                   "attributespecifier", "alignmentspecifier", "attributelist", 
                   "attribute", "attributetoken", "attributescopedtoken", 
                   "attributenamespace", "attributeargumentclause", "balancedtokenseq", 
                   "balancedtoken", "initdeclaratorlist", "initdeclarator", 
                   "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
                   "trailingreturntype", "ptroperator", "cvqualifierseq", 
                   "cvqualifier", "refqualifier", "declaratorid", "thetypeid", 
                   "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator", 
                   "abstractpackdeclarator", "noptrabstractpackdeclarator", 
                   "parameterdeclarationclause", "parameterdeclarationlist", 
                   "parameterdeclaration", "functiondefinition", "functionbody", 
                   "initializer", "braceorequalinitializer", "initializerclause", 
                   "initializerlist", "bracedinitlist", "classname", "classspecifier", 
                   "classhead", "classheadname", "classvirtspecifier", "classkey", 
                   "memberspecification", "memberdeclaration", "memberdeclaratorlist", 
                   "memberdeclarator", "virtspecifierseq", "virtspecifier", 
                   "purespecifier", "baseclause", "basespecifierlist", "basespecifier", 
                   "classordecltype", "basetypespecifier", "accessspecifier", 
                   "conversionfunctionid", "conversiontypeid", "conversiondeclarator", 
                   "ctorinitializer", "meminitializerlist", "meminitializer", 
                   "meminitializerid", "operatorfunctionid", "literaloperatorid", 
                   "templatedeclaration", "templateparameterlist", "templateparameter", 
                   "typeparameter", "simpletemplateid", "templateid", "templatename", 
                   "templateargumentlist", "templateargument", "typenamespecifier", 
                   "explicitinstantiation", "explicitspecialization", "tryblock", 
                   "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
                   "throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
                   "typeidlist", "noexceptspecification", "theoperator", 
                   "literal", "booleanliteral", "pointerliteral", "userdefinedliteral" ]

    EOF = Token.EOF
    MultiLineMacro=1
    Directive=2
    Alignas=3
    Alignof=4
    Asm=5
    Auto=6
    Bool=7
    Break=8
    Case=9
    Catch=10
    Char=11
    Char16=12
    Char32=13
    Class=14
    Const=15
    Constexpr=16
    Const_cast=17
    Continue=18
    Decltype=19
    Default=20
    Delete=21
    Do=22
    Double=23
    Dynamic_cast=24
    Else=25
    Enum=26
    Explicit=27
    Export=28
    Extern=29
    False_=30
    Final=31
    Float=32
    For=33
    Friend=34
    Goto=35
    If=36
    Inline=37
    Int=38
    Long=39
    Mutable=40
    Namespace=41
    New=42
    Noexcept=43
    Nullptr=44
    Operator=45
    Override=46
    Private=47
    Protected=48
    Public=49
    Register=50
    Reinterpret_cast=51
    Return=52
    Short=53
    Signed=54
    Sizeof=55
    Static=56
    Static_assert=57
    Static_cast=58
    Struct=59
    Switch=60
    Template=61
    This=62
    Thread_local=63
    Throw=64
    True_=65
    Try=66
    Typedef=67
    Typeid_=68
    Typename_=69
    Union=70
    Unsigned=71
    Using=72
    Virtual=73
    Void=74
    Volatile=75
    Wchar=76
    While=77
    LeftParen=78
    RightParen=79
    LeftBracket=80
    RightBracket=81
    LeftBrace=82
    RightBrace=83
    Plus=84
    Minus=85
    Star=86
    Div=87
    Mod=88
    Caret=89
    And=90
    Or=91
    Tilde=92
    Not=93
    Assign=94
    Less=95
    Greater=96
    PlusAssign=97
    MinusAssign=98
    StarAssign=99
    DivAssign=100
    ModAssign=101
    XorAssign=102
    AndAssign=103
    OrAssign=104
    LeftShift=105
    RightShift=106
    LeftShiftAssign=107
    RightShiftAssign=108
    Equal=109
    NotEqual=110
    LessEqual=111
    GreaterEqual=112
    AndAnd=113
    OrOr=114
    PlusPlus=115
    MinusMinus=116
    Comma=117
    ArrowStar=118
    Arrow=119
    Question=120
    Colon=121
    Doublecolon=122
    Semi=123
    Dot=124
    DotStar=125
    Ellipsis=126
    Identifier=127
    Integerliteral=128
    Decimalliteral=129
    Octalliteral=130
    Hexadecimalliteral=131
    Binaryliteral=132
    Integersuffix=133
    Characterliteral=134
    Floatingliteral=135
    Stringliteral=136
    Userdefinedintegerliteral=137
    Userdefinedfloatingliteral=138
    Userdefinedstringliteral=139
    Userdefinedcharacterliteral=140
    Whitespace=141
    Newline=142
    BlockComment=143
    LineComment=144

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TranslationunitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(grCpp2Parser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_translationunit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationunit" ):
                listener.enterTranslationunit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationunit" ):
                listener.exitTranslationunit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranslationunit" ):
                return visitor.visitTranslationunit(self)
            else:
                return visitor.visitChildren(self)




    def translationunit(self):

        localctx = grCpp2Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6096708528351086360) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 1837539016753818621) != 0):
                self.state = 400
                self.declarationseq(0)


            self.state = 403
            self.match(grCpp2Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(grCpp2Parser.LiteralContext,0)


        def This(self):
            return self.getToken(grCpp2Parser.This, 0)

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def idexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.IdexpressionContext,0)


        def lambdaexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.LambdaexpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_primaryexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression" ):
                listener.enterPrimaryexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression" ):
                listener.exitPrimaryexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryexpression" ):
                return visitor.visitPrimaryexpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryexpression(self):

        localctx = grCpp2Parser.PrimaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primaryexpression)
        try:
            self.state = 413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 44, 65, 128, 134, 135, 136, 137, 138, 139, 140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 405
                self.literal()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 406
                self.match(grCpp2Parser.This)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 3)
                self.state = 407
                self.match(grCpp2Parser.LeftParen)
                self.state = 408
                self.expression(0)
                self.state = 409
                self.match(grCpp2Parser.RightParen)
                pass
            elif token in [19, 45, 92, 122, 127]:
                self.enterOuterAlt(localctx, 4)
                self.state = 411
                self.idexpression()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 5)
                self.state = 412
                self.lambdaexpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(grCpp2Parser.UnqualifiedidContext,0)


        def qualifiedid(self):
            return self.getTypedRuleContext(grCpp2Parser.QualifiedidContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_idexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdexpression" ):
                listener.enterIdexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdexpression" ):
                listener.exitIdexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdexpression" ):
                return visitor.visitIdexpression(self)
            else:
                return visitor.visitChildren(self)




    def idexpression(self):

        localctx = grCpp2Parser.IdexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_idexpression)
        try:
            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self.unqualifiedid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.qualifiedid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnqualifiedidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def operatorfunctionid(self):
            return self.getTypedRuleContext(grCpp2Parser.OperatorfunctionidContext,0)


        def conversionfunctionid(self):
            return self.getTypedRuleContext(grCpp2Parser.ConversionfunctionidContext,0)


        def literaloperatorid(self):
            return self.getTypedRuleContext(grCpp2Parser.LiteraloperatoridContext,0)


        def Tilde(self):
            return self.getToken(grCpp2Parser.Tilde, 0)

        def classname(self):
            return self.getTypedRuleContext(grCpp2Parser.ClassnameContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.DecltypespecifierContext,0)


        def templateid(self):
            return self.getTypedRuleContext(grCpp2Parser.TemplateidContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_unqualifiedid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid" ):
                listener.enterUnqualifiedid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid" ):
                listener.exitUnqualifiedid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid" ):
                return visitor.visitUnqualifiedid(self)
            else:
                return visitor.visitChildren(self)




    def unqualifiedid(self):

        localctx = grCpp2Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unqualifiedid)
        try:
            self.state = 428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.match(grCpp2Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.operatorfunctionid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 421
                self.conversionfunctionid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 422
                self.literaloperatorid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 423
                self.match(grCpp2Parser.Tilde)
                self.state = 424
                self.classname()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 425
                self.match(grCpp2Parser.Tilde)
                self.state = 426
                self.decltypespecifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 427
                self.templateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestednamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.NestednamespecifierContext,0)


        def unqualifiedid(self):
            return self.getTypedRuleContext(grCpp2Parser.UnqualifiedidContext,0)


        def Template(self):
            return self.getToken(grCpp2Parser.Template, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_qualifiedid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedid" ):
                listener.enterQualifiedid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedid" ):
                listener.exitQualifiedid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedid" ):
                return visitor.visitQualifiedid(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedid(self):

        localctx = grCpp2Parser.QualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_qualifiedid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.nestednamespecifier(0)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 431
                self.match(grCpp2Parser.Template)


            self.state = 434
            self.unqualifiedid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestednamespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Doublecolon(self):
            return self.getToken(grCpp2Parser.Doublecolon, 0)

        def thetypename(self):
            return self.getTypedRuleContext(grCpp2Parser.ThetypenameContext,0)


        def namespacename(self):
            return self.getTypedRuleContext(grCpp2Parser.NamespacenameContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.DecltypespecifierContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.NestednamespecifierContext,0)


        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(grCpp2Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(grCpp2Parser.Template, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_nestednamespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier" ):
                listener.enterNestednamespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier" ):
                listener.exitNestednamespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier" ):
                return visitor.visitNestednamespecifier(self)
            else:
                return visitor.visitChildren(self)



    def nestednamespecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.NestednamespecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_nestednamespecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 437
                self.match(grCpp2Parser.Doublecolon)
                pass

            elif la_ == 2:
                self.state = 438
                self.thetypename()
                self.state = 439
                self.match(grCpp2Parser.Doublecolon)
                pass

            elif la_ == 3:
                self.state = 441
                self.namespacename()
                self.state = 442
                self.match(grCpp2Parser.Doublecolon)
                pass

            elif la_ == 4:
                self.state = 444
                self.decltypespecifier()
                self.state = 445
                self.match(grCpp2Parser.Doublecolon)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 461
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 459
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        localctx = grCpp2Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 449
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 450
                        self.match(grCpp2Parser.Identifier)
                        self.state = 451
                        self.match(grCpp2Parser.Doublecolon)
                        pass

                    elif la_ == 2:
                        localctx = grCpp2Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 452
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 454
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==61:
                            self.state = 453
                            self.match(grCpp2Parser.Template)


                        self.state = 456
                        self.simpletemplateid()
                        self.state = 457
                        self.match(grCpp2Parser.Doublecolon)
                        pass

             
                self.state = 463
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LambdaexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaintroducer(self):
            return self.getTypedRuleContext(grCpp2Parser.LambdaintroducerContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.CompoundstatementContext,0)


        def lambdadeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.LambdadeclaratorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_lambdaexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaexpression" ):
                listener.enterLambdaexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaexpression" ):
                listener.exitLambdaexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaexpression" ):
                return visitor.visitLambdaexpression(self)
            else:
                return visitor.visitChildren(self)




    def lambdaexpression(self):

        localctx = grCpp2Parser.LambdaexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lambdaexpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.lambdaintroducer()
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 465
                self.lambdadeclarator()


            self.state = 468
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaintroducerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(grCpp2Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(grCpp2Parser.RightBracket, 0)

        def lambdacapture(self):
            return self.getTypedRuleContext(grCpp2Parser.LambdacaptureContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_lambdaintroducer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaintroducer" ):
                listener.enterLambdaintroducer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaintroducer" ):
                listener.exitLambdaintroducer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaintroducer" ):
                return visitor.visitLambdaintroducer(self)
            else:
                return visitor.visitChildren(self)




    def lambdaintroducer(self):

        localctx = grCpp2Parser.LambdaintroducerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lambdaintroducer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(grCpp2Parser.LeftBracket)
            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62 or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 137438953489) != 0):
                self.state = 471
                self.lambdacapture()


            self.state = 474
            self.match(grCpp2Parser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdacaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capturedefault(self):
            return self.getTypedRuleContext(grCpp2Parser.CapturedefaultContext,0)


        def capturelist(self):
            return self.getTypedRuleContext(grCpp2Parser.CapturelistContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_lambdacapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdacapture" ):
                listener.enterLambdacapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdacapture" ):
                listener.exitLambdacapture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdacapture" ):
                return visitor.visitLambdacapture(self)
            else:
                return visitor.visitChildren(self)




    def lambdacapture(self):

        localctx = grCpp2Parser.LambdacaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_lambdacapture)
        try:
            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.capturedefault()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 477
                self.capturelist(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 478
                self.capturedefault()
                self.state = 479
                self.match(grCpp2Parser.Comma)
                self.state = 480
                self.capturelist(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CapturedefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(grCpp2Parser.And, 0)

        def Assign(self):
            return self.getToken(grCpp2Parser.Assign, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_capturedefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturedefault" ):
                listener.enterCapturedefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturedefault" ):
                listener.exitCapturedefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturedefault" ):
                return visitor.visitCapturedefault(self)
            else:
                return visitor.visitChildren(self)




    def capturedefault(self):

        localctx = grCpp2Parser.CapturedefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_capturedefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            _la = self._input.LA(1)
            if not(_la==90 or _la==94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CapturelistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture(self):
            return self.getTypedRuleContext(grCpp2Parser.CaptureContext,0)


        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def capturelist(self):
            return self.getTypedRuleContext(grCpp2Parser.CapturelistContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_capturelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturelist" ):
                listener.enterCapturelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturelist" ):
                listener.exitCapturelist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturelist" ):
                return visitor.visitCapturelist(self)
            else:
                return visitor.visitChildren(self)



    def capturelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.CapturelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_capturelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.capture()
            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 488
                self.match(grCpp2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 499
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.CapturelistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_capturelist)
                    self.state = 491
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 492
                    self.match(grCpp2Parser.Comma)
                    self.state = 493
                    self.capture()
                    self.state = 495
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 494
                        self.match(grCpp2Parser.Ellipsis)

             
                self.state = 501
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplecapture(self):
            return self.getTypedRuleContext(grCpp2Parser.SimplecaptureContext,0)


        def initcapture(self):
            return self.getTypedRuleContext(grCpp2Parser.InitcaptureContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_capture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture" ):
                listener.enterCapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture" ):
                listener.exitCapture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture" ):
                return visitor.visitCapture(self)
            else:
                return visitor.visitChildren(self)




    def capture(self):

        localctx = grCpp2Parser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_capture)
        try:
            self.state = 504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 502
                self.simplecapture()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 503
                self.initcapture()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplecaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def And(self):
            return self.getToken(grCpp2Parser.And, 0)

        def This(self):
            return self.getToken(grCpp2Parser.This, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_simplecapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplecapture" ):
                listener.enterSimplecapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplecapture" ):
                listener.exitSimplecapture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimplecapture" ):
                return visitor.visitSimplecapture(self)
            else:
                return visitor.visitChildren(self)




    def simplecapture(self):

        localctx = grCpp2Parser.SimplecaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_simplecapture)
        try:
            self.state = 510
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self.match(grCpp2Parser.Identifier)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.match(grCpp2Parser.And)
                self.state = 508
                self.match(grCpp2Parser.Identifier)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 3)
                self.state = 509
                self.match(grCpp2Parser.This)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitcaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def initializer(self):
            return self.getTypedRuleContext(grCpp2Parser.InitializerContext,0)


        def And(self):
            return self.getToken(grCpp2Parser.And, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_initcapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitcapture" ):
                listener.enterInitcapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitcapture" ):
                listener.exitInitcapture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitcapture" ):
                return visitor.visitInitcapture(self)
            else:
                return visitor.visitChildren(self)




    def initcapture(self):

        localctx = grCpp2Parser.InitcaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_initcapture)
        try:
            self.state = 517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 512
                self.match(grCpp2Parser.Identifier)
                self.state = 513
                self.initializer()
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 514
                self.match(grCpp2Parser.And)
                self.state = 515
                self.match(grCpp2Parser.Identifier)
                self.state = 516
                self.initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdadeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(grCpp2Parser.ParameterdeclarationclauseContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def Mutable(self):
            return self.getToken(grCpp2Parser.Mutable, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(grCpp2Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(grCpp2Parser.TrailingreturntypeContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_lambdadeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdadeclarator" ):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdadeclarator" ):
                listener.exitLambdadeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdadeclarator" ):
                return visitor.visitLambdadeclarator(self)
            else:
                return visitor.visitChildren(self)




    def lambdadeclarator(self):

        localctx = grCpp2Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_lambdadeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(grCpp2Parser.LeftParen)
            self.state = 520
            self.parameterdeclarationclause()
            self.state = 521
            self.match(grCpp2Parser.RightParen)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 522
                self.match(grCpp2Parser.Mutable)


            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43 or _la==64:
                self.state = 525
                self.exceptionspecification()


            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==80:
                self.state = 528
                self.attributespecifierseq(0)


            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 531
                self.trailingreturntype()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.PrimaryexpressionContext,0)


        def simpletypespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.SimpletypespecifierContext,0)


        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionlistContext,0)


        def typenamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.TypenamespecifierContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(grCpp2Parser.BracedinitlistContext,0)


        def Dynamic_cast(self):
            return self.getToken(grCpp2Parser.Dynamic_cast, 0)

        def Less(self):
            return self.getToken(grCpp2Parser.Less, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(grCpp2Parser.ThetypeidContext,0)


        def Greater(self):
            return self.getToken(grCpp2Parser.Greater, 0)

        def expression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionContext,0)


        def Static_cast(self):
            return self.getToken(grCpp2Parser.Static_cast, 0)

        def Reinterpret_cast(self):
            return self.getToken(grCpp2Parser.Reinterpret_cast, 0)

        def Const_cast(self):
            return self.getToken(grCpp2Parser.Const_cast, 0)

        def typeidofthetypeid(self):
            return self.getTypedRuleContext(grCpp2Parser.TypeidofthetypeidContext,0)


        def postfixexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.PostfixexpressionContext,0)


        def LeftBracket(self):
            return self.getToken(grCpp2Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(grCpp2Parser.RightBracket, 0)

        def Dot(self):
            return self.getToken(grCpp2Parser.Dot, 0)

        def idexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.IdexpressionContext,0)


        def Template(self):
            return self.getToken(grCpp2Parser.Template, 0)

        def Arrow(self):
            return self.getToken(grCpp2Parser.Arrow, 0)

        def pseudodestructorname(self):
            return self.getTypedRuleContext(grCpp2Parser.PseudodestructornameContext,0)


        def PlusPlus(self):
            return self.getToken(grCpp2Parser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(grCpp2Parser.MinusMinus, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_postfixexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression" ):
                listener.enterPostfixexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression" ):
                listener.exitPostfixexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression" ):
                return visitor.visitPostfixexpression(self)
            else:
                return visitor.visitChildren(self)



    def postfixexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.PostfixexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_postfixexpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 535
                self.primaryexpression()
                pass

            elif la_ == 2:
                self.state = 536
                self.simpletypespecifier()
                self.state = 537
                self.match(grCpp2Parser.LeftParen)
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4965285389904001232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8928386260247685965) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 8129) != 0):
                    self.state = 538
                    self.expressionlist()


                self.state = 541
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 3:
                self.state = 543
                self.typenamespecifier()
                self.state = 544
                self.match(grCpp2Parser.LeftParen)
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4965285389904001232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8928386260247685965) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 8129) != 0):
                    self.state = 545
                    self.expressionlist()


                self.state = 548
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 4:
                self.state = 550
                self.simpletypespecifier()
                self.state = 551
                self.bracedinitlist()
                pass

            elif la_ == 5:
                self.state = 553
                self.typenamespecifier()
                self.state = 554
                self.bracedinitlist()
                pass

            elif la_ == 6:
                self.state = 556
                self.match(grCpp2Parser.Dynamic_cast)
                self.state = 557
                self.match(grCpp2Parser.Less)
                self.state = 558
                self.thetypeid()
                self.state = 559
                self.match(grCpp2Parser.Greater)
                self.state = 560
                self.match(grCpp2Parser.LeftParen)
                self.state = 561
                self.expression(0)
                self.state = 562
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 7:
                self.state = 564
                self.match(grCpp2Parser.Static_cast)
                self.state = 565
                self.match(grCpp2Parser.Less)
                self.state = 566
                self.thetypeid()
                self.state = 567
                self.match(grCpp2Parser.Greater)
                self.state = 568
                self.match(grCpp2Parser.LeftParen)
                self.state = 569
                self.expression(0)
                self.state = 570
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 8:
                self.state = 572
                self.match(grCpp2Parser.Reinterpret_cast)
                self.state = 573
                self.match(grCpp2Parser.Less)
                self.state = 574
                self.thetypeid()
                self.state = 575
                self.match(grCpp2Parser.Greater)
                self.state = 576
                self.match(grCpp2Parser.LeftParen)
                self.state = 577
                self.expression(0)
                self.state = 578
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 9:
                self.state = 580
                self.match(grCpp2Parser.Const_cast)
                self.state = 581
                self.match(grCpp2Parser.Less)
                self.state = 582
                self.thetypeid()
                self.state = 583
                self.match(grCpp2Parser.Greater)
                self.state = 584
                self.match(grCpp2Parser.LeftParen)
                self.state = 585
                self.expression(0)
                self.state = 586
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 10:
                self.state = 588
                self.typeidofthetypeid()
                self.state = 589
                self.match(grCpp2Parser.LeftParen)
                self.state = 590
                self.expression(0)
                self.state = 591
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 11:
                self.state = 593
                self.typeidofthetypeid()
                self.state = 594
                self.match(grCpp2Parser.LeftParen)
                self.state = 595
                self.thetypeid()
                self.state = 596
                self.match(grCpp2Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 640
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 638
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        localctx = grCpp2Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 600
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 601
                        self.match(grCpp2Parser.LeftBracket)
                        self.state = 602
                        self.expression(0)
                        self.state = 603
                        self.match(grCpp2Parser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = grCpp2Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 605
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 606
                        self.match(grCpp2Parser.LeftBracket)
                        self.state = 607
                        self.bracedinitlist()
                        self.state = 608
                        self.match(grCpp2Parser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = grCpp2Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 610
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 611
                        self.match(grCpp2Parser.LeftParen)
                        self.state = 613
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4965285389904001232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8928386260247685965) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 8129) != 0):
                            self.state = 612
                            self.expressionlist()


                        self.state = 615
                        self.match(grCpp2Parser.RightParen)
                        pass

                    elif la_ == 4:
                        localctx = grCpp2Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 616
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 617
                        self.match(grCpp2Parser.Dot)
                        self.state = 619
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==61:
                            self.state = 618
                            self.match(grCpp2Parser.Template)


                        self.state = 621
                        self.idexpression()
                        pass

                    elif la_ == 5:
                        localctx = grCpp2Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 622
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 623
                        self.match(grCpp2Parser.Arrow)
                        self.state = 625
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==61:
                            self.state = 624
                            self.match(grCpp2Parser.Template)


                        self.state = 627
                        self.idexpression()
                        pass

                    elif la_ == 6:
                        localctx = grCpp2Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 628
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 629
                        self.match(grCpp2Parser.Dot)
                        self.state = 630
                        self.pseudodestructorname()
                        pass

                    elif la_ == 7:
                        localctx = grCpp2Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 631
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 632
                        self.match(grCpp2Parser.Arrow)
                        self.state = 633
                        self.pseudodestructorname()
                        pass

                    elif la_ == 8:
                        localctx = grCpp2Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 634
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 635
                        self.match(grCpp2Parser.PlusPlus)
                        pass

                    elif la_ == 9:
                        localctx = grCpp2Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 636
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 637
                        self.match(grCpp2Parser.MinusMinus)
                        pass

             
                self.state = 642
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeidofexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typeid_(self):
            return self.getToken(grCpp2Parser.Typeid_, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_typeidofexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidofexpr" ):
                listener.enterTypeidofexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidofexpr" ):
                listener.exitTypeidofexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidofexpr" ):
                return visitor.visitTypeidofexpr(self)
            else:
                return visitor.visitChildren(self)




    def typeidofexpr(self):

        localctx = grCpp2Parser.TypeidofexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeidofexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(grCpp2Parser.Typeid_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeidofthetypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typeid_(self):
            return self.getToken(grCpp2Parser.Typeid_, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_typeidofthetypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidofthetypeid" ):
                listener.enterTypeidofthetypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidofthetypeid" ):
                listener.exitTypeidofthetypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidofthetypeid" ):
                return visitor.visitTypeidofthetypeid(self)
            else:
                return visitor.visitChildren(self)




    def typeidofthetypeid(self):

        localctx = grCpp2Parser.TypeidofthetypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeidofthetypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(grCpp2Parser.Typeid_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(grCpp2Parser.InitializerlistContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_expressionlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionlist" ):
                listener.enterExpressionlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionlist" ):
                listener.exitExpressionlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionlist" ):
                return visitor.visitExpressionlist(self)
            else:
                return visitor.visitChildren(self)




    def expressionlist(self):

        localctx = grCpp2Parser.ExpressionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_expressionlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.initializerlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudodestructornameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(grCpp2Parser.ThetypenameContext)
            else:
                return self.getTypedRuleContext(grCpp2Parser.ThetypenameContext,i)


        def Doublecolon(self):
            return self.getToken(grCpp2Parser.Doublecolon, 0)

        def Tilde(self):
            return self.getToken(grCpp2Parser.Tilde, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.NestednamespecifierContext,0)


        def Template(self):
            return self.getToken(grCpp2Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(grCpp2Parser.SimpletemplateidContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_pseudodestructorname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudodestructorname" ):
                listener.enterPseudodestructorname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudodestructorname" ):
                listener.exitPseudodestructorname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudodestructorname" ):
                return visitor.visitPseudodestructorname(self)
            else:
                return visitor.visitChildren(self)




    def pseudodestructorname(self):

        localctx = grCpp2Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pseudodestructorname)
        self._la = 0 # Token type
        try:
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 649
                    self.nestednamespecifier(0)


                self.state = 652
                self.thetypename()
                self.state = 653
                self.match(grCpp2Parser.Doublecolon)
                self.state = 654
                self.match(grCpp2Parser.Tilde)
                self.state = 655
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 657
                self.nestednamespecifier(0)
                self.state = 658
                self.match(grCpp2Parser.Template)
                self.state = 659
                self.simpletemplateid()
                self.state = 660
                self.match(grCpp2Parser.Doublecolon)
                self.state = 661
                self.match(grCpp2Parser.Tilde)
                self.state = 662
                self.thetypename()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19 or _la==122 or _la==127:
                    self.state = 664
                    self.nestednamespecifier(0)


                self.state = 667
                self.match(grCpp2Parser.Tilde)
                self.state = 668
                self.thetypename()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 669
                self.match(grCpp2Parser.Tilde)
                self.state = 670
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.PostfixexpressionContext,0)


        def PlusPlus(self):
            return self.getToken(grCpp2Parser.PlusPlus, 0)

        def castexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.CastexpressionContext,0)


        def MinusMinus(self):
            return self.getToken(grCpp2Parser.MinusMinus, 0)

        def unaryoperator(self):
            return self.getTypedRuleContext(grCpp2Parser.UnaryoperatorContext,0)


        def Sizeof(self):
            return self.getToken(grCpp2Parser.Sizeof, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.UnaryexpressionContext,0)


        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(grCpp2Parser.ThetypeidContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def Alignof(self):
            return self.getToken(grCpp2Parser.Alignof, 0)

        def noexceptexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.NoexceptexpressionContext,0)


        def newexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.NewexpressionContext,0)


        def deleteexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.DeleteexpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_unaryexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression" ):
                listener.enterUnaryexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression" ):
                listener.exitUnaryexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression" ):
                return visitor.visitUnaryexpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryexpression(self):

        localctx = grCpp2Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_unaryexpression)
        try:
            self.state = 701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.postfixexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.match(grCpp2Parser.PlusPlus)
                self.state = 675
                self.castexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 676
                self.match(grCpp2Parser.MinusMinus)
                self.state = 677
                self.castexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 678
                self.unaryoperator()
                self.state = 679
                self.castexpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 681
                self.match(grCpp2Parser.Sizeof)
                self.state = 682
                self.unaryexpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 683
                self.match(grCpp2Parser.Sizeof)
                self.state = 684
                self.match(grCpp2Parser.LeftParen)
                self.state = 685
                self.thetypeid()
                self.state = 686
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 688
                self.match(grCpp2Parser.Sizeof)
                self.state = 689
                self.match(grCpp2Parser.Ellipsis)
                self.state = 690
                self.match(grCpp2Parser.LeftParen)
                self.state = 691
                self.match(grCpp2Parser.Identifier)
                self.state = 692
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 693
                self.match(grCpp2Parser.Alignof)
                self.state = 694
                self.match(grCpp2Parser.LeftParen)
                self.state = 695
                self.thetypeid()
                self.state = 696
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 698
                self.noexceptexpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 699
                self.newexpression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 700
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Or(self):
            return self.getToken(grCpp2Parser.Or, 0)

        def Star(self):
            return self.getToken(grCpp2Parser.Star, 0)

        def And(self):
            return self.getToken(grCpp2Parser.And, 0)

        def Plus(self):
            return self.getToken(grCpp2Parser.Plus, 0)

        def Not(self):
            return self.getToken(grCpp2Parser.Not, 0)

        def Tilde(self):
            return self.getToken(grCpp2Parser.Tilde, 0)

        def Minus(self):
            return self.getToken(grCpp2Parser.Minus, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_unaryoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator" ):
                listener.enterUnaryoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator" ):
                listener.exitUnaryoperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator" ):
                return visitor.visitUnaryoperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryoperator(self):

        localctx = grCpp2Parser.UnaryoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_unaryoperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 967) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(grCpp2Parser.New, 0)

        def newtypeid(self):
            return self.getTypedRuleContext(grCpp2Parser.NewtypeidContext,0)


        def Doublecolon(self):
            return self.getToken(grCpp2Parser.Doublecolon, 0)

        def newplacement(self):
            return self.getTypedRuleContext(grCpp2Parser.NewplacementContext,0)


        def newinitializer(self):
            return self.getTypedRuleContext(grCpp2Parser.NewinitializerContext,0)


        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(grCpp2Parser.ThetypeidContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_newexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewexpression" ):
                listener.enterNewexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewexpression" ):
                listener.exitNewexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewexpression" ):
                return visitor.visitNewexpression(self)
            else:
                return visitor.visitChildren(self)




    def newexpression(self):

        localctx = grCpp2Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_newexpression)
        self._la = 0 # Token type
        try:
            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==122:
                    self.state = 705
                    self.match(grCpp2Parser.Doublecolon)


                self.state = 708
                self.match(grCpp2Parser.New)
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 709
                    self.newplacement()


                self.state = 712
                self.newtypeid()
                self.state = 714
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 713
                    self.newinitializer()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==122:
                    self.state = 716
                    self.match(grCpp2Parser.Doublecolon)


                self.state = 719
                self.match(grCpp2Parser.New)
                self.state = 721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 720
                    self.newplacement()


                self.state = 723
                self.match(grCpp2Parser.LeftParen)
                self.state = 724
                self.thetypeid()
                self.state = 725
                self.match(grCpp2Parser.RightParen)
                self.state = 727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 726
                    self.newinitializer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewplacementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionlistContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_newplacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewplacement" ):
                listener.enterNewplacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewplacement" ):
                listener.exitNewplacement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewplacement" ):
                return visitor.visitNewplacement(self)
            else:
                return visitor.visitChildren(self)




    def newplacement(self):

        localctx = grCpp2Parser.NewplacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_newplacement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(grCpp2Parser.LeftParen)
            self.state = 732
            self.expressionlist()
            self.state = 733
            self.match(grCpp2Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewtypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.TypespecifierseqContext,0)


        def newdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.NewdeclaratorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_newtypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewtypeid" ):
                listener.enterNewtypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewtypeid" ):
                listener.exitNewtypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewtypeid" ):
                return visitor.visitNewtypeid(self)
            else:
                return visitor.visitChildren(self)




    def newtypeid(self):

        localctx = grCpp2Parser.NewtypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_newtypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.typespecifierseq()
            self.state = 737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 736
                self.newdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(grCpp2Parser.PtroperatorContext,0)


        def newdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.NewdeclaratorContext,0)


        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.NoptrnewdeclaratorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_newdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewdeclarator" ):
                listener.enterNewdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewdeclarator" ):
                listener.exitNewdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewdeclarator" ):
                return visitor.visitNewdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def newdeclarator(self):

        localctx = grCpp2Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_newdeclarator)
        try:
            self.state = 744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 86, 90, 113, 122, 127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.ptroperator()
                self.state = 741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 740
                    self.newdeclarator()


                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.noptrnewdeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrnewdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(grCpp2Parser.LeftBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionContext,0)


        def RightBracket(self):
            return self.getToken(grCpp2Parser.RightBracket, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.NoptrnewdeclaratorContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_noptrnewdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrnewdeclarator" ):
                listener.enterNoptrnewdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrnewdeclarator" ):
                listener.exitNoptrnewdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrnewdeclarator" ):
                return visitor.visitNoptrnewdeclarator(self)
            else:
                return visitor.visitChildren(self)



    def noptrnewdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.NoptrnewdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_noptrnewdeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.match(grCpp2Parser.LeftBracket)
            self.state = 748
            self.expression(0)
            self.state = 749
            self.match(grCpp2Parser.RightBracket)
            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 750
                self.attributespecifierseq(0)


            self._ctx.stop = self._input.LT(-1)
            self.state = 762
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.NoptrnewdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrnewdeclarator)
                    self.state = 753
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 754
                    self.match(grCpp2Parser.LeftBracket)
                    self.state = 755
                    self.constantexpression()
                    self.state = 756
                    self.match(grCpp2Parser.RightBracket)
                    self.state = 758
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                    if la_ == 1:
                        self.state = 757
                        self.attributespecifierseq(0)

             
                self.state = 764
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NewinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionlistContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(grCpp2Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_newinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewinitializer" ):
                listener.enterNewinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewinitializer" ):
                listener.exitNewinitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewinitializer" ):
                return visitor.visitNewinitializer(self)
            else:
                return visitor.visitChildren(self)




    def newinitializer(self):

        localctx = grCpp2Parser.NewinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_newinitializer)
        self._la = 0 # Token type
        try:
            self.state = 771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 765
                self.match(grCpp2Parser.LeftParen)
                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4965285389904001232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8928386260247685965) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 8129) != 0):
                    self.state = 766
                    self.expressionlist()


                self.state = 769
                self.match(grCpp2Parser.RightParen)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 770
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(grCpp2Parser.Delete, 0)

        def castexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.CastexpressionContext,0)


        def Doublecolon(self):
            return self.getToken(grCpp2Parser.Doublecolon, 0)

        def LeftBracket(self):
            return self.getToken(grCpp2Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(grCpp2Parser.RightBracket, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_deleteexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteexpression" ):
                listener.enterDeleteexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteexpression" ):
                listener.exitDeleteexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteexpression" ):
                return visitor.visitDeleteexpression(self)
            else:
                return visitor.visitChildren(self)




    def deleteexpression(self):

        localctx = grCpp2Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_deleteexpression)
        self._la = 0 # Token type
        try:
            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==122:
                    self.state = 773
                    self.match(grCpp2Parser.Doublecolon)


                self.state = 776
                self.match(grCpp2Parser.Delete)
                self.state = 777
                self.castexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==122:
                    self.state = 778
                    self.match(grCpp2Parser.Doublecolon)


                self.state = 781
                self.match(grCpp2Parser.Delete)
                self.state = 782
                self.match(grCpp2Parser.LeftBracket)
                self.state = 783
                self.match(grCpp2Parser.RightBracket)
                self.state = 784
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoexceptexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(grCpp2Parser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_noexceptexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptexpression" ):
                listener.enterNoexceptexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptexpression" ):
                listener.exitNoexceptexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoexceptexpression" ):
                return visitor.visitNoexceptexpression(self)
            else:
                return visitor.visitChildren(self)




    def noexceptexpression(self):

        localctx = grCpp2Parser.NoexceptexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_noexceptexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.match(grCpp2Parser.Noexcept)
            self.state = 788
            self.match(grCpp2Parser.LeftParen)
            self.state = 789
            self.expression(0)
            self.state = 790
            self.match(grCpp2Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.UnaryexpressionContext,0)


        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(grCpp2Parser.ThetypeidContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def castexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.CastexpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_castexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastexpression" ):
                listener.enterCastexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastexpression" ):
                listener.exitCastexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastexpression" ):
                return visitor.visitCastexpression(self)
            else:
                return visitor.visitChildren(self)




    def castexpression(self):

        localctx = grCpp2Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_castexpression)
        try:
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.unaryexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self.match(grCpp2Parser.LeftParen)
                self.state = 794
                self.thetypeid()
                self.state = 795
                self.match(grCpp2Parser.RightParen)
                self.state = 796
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.CastexpressionContext,0)


        def pmexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.PmexpressionContext,0)


        def DotStar(self):
            return self.getToken(grCpp2Parser.DotStar, 0)

        def ArrowStar(self):
            return self.getToken(grCpp2Parser.ArrowStar, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_pmexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPmexpression" ):
                listener.enterPmexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPmexpression" ):
                listener.exitPmexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmexpression" ):
                return visitor.visitPmexpression(self)
            else:
                return visitor.visitChildren(self)



    def pmexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.PmexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_pmexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.castexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 811
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 809
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                    if la_ == 1:
                        localctx = grCpp2Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 803
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 804
                        self.match(grCpp2Parser.DotStar)
                        self.state = 805
                        self.castexpression()
                        pass

                    elif la_ == 2:
                        localctx = grCpp2Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 806
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 807
                        self.match(grCpp2Parser.ArrowStar)
                        self.state = 808
                        self.castexpression()
                        pass

             
                self.state = 813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.PmexpressionContext,0)


        def multiplicativeexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.MultiplicativeexpressionContext,0)


        def Star(self):
            return self.getToken(grCpp2Parser.Star, 0)

        def Div(self):
            return self.getToken(grCpp2Parser.Div, 0)

        def Mod(self):
            return self.getToken(grCpp2Parser.Mod, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_multiplicativeexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeexpression" ):
                listener.enterMultiplicativeexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeexpression" ):
                listener.exitMultiplicativeexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeexpression" ):
                return visitor.visitMultiplicativeexpression(self)
            else:
                return visitor.visitChildren(self)



    def multiplicativeexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.MultiplicativeexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_multiplicativeexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.pmexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 828
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 826
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                    if la_ == 1:
                        localctx = grCpp2Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 817
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 818
                        self.match(grCpp2Parser.Star)
                        self.state = 819
                        self.pmexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = grCpp2Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 820
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 821
                        self.match(grCpp2Parser.Div)
                        self.state = 822
                        self.pmexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = grCpp2Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 823
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 824
                        self.match(grCpp2Parser.Mod)
                        self.state = 825
                        self.pmexpression(0)
                        pass

             
                self.state = 830
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.MultiplicativeexpressionContext,0)


        def additiveexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.AdditiveexpressionContext,0)


        def Plus(self):
            return self.getToken(grCpp2Parser.Plus, 0)

        def Minus(self):
            return self.getToken(grCpp2Parser.Minus, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_additiveexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveexpression" ):
                listener.enterAdditiveexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveexpression" ):
                listener.exitAdditiveexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveexpression" ):
                return visitor.visitAdditiveexpression(self)
            else:
                return visitor.visitChildren(self)



    def additiveexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.AdditiveexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_additiveexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.multiplicativeexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 842
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 840
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                    if la_ == 1:
                        localctx = grCpp2Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 834
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 835
                        self.match(grCpp2Parser.Plus)
                        self.state = 836
                        self.multiplicativeexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = grCpp2Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 837
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 838
                        self.match(grCpp2Parser.Minus)
                        self.state = 839
                        self.multiplicativeexpression(0)
                        pass

             
                self.state = 844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.AdditiveexpressionContext,0)


        def shiftexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ShiftexpressionContext,0)


        def shiftoperator(self):
            return self.getTypedRuleContext(grCpp2Parser.ShiftoperatorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_shiftexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftexpression" ):
                listener.enterShiftexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftexpression" ):
                listener.exitShiftexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftexpression" ):
                return visitor.visitShiftexpression(self)
            else:
                return visitor.visitChildren(self)



    def shiftexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.ShiftexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_shiftexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.additiveexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 854
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                    self.state = 848
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 849
                    self.shiftoperator()
                    self.state = 850
                    self.additiveexpression(0) 
                self.state = 856
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RightShift(self):
            return self.getToken(grCpp2Parser.RightShift, 0)

        def LeftShift(self):
            return self.getToken(grCpp2Parser.LeftShift, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_shiftoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftoperator" ):
                listener.enterShiftoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftoperator" ):
                listener.exitShiftoperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftoperator" ):
                return visitor.visitShiftoperator(self)
            else:
                return visitor.visitChildren(self)




    def shiftoperator(self):

        localctx = grCpp2Parser.ShiftoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_shiftoperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            _la = self._input.LA(1)
            if not(_la==105 or _la==106):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ShiftexpressionContext,0)


        def relationalexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.RelationalexpressionContext,0)


        def Less(self):
            return self.getToken(grCpp2Parser.Less, 0)

        def Greater(self):
            return self.getToken(grCpp2Parser.Greater, 0)

        def LessEqual(self):
            return self.getToken(grCpp2Parser.LessEqual, 0)

        def GreaterEqual(self):
            return self.getToken(grCpp2Parser.GreaterEqual, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_relationalexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression" ):
                listener.enterRelationalexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression" ):
                listener.exitRelationalexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalexpression" ):
                return visitor.visitRelationalexpression(self)
            else:
                return visitor.visitChildren(self)



    def relationalexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_relationalexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.shiftexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 876
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 874
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                    if la_ == 1:
                        localctx = grCpp2Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 862
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 863
                        self.match(grCpp2Parser.Less)
                        self.state = 864
                        self.shiftexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = grCpp2Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 865
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 866
                        self.match(grCpp2Parser.Greater)
                        self.state = 867
                        self.shiftexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = grCpp2Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 868
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 869
                        self.match(grCpp2Parser.LessEqual)
                        self.state = 870
                        self.shiftexpression(0)
                        pass

                    elif la_ == 4:
                        localctx = grCpp2Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 871
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 872
                        self.match(grCpp2Parser.GreaterEqual)
                        self.state = 873
                        self.shiftexpression(0)
                        pass

             
                self.state = 878
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.RelationalexpressionContext,0)


        def equalityexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.EqualityexpressionContext,0)


        def Equal(self):
            return self.getToken(grCpp2Parser.Equal, 0)

        def NotEqual(self):
            return self.getToken(grCpp2Parser.NotEqual, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_equalityexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityexpression" ):
                listener.enterEqualityexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityexpression" ):
                listener.exitEqualityexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityexpression" ):
                return visitor.visitEqualityexpression(self)
            else:
                return visitor.visitChildren(self)



    def equalityexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_equalityexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 890
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 888
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                    if la_ == 1:
                        localctx = grCpp2Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 882
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 883
                        self.match(grCpp2Parser.Equal)
                        self.state = 884
                        self.relationalexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = grCpp2Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 885
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 886
                        self.match(grCpp2Parser.NotEqual)
                        self.state = 887
                        self.relationalexpression(0)
                        pass

             
                self.state = 892
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AndexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.EqualityexpressionContext,0)


        def andexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.AndexpressionContext,0)


        def And(self):
            return self.getToken(grCpp2Parser.And, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_andexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndexpression" ):
                listener.enterAndexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndexpression" ):
                listener.exitAndexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndexpression" ):
                return visitor.visitAndexpression(self)
            else:
                return visitor.visitChildren(self)



    def andexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.AndexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_andexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.equalityexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 901
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.AndexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andexpression)
                    self.state = 896
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 897
                    self.match(grCpp2Parser.And)
                    self.state = 898
                    self.equalityexpression(0) 
                self.state = 903
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExclusiveorexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.AndexpressionContext,0)


        def exclusiveorexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExclusiveorexpressionContext,0)


        def Caret(self):
            return self.getToken(grCpp2Parser.Caret, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_exclusiveorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveorexpression" ):
                listener.enterExclusiveorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveorexpression" ):
                listener.exitExclusiveorexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveorexpression" ):
                return visitor.visitExclusiveorexpression(self)
            else:
                return visitor.visitChildren(self)



    def exclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.ExclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_exclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.andexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 912
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.ExclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveorexpression)
                    self.state = 907
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 908
                    self.match(grCpp2Parser.Caret)
                    self.state = 909
                    self.andexpression(0) 
                self.state = 914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InclusiveorexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExclusiveorexpressionContext,0)


        def inclusiveorexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.InclusiveorexpressionContext,0)


        def Or(self):
            return self.getToken(grCpp2Parser.Or, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_inclusiveorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveorexpression" ):
                listener.enterInclusiveorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveorexpression" ):
                listener.exitInclusiveorexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusiveorexpression" ):
                return visitor.visitInclusiveorexpression(self)
            else:
                return visitor.visitChildren(self)



    def inclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.InclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_inclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.exclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 923
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.InclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveorexpression)
                    self.state = 918
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 919
                    self.match(grCpp2Parser.Or)
                    self.state = 920
                    self.exclusiveorexpression(0) 
                self.state = 925
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalandexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.InclusiveorexpressionContext,0)


        def logicalandexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.LogicalandexpressionContext,0)


        def AndAnd(self):
            return self.getToken(grCpp2Parser.AndAnd, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_logicalandexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalandexpression" ):
                listener.enterLogicalandexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalandexpression" ):
                listener.exitLogicalandexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalandexpression" ):
                return visitor.visitLogicalandexpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalandexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.LogicalandexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_logicalandexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.inclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 934
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.LogicalandexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                    self.state = 929
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 930
                    self.match(grCpp2Parser.AndAnd)
                    self.state = 931
                    self.inclusiveorexpression(0) 
                self.state = 936
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalorexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalandexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.LogicalandexpressionContext,0)


        def logicalorexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.LogicalorexpressionContext,0)


        def OrOr(self):
            return self.getToken(grCpp2Parser.OrOr, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_logicalorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalorexpression" ):
                listener.enterLogicalorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalorexpression" ):
                listener.exitLogicalorexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalorexpression" ):
                return visitor.visitLogicalorexpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.LogicalorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_logicalorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.logicalandexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 945
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.LogicalorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                    self.state = 940
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 941
                    self.match(grCpp2Parser.OrOr)
                    self.state = 942
                    self.logicalandexpression(0) 
                self.state = 947
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConditionalexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.LogicalorexpressionContext,0)


        def Question(self):
            return self.getToken(grCpp2Parser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(grCpp2Parser.Colon, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.AssignmentexpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_conditionalexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalexpression" ):
                listener.enterConditionalexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalexpression" ):
                listener.exitConditionalexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalexpression" ):
                return visitor.visitConditionalexpression(self)
            else:
                return visitor.visitChildren(self)




    def conditionalexpression(self):

        localctx = grCpp2Parser.ConditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_conditionalexpression)
        try:
            self.state = 955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 948
                self.logicalorexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 949
                self.logicalorexpression(0)
                self.state = 950
                self.match(grCpp2Parser.Question)
                self.state = 951
                self.expression(0)
                self.state = 952
                self.match(grCpp2Parser.Colon)
                self.state = 953
                self.assignmentexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ConditionalexpressionContext,0)


        def logicalorexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.LogicalorexpressionContext,0)


        def assignmentoperator(self):
            return self.getTypedRuleContext(grCpp2Parser.AssignmentoperatorContext,0)


        def initializerclause(self):
            return self.getTypedRuleContext(grCpp2Parser.InitializerclauseContext,0)


        def throwexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ThrowexpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_assignmentexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentexpression" ):
                listener.enterAssignmentexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentexpression" ):
                listener.exitAssignmentexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentexpression" ):
                return visitor.visitAssignmentexpression(self)
            else:
                return visitor.visitChildren(self)




    def assignmentexpression(self):

        localctx = grCpp2Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_assignmentexpression)
        try:
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.conditionalexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.logicalorexpression(0)
                self.state = 959
                self.assignmentoperator()
                self.state = 960
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 962
                self.throwexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(grCpp2Parser.Assign, 0)

        def StarAssign(self):
            return self.getToken(grCpp2Parser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(grCpp2Parser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(grCpp2Parser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(grCpp2Parser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(grCpp2Parser.MinusAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(grCpp2Parser.RightShiftAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(grCpp2Parser.LeftShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(grCpp2Parser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(grCpp2Parser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(grCpp2Parser.OrAssign, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_assignmentoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator" ):
                listener.enterAssignmentoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator" ):
                listener.exitAssignmentoperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator" ):
                return visitor.visitAssignmentoperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentoperator(self):

        localctx = grCpp2Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_assignmentoperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            _la = self._input.LA(1)
            if not(((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 26617) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.AssignmentexpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.assignmentexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 975
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 970
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 971
                    self.match(grCpp2Parser.Comma)
                    self.state = 972
                    self.assignmentexpression() 
                self.state = 977
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ConditionalexpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_constantexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantexpression" ):
                listener.enterConstantexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantexpression" ):
                listener.exitConstantexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantexpression" ):
                return visitor.visitConstantexpression(self)
            else:
                return visitor.visitChildren(self)




    def constantexpression(self):

        localctx = grCpp2Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_constantexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.conditionalexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.LabeledstatementContext,0)


        def expressionstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionstatementContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.CompoundstatementContext,0)


        def selectionstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.SelectionstatementContext,0)


        def iterationstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.IterationstatementContext,0)


        def jumpstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.JumpstatementContext,0)


        def declarationstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclarationstatementContext,0)


        def tryblock(self):
            return self.getTypedRuleContext(grCpp2Parser.TryblockContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = grCpp2Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 980
                self.labeledstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 982
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 981
                    self.attributespecifierseq(0)


                self.state = 984
                self.expressionstatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 985
                    self.attributespecifierseq(0)


                self.state = 988
                self.compoundstatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 989
                    self.attributespecifierseq(0)


                self.state = 992
                self.selectionstatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 993
                    self.attributespecifierseq(0)


                self.state = 996
                self.iterationstatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 997
                    self.attributespecifierseq(0)


                self.state = 1000
                self.jumpstatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1001
                self.declarationstatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1002
                    self.attributespecifierseq(0)


                self.state = 1005
                self.tryblock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def Colon(self):
            return self.getToken(grCpp2Parser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(grCpp2Parser.StatementContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def Case(self):
            return self.getToken(grCpp2Parser.Case, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ConstantexpressionContext,0)


        def Default(self):
            return self.getToken(grCpp2Parser.Default, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_labeledstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledstatement" ):
                listener.enterLabeledstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledstatement" ):
                listener.exitLabeledstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledstatement" ):
                return visitor.visitLabeledstatement(self)
            else:
                return visitor.visitChildren(self)




    def labeledstatement(self):

        localctx = grCpp2Parser.LabeledstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_labeledstatement)
        self._la = 0 # Token type
        try:
            self.state = 1028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1008
                    self.attributespecifierseq(0)


                self.state = 1011
                self.match(grCpp2Parser.Identifier)
                self.state = 1012
                self.match(grCpp2Parser.Colon)
                self.state = 1013
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1014
                    self.attributespecifierseq(0)


                self.state = 1017
                self.match(grCpp2Parser.Case)
                self.state = 1018
                self.constantexpression()
                self.state = 1019
                self.match(grCpp2Parser.Colon)
                self.state = 1020
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1022
                    self.attributespecifierseq(0)


                self.state = 1025
                self.match(grCpp2Parser.Default)
                self.state = 1026
                self.match(grCpp2Parser.Colon)
                self.state = 1027
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_expressionstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionstatement" ):
                listener.enterExpressionstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionstatement" ):
                listener.exitExpressionstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionstatement" ):
                return visitor.visitExpressionstatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionstatement(self):

        localctx = grCpp2Parser.ExpressionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_expressionstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4965285389904001232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8928386260247948109) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 8129) != 0):
                self.state = 1030
                self.expression(0)


            self.state = 1033
            self.match(grCpp2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(grCpp2Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(grCpp2Parser.RightBrace, 0)

        def statementseq(self):
            return self.getTypedRuleContext(grCpp2Parser.StatementseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_compoundstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundstatement" ):
                listener.enterCompoundstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundstatement" ):
                listener.exitCompoundstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundstatement" ):
                return visitor.visitCompoundstatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundstatement(self):

        localctx = grCpp2Parser.CompoundstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_compoundstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.match(grCpp2Parser.LeftBrace)
            self.state = 1037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2306898542825833480) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -3739676539563442177) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 8129) != 0):
                self.state = 1036
                self.statementseq(0)


            self.state = 1039
            self.match(grCpp2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(grCpp2Parser.StatementContext,0)


        def statementseq(self):
            return self.getTypedRuleContext(grCpp2Parser.StatementseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_statementseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementseq" ):
                listener.enterStatementseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementseq" ):
                listener.exitStatementseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementseq" ):
                return visitor.visitStatementseq(self)
            else:
                return visitor.visitChildren(self)



    def statementseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.StatementseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_statementseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.statement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1048
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.StatementseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_statementseq)
                    self.state = 1044
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1045
                    self.statement() 
                self.state = 1050
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SelectionstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(grCpp2Parser.If, 0)

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def condition(self):
            return self.getTypedRuleContext(grCpp2Parser.ConditionContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(grCpp2Parser.StatementContext)
            else:
                return self.getTypedRuleContext(grCpp2Parser.StatementContext,i)


        def Else(self):
            return self.getToken(grCpp2Parser.Else, 0)

        def Switch(self):
            return self.getToken(grCpp2Parser.Switch, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_selectionstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionstatement" ):
                listener.enterSelectionstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionstatement" ):
                listener.exitSelectionstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionstatement" ):
                return visitor.visitSelectionstatement(self)
            else:
                return visitor.visitChildren(self)




    def selectionstatement(self):

        localctx = grCpp2Parser.SelectionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_selectionstatement)
        try:
            self.state = 1071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1051
                self.match(grCpp2Parser.If)
                self.state = 1052
                self.match(grCpp2Parser.LeftParen)
                self.state = 1053
                self.condition()
                self.state = 1054
                self.match(grCpp2Parser.RightParen)
                self.state = 1055
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1057
                self.match(grCpp2Parser.If)
                self.state = 1058
                self.match(grCpp2Parser.LeftParen)
                self.state = 1059
                self.condition()
                self.state = 1060
                self.match(grCpp2Parser.RightParen)
                self.state = 1061
                self.statement()
                self.state = 1062
                self.match(grCpp2Parser.Else)
                self.state = 1063
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1065
                self.match(grCpp2Parser.Switch)
                self.state = 1066
                self.match(grCpp2Parser.LeftParen)
                self.state = 1067
                self.condition()
                self.state = 1068
                self.match(grCpp2Parser.RightParen)
                self.state = 1069
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(grCpp2Parser.Assign, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(grCpp2Parser.InitializerclauseContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(grCpp2Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = grCpp2Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.state = 1089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1073
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1074
                    self.attributespecifierseq(0)


                self.state = 1077
                self.declspecifierseq()
                self.state = 1078
                self.declarator()
                self.state = 1079
                self.match(grCpp2Parser.Assign)
                self.state = 1080
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1082
                    self.attributespecifierseq(0)


                self.state = 1085
                self.declspecifierseq()
                self.state = 1086
                self.declarator()
                self.state = 1087
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(grCpp2Parser.While, 0)

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def condition(self):
            return self.getTypedRuleContext(grCpp2Parser.ConditionContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(grCpp2Parser.StatementContext,0)


        def Do(self):
            return self.getToken(grCpp2Parser.Do, 0)

        def expression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionContext,0)


        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def For(self):
            return self.getToken(grCpp2Parser.For, 0)

        def forinitstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.ForinitstatementContext,0)


        def forrangedeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.ForrangedeclarationContext,0)


        def Colon(self):
            return self.getToken(grCpp2Parser.Colon, 0)

        def forrangeinitializer(self):
            return self.getTypedRuleContext(grCpp2Parser.ForrangeinitializerContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_iterationstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationstatement" ):
                listener.enterIterationstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationstatement" ):
                listener.exitIterationstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationstatement" ):
                return visitor.visitIterationstatement(self)
            else:
                return visitor.visitChildren(self)




    def iterationstatement(self):

        localctx = grCpp2Parser.IterationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_iterationstatement)
        self._la = 0 # Token type
        try:
            self.state = 1126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1091
                self.match(grCpp2Parser.While)
                self.state = 1092
                self.match(grCpp2Parser.LeftParen)
                self.state = 1093
                self.condition()
                self.state = 1094
                self.match(grCpp2Parser.RightParen)
                self.state = 1095
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1097
                self.match(grCpp2Parser.Do)
                self.state = 1098
                self.statement()
                self.state = 1099
                self.match(grCpp2Parser.While)
                self.state = 1100
                self.match(grCpp2Parser.LeftParen)
                self.state = 1101
                self.expression(0)
                self.state = 1102
                self.match(grCpp2Parser.RightParen)
                self.state = 1103
                self.match(grCpp2Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1105
                self.match(grCpp2Parser.For)
                self.state = 1106
                self.match(grCpp2Parser.LeftParen)
                self.state = 1107
                self.forinitstatement()
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3608441145833817896) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8928386260247945477) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 8129) != 0):
                    self.state = 1108
                    self.condition()


                self.state = 1111
                self.match(grCpp2Parser.Semi)
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4965285389904001232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8928386260247948109) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 8129) != 0):
                    self.state = 1112
                    self.expression(0)


                self.state = 1115
                self.match(grCpp2Parser.RightParen)
                self.state = 1116
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1118
                self.match(grCpp2Parser.For)
                self.state = 1119
                self.match(grCpp2Parser.LeftParen)
                self.state = 1120
                self.forrangedeclaration()
                self.state = 1121
                self.match(grCpp2Parser.Colon)
                self.state = 1122
                self.forrangeinitializer()
                self.state = 1123
                self.match(grCpp2Parser.RightParen)
                self.state = 1124
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForinitstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionstatementContext,0)


        def simpledeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.SimpledeclarationContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_forinitstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForinitstatement" ):
                listener.enterForinitstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForinitstatement" ):
                listener.exitForinitstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForinitstatement" ):
                return visitor.visitForinitstatement(self)
            else:
                return visitor.visitChildren(self)




    def forinitstatement(self):

        localctx = grCpp2Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forinitstatement)
        try:
            self.state = 1130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1128
                self.expressionstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1129
                self.simpledeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForrangedeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_forrangedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangedeclaration" ):
                listener.enterForrangedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangedeclaration" ):
                listener.exitForrangedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForrangedeclaration" ):
                return visitor.visitForrangedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def forrangedeclaration(self):

        localctx = grCpp2Parser.ForrangedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_forrangedeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==80:
                self.state = 1132
                self.attributespecifierseq(0)


            self.state = 1135
            self.declspecifierseq()
            self.state = 1136
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForrangeinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(grCpp2Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_forrangeinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangeinitializer" ):
                listener.enterForrangeinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangeinitializer" ):
                listener.exitForrangeinitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForrangeinitializer" ):
                return visitor.visitForrangeinitializer(self)
            else:
                return visitor.visitChildren(self)




    def forrangeinitializer(self):

        localctx = grCpp2Parser.ForrangeinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_forrangeinitializer)
        try:
            self.state = 1140
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 6, 7, 11, 12, 13, 17, 19, 21, 23, 24, 30, 32, 38, 39, 42, 43, 44, 45, 51, 53, 54, 55, 58, 62, 64, 65, 68, 69, 71, 74, 76, 78, 80, 84, 85, 86, 90, 91, 92, 93, 115, 116, 122, 127, 128, 134, 135, 136, 137, 138, 139, 140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1138
                self.expression(0)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1139
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(grCpp2Parser.Break, 0)

        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def Continue(self):
            return self.getToken(grCpp2Parser.Continue, 0)

        def Return(self):
            return self.getToken(grCpp2Parser.Return, 0)

        def expression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(grCpp2Parser.BracedinitlistContext,0)


        def Goto(self):
            return self.getToken(grCpp2Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_jumpstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement" ):
                listener.enterJumpstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement" ):
                listener.exitJumpstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpstatement" ):
                return visitor.visitJumpstatement(self)
            else:
                return visitor.visitChildren(self)




    def jumpstatement(self):

        localctx = grCpp2Parser.JumpstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_jumpstatement)
        self._la = 0 # Token type
        try:
            self.state = 1158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1142
                self.match(grCpp2Parser.Break)
                self.state = 1143
                self.match(grCpp2Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1144
                self.match(grCpp2Parser.Continue)
                self.state = 1145
                self.match(grCpp2Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1146
                self.match(grCpp2Parser.Return)
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4965285389904001232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8928386260247948109) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 8129) != 0):
                    self.state = 1147
                    self.expression(0)


                self.state = 1150
                self.match(grCpp2Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1151
                self.match(grCpp2Parser.Return)
                self.state = 1152
                self.bracedinitlist()
                self.state = 1153
                self.match(grCpp2Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1155
                self.match(grCpp2Parser.Goto)
                self.state = 1156
                self.match(grCpp2Parser.Identifier)
                self.state = 1157
                self.match(grCpp2Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.BlockdeclarationContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_declarationstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationstatement" ):
                listener.enterDeclarationstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationstatement" ):
                listener.exitDeclarationstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationstatement" ):
                return visitor.visitDeclarationstatement(self)
            else:
                return visitor.visitChildren(self)




    def declarationstatement(self):

        localctx = grCpp2Parser.DeclarationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_declarationstatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.blockdeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclarationContext,0)


        def declarationseq(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_declarationseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationseq" ):
                listener.enterDeclarationseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationseq" ):
                listener.exitDeclarationseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationseq" ):
                return visitor.visitDeclarationseq(self)
            else:
                return visitor.visitChildren(self)



    def declarationseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.DeclarationseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_declarationseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1169
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.DeclarationseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationseq)
                    self.state = 1165
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1166
                    self.declaration() 
                self.state = 1171
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.BlockdeclarationContext,0)


        def functiondefinition(self):
            return self.getTypedRuleContext(grCpp2Parser.FunctiondefinitionContext,0)


        def templatedeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.TemplatedeclarationContext,0)


        def explicitinstantiation(self):
            return self.getTypedRuleContext(grCpp2Parser.ExplicitinstantiationContext,0)


        def explicitspecialization(self):
            return self.getTypedRuleContext(grCpp2Parser.ExplicitspecializationContext,0)


        def linkagespecification(self):
            return self.getTypedRuleContext(grCpp2Parser.LinkagespecificationContext,0)


        def namespacedefinition(self):
            return self.getTypedRuleContext(grCpp2Parser.NamespacedefinitionContext,0)


        def emptydeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.EmptydeclarationContext,0)


        def attributedeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributedeclarationContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = grCpp2Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_declaration)
        try:
            self.state = 1181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1172
                self.blockdeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1173
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1174
                self.templatedeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1175
                self.explicitinstantiation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1176
                self.explicitspecialization()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1177
                self.linkagespecification()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1178
                self.namespacedefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1179
                self.emptydeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1180
                self.attributedeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpledeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.SimpledeclarationContext,0)


        def asmdefinition(self):
            return self.getTypedRuleContext(grCpp2Parser.AsmdefinitionContext,0)


        def namespacealiasdefinition(self):
            return self.getTypedRuleContext(grCpp2Parser.NamespacealiasdefinitionContext,0)


        def usingdeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.UsingdeclarationContext,0)


        def usingdirective(self):
            return self.getTypedRuleContext(grCpp2Parser.UsingdirectiveContext,0)


        def static_assertdeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.Static_assertdeclarationContext,0)


        def aliasdeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.AliasdeclarationContext,0)


        def opaqueenumdeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.OpaqueenumdeclarationContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_blockdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration" ):
                listener.enterBlockdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration" ):
                listener.exitBlockdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration" ):
                return visitor.visitBlockdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def blockdeclaration(self):

        localctx = grCpp2Parser.BlockdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_blockdeclaration)
        try:
            self.state = 1191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1183
                self.simpledeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1184
                self.asmdefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1185
                self.namespacealiasdefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1186
                self.usingdeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1187
                self.usingdirective()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1188
                self.static_assertdeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1189
                self.aliasdeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1190
                self.opaqueenumdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(grCpp2Parser.Using, 0)

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(grCpp2Parser.Assign, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(grCpp2Parser.ThetypeidContext,0)


        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_aliasdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasdeclaration" ):
                listener.enterAliasdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasdeclaration" ):
                listener.exitAliasdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasdeclaration" ):
                return visitor.visitAliasdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def aliasdeclaration(self):

        localctx = grCpp2Parser.AliasdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_aliasdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.match(grCpp2Parser.Using)
            self.state = 1194
            self.match(grCpp2Parser.Identifier)
            self.state = 1196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==80:
                self.state = 1195
                self.attributespecifierseq(0)


            self.state = 1198
            self.match(grCpp2Parser.Assign)
            self.state = 1199
            self.thetypeid()
            self.state = 1200
            self.match(grCpp2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpledeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclspecifierseqContext,0)


        def initdeclaratorlist(self):
            return self.getTypedRuleContext(grCpp2Parser.InitdeclaratorlistContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_simpledeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpledeclaration" ):
                listener.enterSimpledeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpledeclaration" ):
                listener.exitSimpledeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpledeclaration" ):
                return visitor.visitSimpledeclaration(self)
            else:
                return visitor.visitChildren(self)




    def simpledeclaration(self):

        localctx = grCpp2Parser.SimpledeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_simpledeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1216
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 7, 11, 12, 13, 14, 15, 16, 19, 23, 26, 27, 29, 32, 34, 37, 38, 39, 40, 45, 50, 53, 54, 56, 59, 63, 67, 69, 70, 71, 73, 74, 75, 76, 78, 86, 90, 92, 113, 122, 123, 126, 127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1203
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 1202
                    self.declspecifierseq()


                self.state = 1206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19 or _la==45 or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 862051475935489) != 0):
                    self.state = 1205
                    self.initdeclaratorlist(0)


                self.state = 1208
                self.match(grCpp2Parser.Semi)
                pass
            elif token in [3, 80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.attributespecifierseq(0)
                self.state = 1211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 1210
                    self.declspecifierseq()


                self.state = 1213
                self.initdeclaratorlist(0)
                self.state = 1214
                self.match(grCpp2Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Static_assertdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static_assert(self):
            return self.getToken(grCpp2Parser.Static_assert, 0)

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ConstantexpressionContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def Stringliteral(self):
            return self.getToken(grCpp2Parser.Stringliteral, 0)

        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_static_assertdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_assertdeclaration" ):
                listener.enterStatic_assertdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_assertdeclaration" ):
                listener.exitStatic_assertdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatic_assertdeclaration" ):
                return visitor.visitStatic_assertdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def static_assertdeclaration(self):

        localctx = grCpp2Parser.Static_assertdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_static_assertdeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self.match(grCpp2Parser.Static_assert)
            self.state = 1219
            self.match(grCpp2Parser.LeftParen)
            self.state = 1220
            self.constantexpression()
            self.state = 1221
            self.match(grCpp2Parser.Comma)
            self.state = 1222
            self.match(grCpp2Parser.Stringliteral)
            self.state = 1223
            self.match(grCpp2Parser.RightParen)
            self.state = 1224
            self.match(grCpp2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptydeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_emptydeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptydeclaration" ):
                listener.enterEmptydeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptydeclaration" ):
                listener.exitEmptydeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptydeclaration" ):
                return visitor.visitEmptydeclaration(self)
            else:
                return visitor.visitChildren(self)




    def emptydeclaration(self):

        localctx = grCpp2Parser.EmptydeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_emptydeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.match(grCpp2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributedeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_attributedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributedeclaration" ):
                listener.enterAttributedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributedeclaration" ):
                listener.exitAttributedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributedeclaration" ):
                return visitor.visitAttributedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def attributedeclaration(self):

        localctx = grCpp2Parser.AttributedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_attributedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.attributespecifierseq(0)
            self.state = 1229
            self.match(grCpp2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageclassspecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.StorageclassspecifierContext,0)


        def typespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.TypespecifierContext,0)


        def functionspecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.FunctionspecifierContext,0)


        def Friend(self):
            return self.getToken(grCpp2Parser.Friend, 0)

        def Typedef(self):
            return self.getToken(grCpp2Parser.Typedef, 0)

        def Constexpr(self):
            return self.getToken(grCpp2Parser.Constexpr, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_declspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier" ):
                listener.enterDeclspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier" ):
                listener.exitDeclspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier" ):
                return visitor.visitDeclspecifier(self)
            else:
                return visitor.visitChildren(self)




    def declspecifier(self):

        localctx = grCpp2Parser.DeclspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_declspecifier)
        try:
            self.state = 1237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29, 40, 50, 56, 63]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1231
                self.storageclassspecifier()
                pass
            elif token in [6, 7, 11, 12, 13, 14, 15, 19, 23, 26, 32, 38, 39, 53, 54, 59, 69, 70, 71, 74, 75, 76, 122, 127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1232
                self.typespecifier()
                pass
            elif token in [27, 37, 73]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1233
                self.functionspecifier()
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1234
                self.match(grCpp2Parser.Friend)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1235
                self.match(grCpp2Parser.Typedef)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1236
                self.match(grCpp2Parser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclspecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclspecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclspecifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_declspecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifierseq" ):
                listener.enterDeclspecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifierseq" ):
                listener.exitDeclspecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifierseq" ):
                return visitor.visitDeclspecifierseq(self)
            else:
                return visitor.visitChildren(self)




    def declspecifierseq(self):

        localctx = grCpp2Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_declspecifierseq)
        try:
            self.state = 1246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1239
                self.declspecifier()
                self.state = 1241
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1240
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1243
                self.declspecifier()
                self.state = 1244
                self.declspecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageclassspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Register(self):
            return self.getToken(grCpp2Parser.Register, 0)

        def Static(self):
            return self.getToken(grCpp2Parser.Static, 0)

        def Thread_local(self):
            return self.getToken(grCpp2Parser.Thread_local, 0)

        def Extern(self):
            return self.getToken(grCpp2Parser.Extern, 0)

        def Mutable(self):
            return self.getToken(grCpp2Parser.Mutable, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_storageclassspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier" ):
                listener.enterStorageclassspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier" ):
                listener.exitStorageclassspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageclassspecifier" ):
                return visitor.visitStorageclassspecifier(self)
            else:
                return visitor.visitChildren(self)




    def storageclassspecifier(self):

        localctx = grCpp2Parser.StorageclassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_storageclassspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -9150187442861506560) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(grCpp2Parser.Inline, 0)

        def Virtual(self):
            return self.getToken(grCpp2Parser.Virtual, 0)

        def Explicit(self):
            return self.getToken(grCpp2Parser.Explicit, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_functionspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionspecifier" ):
                listener.enterFunctionspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionspecifier" ):
                listener.exitFunctionspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionspecifier" ):
                return visitor.visitFunctionspecifier(self)
            else:
                return visitor.visitChildren(self)




    def functionspecifier(self):

        localctx = grCpp2Parser.FunctionspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_functionspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            _la = self._input.LA(1)
            if not(((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & 70368744178689) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedefnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_typedefname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefname" ):
                listener.enterTypedefname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefname" ):
                listener.exitTypedefname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedefname" ):
                return visitor.visitTypedefname(self)
            else:
                return visitor.visitChildren(self)




    def typedefname(self):

        localctx = grCpp2Parser.TypedefnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_typedefname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(grCpp2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.TrailingtypespecifierContext,0)


        def classspecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.ClassspecifierContext,0)


        def enumspecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.EnumspecifierContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_typespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifier" ):
                listener.enterTypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifier" ):
                listener.exitTypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifier" ):
                return visitor.visitTypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def typespecifier(self):

        localctx = grCpp2Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_typespecifier)
        try:
            self.state = 1257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1254
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1255
                self.classspecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1256
                self.enumspecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingtypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.SimpletypespecifierContext,0)


        def elaboratedtypespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.ElaboratedtypespecifierContext,0)


        def typenamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.TypenamespecifierContext,0)


        def cvqualifier(self):
            return self.getTypedRuleContext(grCpp2Parser.CvqualifierContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_trailingtypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifier" ):
                listener.enterTrailingtypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifier" ):
                listener.exitTrailingtypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifier" ):
                return visitor.visitTrailingtypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def trailingtypespecifier(self):

        localctx = grCpp2Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_trailingtypespecifier)
        try:
            self.state = 1263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 7, 11, 12, 13, 19, 23, 32, 38, 39, 53, 54, 71, 74, 76, 122, 127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1259
                self.simpletypespecifier()
                pass
            elif token in [14, 26, 59, 70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1260
                self.elaboratedtypespecifier()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1261
                self.typenamespecifier()
                pass
            elif token in [15, 75]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1262
                self.cvqualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypespecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.TypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def typespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.TypespecifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_typespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifierseq" ):
                listener.enterTypespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifierseq" ):
                listener.exitTypespecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifierseq" ):
                return visitor.visitTypespecifierseq(self)
            else:
                return visitor.visitChildren(self)




    def typespecifierseq(self):

        localctx = grCpp2Parser.TypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_typespecifierseq)
        try:
            self.state = 1272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1265
                self.typespecifier()
                self.state = 1267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 1266
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1269
                self.typespecifier()
                self.state = 1270
                self.typespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingtypespecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.TrailingtypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.TrailingtypespecifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_trailingtypespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifierseq" ):
                listener.enterTrailingtypespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifierseq" ):
                listener.exitTrailingtypespecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifierseq" ):
                return visitor.visitTrailingtypespecifierseq(self)
            else:
                return visitor.visitChildren(self)




    def trailingtypespecifierseq(self):

        localctx = grCpp2Parser.TrailingtypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_trailingtypespecifierseq)
        try:
            self.state = 1281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1274
                self.trailingtypespecifier()
                self.state = 1276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1275
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1278
                self.trailingtypespecifier()
                self.state = 1279
                self.trailingtypespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self):
            return self.getTypedRuleContext(grCpp2Parser.ThetypenameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.NestednamespecifierContext,0)


        def Template(self):
            return self.getToken(grCpp2Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(grCpp2Parser.SimpletemplateidContext,0)


        def Char(self):
            return self.getToken(grCpp2Parser.Char, 0)

        def Char16(self):
            return self.getToken(grCpp2Parser.Char16, 0)

        def Char32(self):
            return self.getToken(grCpp2Parser.Char32, 0)

        def Wchar(self):
            return self.getToken(grCpp2Parser.Wchar, 0)

        def Bool(self):
            return self.getToken(grCpp2Parser.Bool, 0)

        def Short(self):
            return self.getToken(grCpp2Parser.Short, 0)

        def Int(self):
            return self.getToken(grCpp2Parser.Int, 0)

        def Long(self):
            return self.getToken(grCpp2Parser.Long, 0)

        def Signed(self):
            return self.getToken(grCpp2Parser.Signed, 0)

        def Unsigned(self):
            return self.getToken(grCpp2Parser.Unsigned, 0)

        def Float(self):
            return self.getToken(grCpp2Parser.Float, 0)

        def Double(self):
            return self.getToken(grCpp2Parser.Double, 0)

        def Void(self):
            return self.getToken(grCpp2Parser.Void, 0)

        def Auto(self):
            return self.getToken(grCpp2Parser.Auto, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_simpletypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier" ):
                listener.enterSimpletypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier" ):
                listener.exitSimpletypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier" ):
                return visitor.visitSimpletypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def simpletypespecifier(self):

        localctx = grCpp2Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_simpletypespecifier)
        try:
            self.state = 1306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1284
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 1283
                    self.nestednamespecifier(0)


                self.state = 1286
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1287
                self.nestednamespecifier(0)
                self.state = 1288
                self.match(grCpp2Parser.Template)
                self.state = 1289
                self.simpletemplateid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1291
                self.match(grCpp2Parser.Char)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1292
                self.match(grCpp2Parser.Char16)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1293
                self.match(grCpp2Parser.Char32)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1294
                self.match(grCpp2Parser.Wchar)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1295
                self.match(grCpp2Parser.Bool)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1296
                self.match(grCpp2Parser.Short)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1297
                self.match(grCpp2Parser.Int)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1298
                self.match(grCpp2Parser.Long)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1299
                self.match(grCpp2Parser.Signed)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1300
                self.match(grCpp2Parser.Unsigned)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1301
                self.match(grCpp2Parser.Float)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1302
                self.match(grCpp2Parser.Double)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1303
                self.match(grCpp2Parser.Void)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1304
                self.match(grCpp2Parser.Auto)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1305
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThetypenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(grCpp2Parser.ClassnameContext,0)


        def enumname(self):
            return self.getTypedRuleContext(grCpp2Parser.EnumnameContext,0)


        def typedefname(self):
            return self.getTypedRuleContext(grCpp2Parser.TypedefnameContext,0)


        def simpletemplateid(self):
            return self.getTypedRuleContext(grCpp2Parser.SimpletemplateidContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_thetypename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypename" ):
                listener.enterThetypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypename" ):
                listener.exitThetypename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypename" ):
                return visitor.visitThetypename(self)
            else:
                return visitor.visitChildren(self)




    def thetypename(self):

        localctx = grCpp2Parser.ThetypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_thetypename)
        try:
            self.state = 1312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1308
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1309
                self.enumname()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1310
                self.typedefname()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1311
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecltypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decltype(self):
            return self.getToken(grCpp2Parser.Decltype, 0)

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def Auto(self):
            return self.getToken(grCpp2Parser.Auto, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_decltypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecltypespecifier" ):
                listener.enterDecltypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecltypespecifier" ):
                listener.exitDecltypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecltypespecifier" ):
                return visitor.visitDecltypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def decltypespecifier(self):

        localctx = grCpp2Parser.DecltypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_decltypespecifier)
        try:
            self.state = 1323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1314
                self.match(grCpp2Parser.Decltype)
                self.state = 1315
                self.match(grCpp2Parser.LeftParen)
                self.state = 1316
                self.expression(0)
                self.state = 1317
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1319
                self.match(grCpp2Parser.Decltype)
                self.state = 1320
                self.match(grCpp2Parser.LeftParen)
                self.state = 1321
                self.match(grCpp2Parser.Auto)
                self.state = 1322
                self.match(grCpp2Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElaboratedtypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classkey(self):
            return self.getTypedRuleContext(grCpp2Parser.ClasskeyContext,0)


        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.NestednamespecifierContext,0)


        def simpletemplateid(self):
            return self.getTypedRuleContext(grCpp2Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(grCpp2Parser.Template, 0)

        def Enum(self):
            return self.getToken(grCpp2Parser.Enum, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_elaboratedtypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedtypespecifier" ):
                listener.enterElaboratedtypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedtypespecifier" ):
                listener.exitElaboratedtypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElaboratedtypespecifier" ):
                return visitor.visitElaboratedtypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def elaboratedtypespecifier(self):

        localctx = grCpp2Parser.ElaboratedtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_elaboratedtypespecifier)
        self._la = 0 # Token type
        try:
            self.state = 1349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1325
                self.classkey()
                self.state = 1327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1326
                    self.attributespecifierseq(0)


                self.state = 1330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1329
                    self.nestednamespecifier(0)


                self.state = 1332
                self.match(grCpp2Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1334
                self.classkey()
                self.state = 1335
                self.simpletemplateid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1337
                self.classkey()
                self.state = 1338
                self.nestednamespecifier(0)
                self.state = 1340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 1339
                    self.match(grCpp2Parser.Template)


                self.state = 1342
                self.simpletemplateid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1344
                self.match(grCpp2Parser.Enum)
                self.state = 1346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 1345
                    self.nestednamespecifier(0)


                self.state = 1348
                self.match(grCpp2Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_enumname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumname" ):
                listener.enterEnumname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumname" ):
                listener.exitEnumname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumname" ):
                return visitor.visitEnumname(self)
            else:
                return visitor.visitChildren(self)




    def enumname(self):

        localctx = grCpp2Parser.EnumnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_enumname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            self.match(grCpp2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumhead(self):
            return self.getTypedRuleContext(grCpp2Parser.EnumheadContext,0)


        def LeftBrace(self):
            return self.getToken(grCpp2Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(grCpp2Parser.RightBrace, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(grCpp2Parser.EnumeratorlistContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_enumspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumspecifier" ):
                listener.enterEnumspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumspecifier" ):
                listener.exitEnumspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumspecifier" ):
                return visitor.visitEnumspecifier(self)
            else:
                return visitor.visitChildren(self)




    def enumspecifier(self):

        localctx = grCpp2Parser.EnumspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_enumspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1353
                self.enumhead()
                self.state = 1354
                self.match(grCpp2Parser.LeftBrace)
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1355
                    self.enumeratorlist(0)


                self.state = 1358
                self.match(grCpp2Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1360
                self.enumhead()
                self.state = 1361
                self.match(grCpp2Parser.LeftBrace)
                self.state = 1362
                self.enumeratorlist(0)
                self.state = 1363
                self.match(grCpp2Parser.Comma)
                self.state = 1364
                self.match(grCpp2Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumheadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(grCpp2Parser.EnumkeyContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def enumbase(self):
            return self.getTypedRuleContext(grCpp2Parser.EnumbaseContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_enumhead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumhead" ):
                listener.enterEnumhead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumhead" ):
                listener.exitEnumhead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumhead" ):
                return visitor.visitEnumhead(self)
            else:
                return visitor.visitChildren(self)




    def enumhead(self):

        localctx = grCpp2Parser.EnumheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_enumhead)
        self._la = 0 # Token type
        try:
            self.state = 1387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1368
                self.enumkey()
                self.state = 1370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1369
                    self.attributespecifierseq(0)


                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1372
                    self.match(grCpp2Parser.Identifier)


                self.state = 1376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 1375
                    self.enumbase()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1378
                self.enumkey()
                self.state = 1380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1379
                    self.attributespecifierseq(0)


                self.state = 1382
                self.nestednamespecifier(0)
                self.state = 1383
                self.match(grCpp2Parser.Identifier)
                self.state = 1385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 1384
                    self.enumbase()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpaqueenumdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(grCpp2Parser.EnumkeyContext,0)


        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def enumbase(self):
            return self.getTypedRuleContext(grCpp2Parser.EnumbaseContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_opaqueenumdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaqueenumdeclaration" ):
                listener.enterOpaqueenumdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaqueenumdeclaration" ):
                listener.exitOpaqueenumdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpaqueenumdeclaration" ):
                return visitor.visitOpaqueenumdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def opaqueenumdeclaration(self):

        localctx = grCpp2Parser.OpaqueenumdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_opaqueenumdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.enumkey()
            self.state = 1391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==80:
                self.state = 1390
                self.attributespecifierseq(0)


            self.state = 1393
            self.match(grCpp2Parser.Identifier)
            self.state = 1395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 1394
                self.enumbase()


            self.state = 1397
            self.match(grCpp2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumkeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(grCpp2Parser.Enum, 0)

        def Class(self):
            return self.getToken(grCpp2Parser.Class, 0)

        def Struct(self):
            return self.getToken(grCpp2Parser.Struct, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_enumkey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumkey" ):
                listener.enterEnumkey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumkey" ):
                listener.exitEnumkey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumkey" ):
                return visitor.visitEnumkey(self)
            else:
                return visitor.visitChildren(self)




    def enumkey(self):

        localctx = grCpp2Parser.EnumkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_enumkey)
        try:
            self.state = 1404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1399
                self.match(grCpp2Parser.Enum)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1400
                self.match(grCpp2Parser.Enum)
                self.state = 1401
                self.match(grCpp2Parser.Class)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1402
                self.match(grCpp2Parser.Enum)
                self.state = 1403
                self.match(grCpp2Parser.Struct)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumbaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(grCpp2Parser.Colon, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.TypespecifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_enumbase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumbase" ):
                listener.enterEnumbase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumbase" ):
                listener.exitEnumbase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumbase" ):
                return visitor.visitEnumbase(self)
            else:
                return visitor.visitChildren(self)




    def enumbase(self):

        localctx = grCpp2Parser.EnumbaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_enumbase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1406
            self.match(grCpp2Parser.Colon)
            self.state = 1407
            self.typespecifierseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratordefinition(self):
            return self.getTypedRuleContext(grCpp2Parser.EnumeratordefinitionContext,0)


        def enumeratorlist(self):
            return self.getTypedRuleContext(grCpp2Parser.EnumeratorlistContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_enumeratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorlist" ):
                listener.enterEnumeratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorlist" ):
                listener.exitEnumeratorlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratorlist" ):
                return visitor.visitEnumeratorlist(self)
            else:
                return visitor.visitChildren(self)



    def enumeratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.EnumeratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 176
        self.enterRecursionRule(localctx, 176, self.RULE_enumeratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.enumeratordefinition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1417
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.EnumeratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorlist)
                    self.state = 1412
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1413
                    self.match(grCpp2Parser.Comma)
                    self.state = 1414
                    self.enumeratordefinition() 
                self.state = 1419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EnumeratordefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self):
            return self.getTypedRuleContext(grCpp2Parser.EnumeratorContext,0)


        def Assign(self):
            return self.getToken(grCpp2Parser.Assign, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_enumeratordefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratordefinition" ):
                listener.enterEnumeratordefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratordefinition" ):
                listener.exitEnumeratordefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratordefinition" ):
                return visitor.visitEnumeratordefinition(self)
            else:
                return visitor.visitChildren(self)




    def enumeratordefinition(self):

        localctx = grCpp2Parser.EnumeratordefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_enumeratordefinition)
        try:
            self.state = 1425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1420
                self.enumerator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1421
                self.enumerator()
                self.state = 1422
                self.match(grCpp2Parser.Assign)
                self.state = 1423
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerator" ):
                return visitor.visitEnumerator(self)
            else:
                return visitor.visitChildren(self)




    def enumerator(self):

        localctx = grCpp2Parser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_enumerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self.match(grCpp2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalnamespacename(self):
            return self.getTypedRuleContext(grCpp2Parser.OriginalnamespacenameContext,0)


        def namespacealias(self):
            return self.getTypedRuleContext(grCpp2Parser.NamespacealiasContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_namespacename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacename" ):
                listener.enterNamespacename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacename" ):
                listener.exitNamespacename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacename" ):
                return visitor.visitNamespacename(self)
            else:
                return visitor.visitChildren(self)




    def namespacename(self):

        localctx = grCpp2Parser.NamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_namespacename)
        try:
            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1429
                self.originalnamespacename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1430
                self.namespacealias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalnamespacenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_originalnamespacename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacename" ):
                listener.enterOriginalnamespacename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacename" ):
                listener.exitOriginalnamespacename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOriginalnamespacename" ):
                return visitor.visitOriginalnamespacename(self)
            else:
                return visitor.visitChildren(self)




    def originalnamespacename(self):

        localctx = grCpp2Parser.OriginalnamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_originalnamespacename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.match(grCpp2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namednamespacedefinition(self):
            return self.getTypedRuleContext(grCpp2Parser.NamednamespacedefinitionContext,0)


        def unnamednamespacedefinition(self):
            return self.getTypedRuleContext(grCpp2Parser.UnnamednamespacedefinitionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_namespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacedefinition" ):
                listener.enterNamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacedefinition" ):
                listener.exitNamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacedefinition" ):
                return visitor.visitNamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def namespacedefinition(self):

        localctx = grCpp2Parser.NamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_namespacedefinition)
        try:
            self.state = 1437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1435
                self.namednamespacedefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1436
                self.unnamednamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamednamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalnamespacedefinition(self):
            return self.getTypedRuleContext(grCpp2Parser.OriginalnamespacedefinitionContext,0)


        def extensionnamespacedefinition(self):
            return self.getTypedRuleContext(grCpp2Parser.ExtensionnamespacedefinitionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_namednamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamednamespacedefinition" ):
                listener.enterNamednamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamednamespacedefinition" ):
                listener.exitNamednamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamednamespacedefinition" ):
                return visitor.visitNamednamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def namednamespacedefinition(self):

        localctx = grCpp2Parser.NamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_namednamespacedefinition)
        try:
            self.state = 1441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1439
                self.originalnamespacedefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1440
                self.extensionnamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalnamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(grCpp2Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def LeftBrace(self):
            return self.getToken(grCpp2Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(grCpp2Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(grCpp2Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(grCpp2Parser.Inline, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_originalnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacedefinition" ):
                listener.enterOriginalnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacedefinition" ):
                listener.exitOriginalnamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOriginalnamespacedefinition" ):
                return visitor.visitOriginalnamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def originalnamespacedefinition(self):

        localctx = grCpp2Parser.OriginalnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_originalnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 1443
                self.match(grCpp2Parser.Inline)


            self.state = 1446
            self.match(grCpp2Parser.Namespace)
            self.state = 1447
            self.match(grCpp2Parser.Identifier)
            self.state = 1448
            self.match(grCpp2Parser.LeftBrace)
            self.state = 1449
            self.namespacebody()
            self.state = 1450
            self.match(grCpp2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionnamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(grCpp2Parser.Namespace, 0)

        def originalnamespacename(self):
            return self.getTypedRuleContext(grCpp2Parser.OriginalnamespacenameContext,0)


        def LeftBrace(self):
            return self.getToken(grCpp2Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(grCpp2Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(grCpp2Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(grCpp2Parser.Inline, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_extensionnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionnamespacedefinition" ):
                listener.enterExtensionnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionnamespacedefinition" ):
                listener.exitExtensionnamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionnamespacedefinition" ):
                return visitor.visitExtensionnamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def extensionnamespacedefinition(self):

        localctx = grCpp2Parser.ExtensionnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_extensionnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 1452
                self.match(grCpp2Parser.Inline)


            self.state = 1455
            self.match(grCpp2Parser.Namespace)
            self.state = 1456
            self.originalnamespacename()
            self.state = 1457
            self.match(grCpp2Parser.LeftBrace)
            self.state = 1458
            self.namespacebody()
            self.state = 1459
            self.match(grCpp2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnamednamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(grCpp2Parser.Namespace, 0)

        def LeftBrace(self):
            return self.getToken(grCpp2Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(grCpp2Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(grCpp2Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(grCpp2Parser.Inline, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_unnamednamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamednamespacedefinition" ):
                listener.enterUnnamednamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamednamespacedefinition" ):
                listener.exitUnnamednamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnamednamespacedefinition" ):
                return visitor.visitUnnamednamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def unnamednamespacedefinition(self):

        localctx = grCpp2Parser.UnnamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_unnamednamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 1461
                self.match(grCpp2Parser.Inline)


            self.state = 1464
            self.match(grCpp2Parser.Namespace)
            self.state = 1465
            self.match(grCpp2Parser.LeftBrace)
            self.state = 1466
            self.namespacebody()
            self.state = 1467
            self.match(grCpp2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacebodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationseq(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_namespacebody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacebody" ):
                listener.enterNamespacebody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacebody" ):
                listener.exitNamespacebody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacebody" ):
                return visitor.visitNamespacebody(self)
            else:
                return visitor.visitChildren(self)




    def namespacebody(self):

        localctx = grCpp2Parser.NamespacebodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_namespacebody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6096708528351086360) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 1837539016753818621) != 0):
                self.state = 1469
                self.declarationseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacealiasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_namespacealias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealias" ):
                listener.enterNamespacealias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealias" ):
                listener.exitNamespacealias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacealias" ):
                return visitor.visitNamespacealias(self)
            else:
                return visitor.visitChildren(self)




    def namespacealias(self):

        localctx = grCpp2Parser.NamespacealiasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_namespacealias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1472
            self.match(grCpp2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacealiasdefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(grCpp2Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(grCpp2Parser.Assign, 0)

        def qualifiednamespacespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.QualifiednamespacespecifierContext,0)


        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_namespacealiasdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealiasdefinition" ):
                listener.enterNamespacealiasdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealiasdefinition" ):
                listener.exitNamespacealiasdefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacealiasdefinition" ):
                return visitor.visitNamespacealiasdefinition(self)
            else:
                return visitor.visitChildren(self)




    def namespacealiasdefinition(self):

        localctx = grCpp2Parser.NamespacealiasdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_namespacealiasdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1474
            self.match(grCpp2Parser.Namespace)
            self.state = 1475
            self.match(grCpp2Parser.Identifier)
            self.state = 1476
            self.match(grCpp2Parser.Assign)
            self.state = 1477
            self.qualifiednamespacespecifier()
            self.state = 1478
            self.match(grCpp2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiednamespacespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespacename(self):
            return self.getTypedRuleContext(grCpp2Parser.NamespacenameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_qualifiednamespacespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiednamespacespecifier" ):
                listener.enterQualifiednamespacespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiednamespacespecifier" ):
                listener.exitQualifiednamespacespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiednamespacespecifier" ):
                return visitor.visitQualifiednamespacespecifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifiednamespacespecifier(self):

        localctx = grCpp2Parser.QualifiednamespacespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_qualifiednamespacespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1480
                self.nestednamespecifier(0)


            self.state = 1483
            self.namespacename()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(grCpp2Parser.Using, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.NestednamespecifierContext,0)


        def unqualifiedid(self):
            return self.getTypedRuleContext(grCpp2Parser.UnqualifiedidContext,0)


        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def Typename_(self):
            return self.getToken(grCpp2Parser.Typename_, 0)

        def Doublecolon(self):
            return self.getToken(grCpp2Parser.Doublecolon, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_usingdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdeclaration" ):
                listener.enterUsingdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdeclaration" ):
                listener.exitUsingdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingdeclaration" ):
                return visitor.visitUsingdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def usingdeclaration(self):

        localctx = grCpp2Parser.UsingdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_usingdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1485
                self.match(grCpp2Parser.Using)
                self.state = 1487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 1486
                    self.match(grCpp2Parser.Typename_)


                self.state = 1489
                self.nestednamespecifier(0)
                self.state = 1490
                self.unqualifiedid()
                self.state = 1491
                self.match(grCpp2Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1493
                self.match(grCpp2Parser.Using)
                self.state = 1494
                self.match(grCpp2Parser.Doublecolon)
                self.state = 1495
                self.unqualifiedid()
                self.state = 1496
                self.match(grCpp2Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingdirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(grCpp2Parser.Using, 0)

        def Namespace(self):
            return self.getToken(grCpp2Parser.Namespace, 0)

        def namespacename(self):
            return self.getTypedRuleContext(grCpp2Parser.NamespacenameContext,0)


        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_usingdirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdirective" ):
                listener.enterUsingdirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdirective" ):
                listener.exitUsingdirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingdirective" ):
                return visitor.visitUsingdirective(self)
            else:
                return visitor.visitChildren(self)




    def usingdirective(self):

        localctx = grCpp2Parser.UsingdirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_usingdirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==80:
                self.state = 1500
                self.attributespecifierseq(0)


            self.state = 1503
            self.match(grCpp2Parser.Using)
            self.state = 1504
            self.match(grCpp2Parser.Namespace)
            self.state = 1506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1505
                self.nestednamespecifier(0)


            self.state = 1508
            self.namespacename()
            self.state = 1509
            self.match(grCpp2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmdefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Asm(self):
            return self.getToken(grCpp2Parser.Asm, 0)

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def Stringliteral(self):
            return self.getToken(grCpp2Parser.Stringliteral, 0)

        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_asmdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmdefinition" ):
                listener.enterAsmdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmdefinition" ):
                listener.exitAsmdefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmdefinition" ):
                return visitor.visitAsmdefinition(self)
            else:
                return visitor.visitChildren(self)




    def asmdefinition(self):

        localctx = grCpp2Parser.AsmdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_asmdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self.match(grCpp2Parser.Asm)
            self.state = 1512
            self.match(grCpp2Parser.LeftParen)
            self.state = 1513
            self.match(grCpp2Parser.Stringliteral)
            self.state = 1514
            self.match(grCpp2Parser.RightParen)
            self.state = 1515
            self.match(grCpp2Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkagespecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extern(self):
            return self.getToken(grCpp2Parser.Extern, 0)

        def Stringliteral(self):
            return self.getToken(grCpp2Parser.Stringliteral, 0)

        def LeftBrace(self):
            return self.getToken(grCpp2Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(grCpp2Parser.RightBrace, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclarationseqContext,0)


        def declaration(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_linkagespecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkagespecification" ):
                listener.enterLinkagespecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkagespecification" ):
                listener.exitLinkagespecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkagespecification" ):
                return visitor.visitLinkagespecification(self)
            else:
                return visitor.visitChildren(self)




    def linkagespecification(self):

        localctx = grCpp2Parser.LinkagespecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_linkagespecification)
        self._la = 0 # Token type
        try:
            self.state = 1527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1517
                self.match(grCpp2Parser.Extern)
                self.state = 1518
                self.match(grCpp2Parser.Stringliteral)
                self.state = 1519
                self.match(grCpp2Parser.LeftBrace)
                self.state = 1521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6096708528351086360) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 1837539016753818621) != 0):
                    self.state = 1520
                    self.declarationseq(0)


                self.state = 1523
                self.match(grCpp2Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1524
                self.match(grCpp2Parser.Extern)
                self.state = 1525
                self.match(grCpp2Parser.Stringliteral)
                self.state = 1526
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributespecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_attributespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifierseq" ):
                listener.enterAttributespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifierseq" ):
                listener.exitAttributespecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifierseq" ):
                return visitor.visitAttributespecifierseq(self)
            else:
                return visitor.visitChildren(self)



    def attributespecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.AttributespecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 212
        self.enterRecursionRule(localctx, 212, self.RULE_attributespecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.attributespecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1536
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.AttributespecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributespecifierseq)
                    self.state = 1532
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1533
                    self.attributespecifier() 
                self.state = 1538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AttributespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(grCpp2Parser.LeftBracket)
            else:
                return self.getToken(grCpp2Parser.LeftBracket, i)

        def attributelist(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributelistContext,0)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(grCpp2Parser.RightBracket)
            else:
                return self.getToken(grCpp2Parser.RightBracket, i)

        def alignmentspecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.AlignmentspecifierContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_attributespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifier" ):
                listener.enterAttributespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifier" ):
                listener.exitAttributespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifier" ):
                return visitor.visitAttributespecifier(self)
            else:
                return visitor.visitChildren(self)




    def attributespecifier(self):

        localctx = grCpp2Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_attributespecifier)
        try:
            self.state = 1546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1539
                self.match(grCpp2Parser.LeftBracket)
                self.state = 1540
                self.match(grCpp2Parser.LeftBracket)
                self.state = 1541
                self.attributelist(0)
                self.state = 1542
                self.match(grCpp2Parser.RightBracket)
                self.state = 1543
                self.match(grCpp2Parser.RightBracket)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1545
                self.alignmentspecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(grCpp2Parser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(grCpp2Parser.ThetypeidContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_alignmentspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentspecifier" ):
                listener.enterAlignmentspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentspecifier" ):
                listener.exitAlignmentspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignmentspecifier" ):
                return visitor.visitAlignmentspecifier(self)
            else:
                return visitor.visitChildren(self)




    def alignmentspecifier(self):

        localctx = grCpp2Parser.AlignmentspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_alignmentspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1548
                self.match(grCpp2Parser.Alignas)
                self.state = 1549
                self.match(grCpp2Parser.LeftParen)
                self.state = 1550
                self.thetypeid()
                self.state = 1552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 1551
                    self.match(grCpp2Parser.Ellipsis)


                self.state = 1554
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1556
                self.match(grCpp2Parser.Alignas)
                self.state = 1557
                self.match(grCpp2Parser.LeftParen)
                self.state = 1558
                self.constantexpression()
                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 1559
                    self.match(grCpp2Parser.Ellipsis)


                self.state = 1562
                self.match(grCpp2Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributelistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributeContext,0)


        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def attributelist(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributelistContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_attributelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributelist" ):
                listener.enterAttributelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributelist" ):
                listener.exitAttributelist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributelist" ):
                return visitor.visitAttributelist(self)
            else:
                return visitor.visitChildren(self)



    def attributelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.AttributelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 218
        self.enterRecursionRule(localctx, 218, self.RULE_attributelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1568
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 1567
                    self.attribute()


                pass

            elif la_ == 2:
                self.state = 1570
                self.attribute()
                self.state = 1571
                self.match(grCpp2Parser.Ellipsis)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1587
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1585
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                    if la_ == 1:
                        localctx = grCpp2Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1575
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1576
                        self.match(grCpp2Parser.Comma)
                        self.state = 1578
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                        if la_ == 1:
                            self.state = 1577
                            self.attribute()


                        pass

                    elif la_ == 2:
                        localctx = grCpp2Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1580
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1581
                        self.match(grCpp2Parser.Comma)
                        self.state = 1582
                        self.attribute()
                        self.state = 1583
                        self.match(grCpp2Parser.Ellipsis)
                        pass

             
                self.state = 1589
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributetoken(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributetokenContext,0)


        def attributeargumentclause(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributeargumentclauseContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = grCpp2Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1590
            self.attributetoken()
            self.state = 1592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1591
                self.attributeargumentclause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributetokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def attributescopedtoken(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributescopedtokenContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_attributetoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributetoken" ):
                listener.enterAttributetoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributetoken" ):
                listener.exitAttributetoken(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributetoken" ):
                return visitor.visitAttributetoken(self)
            else:
                return visitor.visitChildren(self)




    def attributetoken(self):

        localctx = grCpp2Parser.AttributetokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_attributetoken)
        try:
            self.state = 1596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1594
                self.match(grCpp2Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1595
                self.attributescopedtoken()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributescopedtokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributenamespace(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributenamespaceContext,0)


        def Doublecolon(self):
            return self.getToken(grCpp2Parser.Doublecolon, 0)

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_attributescopedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributescopedtoken" ):
                listener.enterAttributescopedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributescopedtoken" ):
                listener.exitAttributescopedtoken(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributescopedtoken" ):
                return visitor.visitAttributescopedtoken(self)
            else:
                return visitor.visitChildren(self)




    def attributescopedtoken(self):

        localctx = grCpp2Parser.AttributescopedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_attributescopedtoken)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1598
            self.attributenamespace()
            self.state = 1599
            self.match(grCpp2Parser.Doublecolon)
            self.state = 1600
            self.match(grCpp2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributenamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_attributenamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributenamespace" ):
                listener.enterAttributenamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributenamespace" ):
                listener.exitAttributenamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributenamespace" ):
                return visitor.visitAttributenamespace(self)
            else:
                return visitor.visitChildren(self)




    def attributenamespace(self):

        localctx = grCpp2Parser.AttributenamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_attributenamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self.match(grCpp2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeargumentclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(grCpp2Parser.BalancedtokenseqContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_attributeargumentclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeargumentclause" ):
                listener.enterAttributeargumentclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeargumentclause" ):
                listener.exitAttributeargumentclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeargumentclause" ):
                return visitor.visitAttributeargumentclause(self)
            else:
                return visitor.visitChildren(self)




    def attributeargumentclause(self):

        localctx = grCpp2Parser.AttributeargumentclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_attributeargumentclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1604
            self.match(grCpp2Parser.LeftParen)
            self.state = 1605
            self.balancedtokenseq(0)
            self.state = 1606
            self.match(grCpp2Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BalancedtokenseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self):
            return self.getTypedRuleContext(grCpp2Parser.BalancedtokenContext,0)


        def balancedtokenseq(self):
            return self.getTypedRuleContext(grCpp2Parser.BalancedtokenseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_balancedtokenseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtokenseq" ):
                listener.enterBalancedtokenseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtokenseq" ):
                listener.exitBalancedtokenseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtokenseq" ):
                return visitor.visitBalancedtokenseq(self)
            else:
                return visitor.visitChildren(self)



    def balancedtokenseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.BalancedtokenseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_balancedtokenseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1609
                self.balancedtoken()


            self._ctx.stop = self._input.LT(-1)
            self.state = 1616
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.BalancedtokenseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_balancedtokenseq)
                    self.state = 1612
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1613
                    self.balancedtoken() 
                self.state = 1618
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BalancedtokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(grCpp2Parser.BalancedtokenseqContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def LeftBracket(self):
            return self.getToken(grCpp2Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(grCpp2Parser.RightBracket, 0)

        def LeftBrace(self):
            return self.getToken(grCpp2Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(grCpp2Parser.RightBrace, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_balancedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken" ):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken" ):
                listener.exitBalancedtoken(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtoken" ):
                return visitor.visitBalancedtoken(self)
            else:
                return visitor.visitChildren(self)




    def balancedtoken(self):

        localctx = grCpp2Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_balancedtoken)
        try:
            self.state = 1631
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1619
                self.match(grCpp2Parser.LeftParen)
                self.state = 1620
                self.balancedtokenseq(0)
                self.state = 1621
                self.match(grCpp2Parser.RightParen)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1623
                self.match(grCpp2Parser.LeftBracket)
                self.state = 1624
                self.balancedtokenseq(0)
                self.state = 1625
                self.match(grCpp2Parser.RightBracket)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1627
                self.match(grCpp2Parser.LeftBrace)
                self.state = 1628
                self.balancedtokenseq(0)
                self.state = 1629
                self.match(grCpp2Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitdeclaratorlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.InitdeclaratorContext,0)


        def initdeclaratorlist(self):
            return self.getTypedRuleContext(grCpp2Parser.InitdeclaratorlistContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_initdeclaratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclaratorlist" ):
                listener.enterInitdeclaratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclaratorlist" ):
                listener.exitInitdeclaratorlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitdeclaratorlist" ):
                return visitor.visitInitdeclaratorlist(self)
            else:
                return visitor.visitChildren(self)



    def initdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.InitdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 234
        self.enterRecursionRule(localctx, 234, self.RULE_initdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634
            self.initdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1641
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.InitdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initdeclaratorlist)
                    self.state = 1636
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1637
                    self.match(grCpp2Parser.Comma)
                    self.state = 1638
                    self.initdeclarator() 
                self.state = 1643
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InitdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclaratorContext,0)


        def initializer(self):
            return self.getTypedRuleContext(grCpp2Parser.InitializerContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_initdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclarator" ):
                listener.enterInitdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclarator" ):
                listener.exitInitdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitdeclarator" ):
                return visitor.visitInitdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def initdeclarator(self):

        localctx = grCpp2Parser.InitdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_initdeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.declarator()
            self.state = 1646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1645
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.PtrdeclaratorContext,0)


        def noptrdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.NoptrdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(grCpp2Parser.ParametersandqualifiersContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(grCpp2Parser.TrailingreturntypeContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator" ):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def declarator(self):

        localctx = grCpp2Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_declarator)
        try:
            self.state = 1653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1648
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1649
                self.noptrdeclarator(0)
                self.state = 1650
                self.parametersandqualifiers()
                self.state = 1651
                self.trailingreturntype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.NoptrdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(grCpp2Parser.PtroperatorContext,0)


        def ptrdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.PtrdeclaratorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_ptrdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrdeclarator" ):
                listener.enterPtrdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrdeclarator" ):
                listener.exitPtrdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrdeclarator" ):
                return visitor.visitPtrdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def ptrdeclarator(self):

        localctx = grCpp2Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_ptrdeclarator)
        try:
            self.state = 1659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1655
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1656
                self.ptroperator()
                self.state = 1657
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaratorid(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclaratoridContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.PtrdeclaratorContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.NoptrdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(grCpp2Parser.ParametersandqualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(grCpp2Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(grCpp2Parser.RightBracket, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_noptrdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrdeclarator" ):
                listener.enterNoptrdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrdeclarator" ):
                listener.exitNoptrdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrdeclarator" ):
                return visitor.visitNoptrdeclarator(self)
            else:
                return visitor.visitChildren(self)



    def noptrdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 242
        self.enterRecursionRule(localctx, 242, self.RULE_noptrdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 45, 92, 122, 126, 127]:
                self.state = 1662
                self.declaratorid()
                self.state = 1664
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1663
                    self.attributespecifierseq(0)


                pass
            elif token in [78]:
                self.state = 1666
                self.match(grCpp2Parser.LeftParen)
                self.state = 1667
                self.ptrdeclarator()
                self.state = 1668
                self.match(grCpp2Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1685
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1683
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                    if la_ == 1:
                        localctx = grCpp2Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1672
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1673
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = grCpp2Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1674
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1675
                        self.match(grCpp2Parser.LeftBracket)
                        self.state = 1677
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4965285389904001232) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -4464193130123974055) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 127) != 0):
                            self.state = 1676
                            self.constantexpression()


                        self.state = 1679
                        self.match(grCpp2Parser.RightBracket)
                        self.state = 1681
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                        if la_ == 1:
                            self.state = 1680
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1687
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParametersandqualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(grCpp2Parser.ParameterdeclarationclauseContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.CvqualifierseqContext,0)


        def refqualifier(self):
            return self.getTypedRuleContext(grCpp2Parser.RefqualifierContext,0)


        def exceptionspecification(self):
            return self.getTypedRuleContext(grCpp2Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_parametersandqualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParametersandqualifiers" ):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParametersandqualifiers" ):
                listener.exitParametersandqualifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParametersandqualifiers" ):
                return visitor.visitParametersandqualifiers(self)
            else:
                return visitor.visitChildren(self)




    def parametersandqualifiers(self):

        localctx = grCpp2Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_parametersandqualifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            self.match(grCpp2Parser.LeftParen)
            self.state = 1689
            self.parameterdeclarationclause()
            self.state = 1690
            self.match(grCpp2Parser.RightParen)
            self.state = 1692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1691
                self.cvqualifierseq()


            self.state = 1695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 1694
                self.refqualifier()


            self.state = 1698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1697
                self.exceptionspecification()


            self.state = 1701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1700
                self.attributespecifierseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingreturntypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Arrow(self):
            return self.getToken(grCpp2Parser.Arrow, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.TrailingtypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_trailingreturntype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingreturntype" ):
                listener.enterTrailingreturntype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingreturntype" ):
                listener.exitTrailingreturntype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingreturntype" ):
                return visitor.visitTrailingreturntype(self)
            else:
                return visitor.visitChildren(self)




    def trailingreturntype(self):

        localctx = grCpp2Parser.TrailingreturntypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_trailingreturntype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1703
            self.match(grCpp2Parser.Arrow)
            self.state = 1704
            self.trailingtypespecifierseq()
            self.state = 1706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1705
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtroperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self):
            return self.getToken(grCpp2Parser.Star, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.CvqualifierseqContext,0)


        def And(self):
            return self.getToken(grCpp2Parser.And, 0)

        def AndAnd(self):
            return self.getToken(grCpp2Parser.AndAnd, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_ptroperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtroperator" ):
                listener.enterPtroperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtroperator" ):
                listener.exitPtroperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtroperator" ):
                return visitor.visitPtroperator(self)
            else:
                return visitor.visitChildren(self)




    def ptroperator(self):

        localctx = grCpp2Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_ptroperator)
        try:
            self.state = 1731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1708
                self.match(grCpp2Parser.Star)
                self.state = 1710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1709
                    self.attributespecifierseq(0)


                self.state = 1713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1712
                    self.cvqualifierseq()


                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1715
                self.match(grCpp2Parser.And)
                self.state = 1717
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1716
                    self.attributespecifierseq(0)


                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1719
                self.match(grCpp2Parser.AndAnd)
                self.state = 1721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1720
                    self.attributespecifierseq(0)


                pass
            elif token in [19, 122, 127]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1723
                self.nestednamespecifier(0)
                self.state = 1724
                self.match(grCpp2Parser.Star)
                self.state = 1726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1725
                    self.attributespecifierseq(0)


                self.state = 1729
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1728
                    self.cvqualifierseq()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cvqualifier(self):
            return self.getTypedRuleContext(grCpp2Parser.CvqualifierContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.CvqualifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_cvqualifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifierseq" ):
                listener.enterCvqualifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifierseq" ):
                listener.exitCvqualifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvqualifierseq" ):
                return visitor.visitCvqualifierseq(self)
            else:
                return visitor.visitChildren(self)




    def cvqualifierseq(self):

        localctx = grCpp2Parser.CvqualifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_cvqualifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            self.cvqualifier()
            self.state = 1735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1734
                self.cvqualifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(grCpp2Parser.Const, 0)

        def Volatile(self):
            return self.getToken(grCpp2Parser.Volatile, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_cvqualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifier" ):
                listener.enterCvqualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifier" ):
                listener.exitCvqualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvqualifier" ):
                return visitor.visitCvqualifier(self)
            else:
                return visitor.visitChildren(self)




    def cvqualifier(self):

        localctx = grCpp2Parser.CvqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_cvqualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1737
            _la = self._input.LA(1)
            if not(_la==15 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefqualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(grCpp2Parser.And, 0)

        def AndAnd(self):
            return self.getToken(grCpp2Parser.AndAnd, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_refqualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefqualifier" ):
                listener.enterRefqualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefqualifier" ):
                listener.exitRefqualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefqualifier" ):
                return visitor.visitRefqualifier(self)
            else:
                return visitor.visitChildren(self)




    def refqualifier(self):

        localctx = grCpp2Parser.RefqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_refqualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1739
            _la = self._input.LA(1)
            if not(_la==90 or _la==113):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratoridContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.IdexpressionContext,0)


        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_declaratorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaratorid" ):
                listener.enterDeclaratorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaratorid" ):
                listener.exitDeclaratorid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaratorid" ):
                return visitor.visitDeclaratorid(self)
            else:
                return visitor.visitChildren(self)




    def declaratorid(self):

        localctx = grCpp2Parser.DeclaratoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_declaratorid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 1741
                self.match(grCpp2Parser.Ellipsis)


            self.state = 1744
            self.idexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThetypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.TypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_thetypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypeid" ):
                listener.enterThetypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypeid" ):
                listener.exitThetypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypeid" ):
                return visitor.visitThetypeid(self)
            else:
                return visitor.visitChildren(self)




    def thetypeid(self):

        localctx = grCpp2Parser.ThetypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_thetypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1746
            self.typespecifierseq()
            self.state = 1748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1747
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.PtrabstractdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(grCpp2Parser.ParametersandqualifiersContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(grCpp2Parser.TrailingreturntypeContext,0)


        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.NoptrabstractdeclaratorContext,0)


        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.AbstractpackdeclaratorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_abstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractdeclarator" ):
                listener.enterAbstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractdeclarator" ):
                listener.exitAbstractdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractdeclarator" ):
                return visitor.visitAbstractdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def abstractdeclarator(self):

        localctx = grCpp2Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_abstractdeclarator)
        try:
            self.state = 1758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1750
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1752
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1751
                    self.noptrabstractdeclarator(0)


                self.state = 1754
                self.parametersandqualifiers()
                self.state = 1755
                self.trailingreturntype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1757
                self.abstractpackdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrabstractdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.NoptrabstractdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(grCpp2Parser.PtroperatorContext,0)


        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.PtrabstractdeclaratorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_ptrabstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrabstractdeclarator" ):
                listener.enterPtrabstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrabstractdeclarator" ):
                listener.exitPtrabstractdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrabstractdeclarator" ):
                return visitor.visitPtrabstractdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def ptrabstractdeclarator(self):

        localctx = grCpp2Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_ptrabstractdeclarator)
        try:
            self.state = 1765
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78, 80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1760
                self.noptrabstractdeclarator(0)
                pass
            elif token in [19, 86, 90, 113, 122, 127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1761
                self.ptroperator()
                self.state = 1763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1762
                    self.ptrabstractdeclarator()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrabstractdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(grCpp2Parser.ParametersandqualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(grCpp2Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(grCpp2Parser.RightBracket, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ConstantexpressionContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.PtrabstractdeclaratorContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.NoptrabstractdeclaratorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_noptrabstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator" ):
                listener.enterNoptrabstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator" ):
                listener.exitNoptrabstractdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractdeclarator" ):
                return visitor.visitNoptrabstractdeclarator(self)
            else:
                return visitor.visitChildren(self)



    def noptrabstractdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 264
        self.enterRecursionRule(localctx, 264, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1768
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 1769
                self.match(grCpp2Parser.LeftBracket)
                self.state = 1771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4965285389904001232) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -4464193130123974055) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 127) != 0):
                    self.state = 1770
                    self.constantexpression()


                self.state = 1773
                self.match(grCpp2Parser.RightBracket)
                self.state = 1775
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1774
                    self.attributespecifierseq(0)


                pass

            elif la_ == 3:
                self.state = 1777
                self.match(grCpp2Parser.LeftParen)
                self.state = 1778
                self.ptrabstractdeclarator()
                self.state = 1779
                self.match(grCpp2Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1796
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1794
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                    if la_ == 1:
                        localctx = grCpp2Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1783
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1784
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = grCpp2Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1785
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1786
                        self.match(grCpp2Parser.LeftBracket)
                        self.state = 1788
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4965285389904001232) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -4464193130123974055) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 127) != 0):
                            self.state = 1787
                            self.constantexpression()


                        self.state = 1790
                        self.match(grCpp2Parser.RightBracket)
                        self.state = 1792
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                        if la_ == 1:
                            self.state = 1791
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1798
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AbstractpackdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.NoptrabstractpackdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(grCpp2Parser.PtroperatorContext,0)


        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.AbstractpackdeclaratorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_abstractpackdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractpackdeclarator" ):
                listener.enterAbstractpackdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractpackdeclarator" ):
                listener.exitAbstractpackdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractpackdeclarator" ):
                return visitor.visitAbstractpackdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def abstractpackdeclarator(self):

        localctx = grCpp2Parser.AbstractpackdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_abstractpackdeclarator)
        try:
            self.state = 1803
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1799
                self.noptrabstractpackdeclarator(0)
                pass
            elif token in [19, 86, 90, 113, 122, 127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1800
                self.ptroperator()
                self.state = 1801
                self.abstractpackdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrabstractpackdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.NoptrabstractpackdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(grCpp2Parser.ParametersandqualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(grCpp2Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(grCpp2Parser.RightBracket, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ConstantexpressionContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_noptrabstractpackdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractpackdeclarator" ):
                listener.enterNoptrabstractpackdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractpackdeclarator" ):
                listener.exitNoptrabstractpackdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractpackdeclarator" ):
                return visitor.visitNoptrabstractpackdeclarator(self)
            else:
                return visitor.visitChildren(self)



    def noptrabstractpackdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.NoptrabstractpackdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 268
        self.enterRecursionRule(localctx, 268, self.RULE_noptrabstractpackdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1806
            self.match(grCpp2Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1821
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1819
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                    if la_ == 1:
                        localctx = grCpp2Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1808
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1809
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = grCpp2Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1810
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1811
                        self.match(grCpp2Parser.LeftBracket)
                        self.state = 1813
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4965285389904001232) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -4464193130123974055) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 127) != 0):
                            self.state = 1812
                            self.constantexpression()


                        self.state = 1815
                        self.match(grCpp2Parser.RightBracket)
                        self.state = 1817
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                        if la_ == 1:
                            self.state = 1816
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1823
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterdeclarationclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(grCpp2Parser.ParameterdeclarationlistContext,0)


        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_parameterdeclarationclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationclause" ):
                listener.enterParameterdeclarationclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationclause" ):
                listener.exitParameterdeclarationclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationclause" ):
                return visitor.visitParameterdeclarationclause(self)
            else:
                return visitor.visitChildren(self)




    def parameterdeclarationclause(self):

        localctx = grCpp2Parser.ParameterdeclarationclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_parameterdeclarationclause)
        self._la = 0 # Token type
        try:
            self.state = 1834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8546704109035980600) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 1188950301625820125) != 0):
                    self.state = 1824
                    self.parameterdeclarationlist(0)


                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 1827
                    self.match(grCpp2Parser.Ellipsis)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1830
                self.parameterdeclarationlist(0)
                self.state = 1831
                self.match(grCpp2Parser.Comma)
                self.state = 1832
                self.match(grCpp2Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterdeclarationlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.ParameterdeclarationContext,0)


        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(grCpp2Parser.ParameterdeclarationlistContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_parameterdeclarationlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationlist" ):
                listener.enterParameterdeclarationlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationlist" ):
                listener.exitParameterdeclarationlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationlist" ):
                return visitor.visitParameterdeclarationlist(self)
            else:
                return visitor.visitChildren(self)



    def parameterdeclarationlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.ParameterdeclarationlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 272
        self.enterRecursionRule(localctx, 272, self.RULE_parameterdeclarationlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            self.parameterdeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1844
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,210,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.ParameterdeclarationlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterdeclarationlist)
                    self.state = 1839
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1840
                    self.match(grCpp2Parser.Comma)
                    self.state = 1841
                    self.parameterdeclaration() 
                self.state = 1846
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def Assign(self):
            return self.getToken(grCpp2Parser.Assign, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(grCpp2Parser.InitializerclauseContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_parameterdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclaration" ):
                listener.enterParameterdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclaration" ):
                listener.exitParameterdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclaration" ):
                return visitor.visitParameterdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def parameterdeclaration(self):

        localctx = grCpp2Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_parameterdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1847
                    self.attributespecifierseq(0)


                self.state = 1850
                self.declspecifierseq()
                self.state = 1851
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1853
                    self.attributespecifierseq(0)


                self.state = 1856
                self.declspecifierseq()
                self.state = 1857
                self.declarator()
                self.state = 1858
                self.match(grCpp2Parser.Assign)
                self.state = 1859
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1861
                    self.attributespecifierseq(0)


                self.state = 1864
                self.declspecifierseq()
                self.state = 1866
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1865
                    self.abstractdeclarator()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1868
                    self.attributespecifierseq(0)


                self.state = 1871
                self.declspecifierseq()
                self.state = 1873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19 or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 862051475919109) != 0):
                    self.state = 1872
                    self.abstractdeclarator()


                self.state = 1875
                self.match(grCpp2Parser.Assign)
                self.state = 1876
                self.initializerclause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclaratorContext,0)


        def functionbody(self):
            return self.getTypedRuleContext(grCpp2Parser.FunctionbodyContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclspecifierseqContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.VirtspecifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_functiondefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondefinition" ):
                listener.enterFunctiondefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondefinition" ):
                listener.exitFunctiondefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondefinition" ):
                return visitor.visitFunctiondefinition(self)
            else:
                return visitor.visitChildren(self)




    def functiondefinition(self):

        localctx = grCpp2Parser.FunctiondefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_functiondefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==80:
                self.state = 1880
                self.attributespecifierseq(0)


            self.state = 1884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 1883
                self.declspecifierseq()


            self.state = 1886
            self.declarator()
            self.state = 1888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31 or _la==46:
                self.state = 1887
                self.virtspecifierseq(0)


            self.state = 1890
            self.functionbody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionbodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.CompoundstatementContext,0)


        def ctorinitializer(self):
            return self.getTypedRuleContext(grCpp2Parser.CtorinitializerContext,0)


        def functiontryblock(self):
            return self.getTypedRuleContext(grCpp2Parser.FunctiontryblockContext,0)


        def Assign(self):
            return self.getToken(grCpp2Parser.Assign, 0)

        def Default(self):
            return self.getToken(grCpp2Parser.Default, 0)

        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def Delete(self):
            return self.getToken(grCpp2Parser.Delete, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_functionbody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionbody" ):
                listener.enterFunctionbody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionbody" ):
                listener.exitFunctionbody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionbody" ):
                return visitor.visitFunctionbody(self)
            else:
                return visitor.visitChildren(self)




    def functionbody(self):

        localctx = grCpp2Parser.FunctionbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_functionbody)
        self._la = 0 # Token type
        try:
            self.state = 1903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 1892
                    self.ctorinitializer()


                self.state = 1895
                self.compoundstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1896
                self.functiontryblock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1897
                self.match(grCpp2Parser.Assign)
                self.state = 1898
                self.match(grCpp2Parser.Default)
                self.state = 1899
                self.match(grCpp2Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1900
                self.match(grCpp2Parser.Assign)
                self.state = 1901
                self.match(grCpp2Parser.Delete)
                self.state = 1902
                self.match(grCpp2Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(grCpp2Parser.BraceorequalinitializerContext,0)


        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionlistContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = grCpp2Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_initializer)
        try:
            self.state = 1910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82, 94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1905
                self.braceorequalinitializer()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1906
                self.match(grCpp2Parser.LeftParen)
                self.state = 1907
                self.expressionlist()
                self.state = 1908
                self.match(grCpp2Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraceorequalinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(grCpp2Parser.Assign, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(grCpp2Parser.InitializerclauseContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(grCpp2Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_braceorequalinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraceorequalinitializer" ):
                listener.enterBraceorequalinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraceorequalinitializer" ):
                listener.exitBraceorequalinitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraceorequalinitializer" ):
                return visitor.visitBraceorequalinitializer(self)
            else:
                return visitor.visitChildren(self)




    def braceorequalinitializer(self):

        localctx = grCpp2Parser.BraceorequalinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_braceorequalinitializer)
        try:
            self.state = 1915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1912
                self.match(grCpp2Parser.Assign)
                self.state = 1913
                self.initializerclause()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1914
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.AssignmentexpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(grCpp2Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_initializerclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerclause" ):
                listener.enterInitializerclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerclause" ):
                listener.exitInitializerclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerclause" ):
                return visitor.visitInitializerclause(self)
            else:
                return visitor.visitChildren(self)




    def initializerclause(self):

        localctx = grCpp2Parser.InitializerclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_initializerclause)
        try:
            self.state = 1919
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 6, 7, 11, 12, 13, 17, 19, 21, 23, 24, 30, 32, 38, 39, 42, 43, 44, 45, 51, 53, 54, 55, 58, 62, 64, 65, 68, 69, 71, 74, 76, 78, 80, 84, 85, 86, 90, 91, 92, 93, 115, 116, 122, 127, 128, 134, 135, 136, 137, 138, 139, 140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1917
                self.assignmentexpression()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1918
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(grCpp2Parser.InitializerclauseContext,0)


        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(grCpp2Parser.InitializerlistContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_initializerlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerlist" ):
                listener.enterInitializerlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerlist" ):
                listener.exitInitializerlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerlist" ):
                return visitor.visitInitializerlist(self)
            else:
                return visitor.visitChildren(self)



    def initializerlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.InitializerlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 286
        self.enterRecursionRule(localctx, 286, self.RULE_initializerlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1922
            self.initializerclause()
            self.state = 1924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 1923
                self.match(grCpp2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 1934
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,228,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.InitializerlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerlist)
                    self.state = 1926
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1927
                    self.match(grCpp2Parser.Comma)
                    self.state = 1928
                    self.initializerclause()
                    self.state = 1930
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                    if la_ == 1:
                        self.state = 1929
                        self.match(grCpp2Parser.Ellipsis)

             
                self.state = 1936
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,228,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BracedinitlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(grCpp2Parser.LeftBrace, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(grCpp2Parser.InitializerlistContext,0)


        def RightBrace(self):
            return self.getToken(grCpp2Parser.RightBrace, 0)

        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_bracedinitlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracedinitlist" ):
                listener.enterBracedinitlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracedinitlist" ):
                listener.exitBracedinitlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracedinitlist" ):
                return visitor.visitBracedinitlist(self)
            else:
                return visitor.visitChildren(self)




    def bracedinitlist(self):

        localctx = grCpp2Parser.BracedinitlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_bracedinitlist)
        self._la = 0 # Token type
        try:
            self.state = 1946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1937
                self.match(grCpp2Parser.LeftBrace)
                self.state = 1938
                self.initializerlist(0)
                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 1939
                    self.match(grCpp2Parser.Comma)


                self.state = 1942
                self.match(grCpp2Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1944
                self.match(grCpp2Parser.LeftBrace)
                self.state = 1945
                self.match(grCpp2Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(grCpp2Parser.SimpletemplateidContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_classname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassname" ):
                listener.enterClassname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassname" ):
                listener.exitClassname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassname" ):
                return visitor.visitClassname(self)
            else:
                return visitor.visitChildren(self)




    def classname(self):

        localctx = grCpp2Parser.ClassnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_classname)
        try:
            self.state = 1950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1948
                self.match(grCpp2Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1949
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classhead(self):
            return self.getTypedRuleContext(grCpp2Parser.ClassheadContext,0)


        def LeftBrace(self):
            return self.getToken(grCpp2Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(grCpp2Parser.RightBrace, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(grCpp2Parser.MemberspecificationContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_classspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassspecifier" ):
                listener.enterClassspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassspecifier" ):
                listener.exitClassspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassspecifier" ):
                return visitor.visitClassspecifier(self)
            else:
                return visitor.visitChildren(self)




    def classspecifier(self):

        localctx = grCpp2Parser.ClassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_classspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1952
            self.classhead()
            self.state = 1953
            self.match(grCpp2Parser.LeftBrace)
            self.state = 1955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6095725564955854648) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 1855553415263300605) != 0):
                self.state = 1954
                self.memberspecification()


            self.state = 1957
            self.match(grCpp2Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassheadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classkey(self):
            return self.getTypedRuleContext(grCpp2Parser.ClasskeyContext,0)


        def classheadname(self):
            return self.getTypedRuleContext(grCpp2Parser.ClassheadnameContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def classvirtspecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.ClassvirtspecifierContext,0)


        def baseclause(self):
            return self.getTypedRuleContext(grCpp2Parser.BaseclauseContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_classhead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasshead" ):
                listener.enterClasshead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasshead" ):
                listener.exitClasshead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasshead" ):
                return visitor.visitClasshead(self)
            else:
                return visitor.visitChildren(self)




    def classhead(self):

        localctx = grCpp2Parser.ClassheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_classhead)
        self._la = 0 # Token type
        try:
            self.state = 1977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1959
                self.classkey()
                self.state = 1961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1960
                    self.attributespecifierseq(0)


                self.state = 1963
                self.classheadname()
                self.state = 1965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==31:
                    self.state = 1964
                    self.classvirtspecifier()


                self.state = 1968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 1967
                    self.baseclause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1970
                self.classkey()
                self.state = 1972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 1971
                    self.attributespecifierseq(0)


                self.state = 1975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 1974
                    self.baseclause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassheadnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(grCpp2Parser.ClassnameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_classheadname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassheadname" ):
                listener.enterClassheadname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassheadname" ):
                listener.exitClassheadname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassheadname" ):
                return visitor.visitClassheadname(self)
            else:
                return visitor.visitChildren(self)




    def classheadname(self):

        localctx = grCpp2Parser.ClassheadnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_classheadname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.state = 1979
                self.nestednamespecifier(0)


            self.state = 1982
            self.classname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassvirtspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(grCpp2Parser.Final, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_classvirtspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassvirtspecifier" ):
                listener.enterClassvirtspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassvirtspecifier" ):
                listener.exitClassvirtspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassvirtspecifier" ):
                return visitor.visitClassvirtspecifier(self)
            else:
                return visitor.visitChildren(self)




    def classvirtspecifier(self):

        localctx = grCpp2Parser.ClassvirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_classvirtspecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self.match(grCpp2Parser.Final)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClasskeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(grCpp2Parser.Class, 0)

        def Struct(self):
            return self.getToken(grCpp2Parser.Struct, 0)

        def Union(self):
            return self.getToken(grCpp2Parser.Union, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_classkey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasskey" ):
                listener.enterClasskey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasskey" ):
                listener.exitClasskey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasskey" ):
                return visitor.visitClasskey(self)
            else:
                return visitor.visitChildren(self)




    def classkey(self):

        localctx = grCpp2Parser.ClasskeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_classkey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1986
            _la = self._input.LA(1)
            if not(((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 72092778410016769) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.MemberdeclarationContext,0)


        def memberspecification(self):
            return self.getTypedRuleContext(grCpp2Parser.MemberspecificationContext,0)


        def accessspecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.AccessspecifierContext,0)


        def Colon(self):
            return self.getToken(grCpp2Parser.Colon, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_memberspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberspecification" ):
                listener.enterMemberspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberspecification" ):
                listener.exitMemberspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberspecification" ):
                return visitor.visitMemberspecification(self)
            else:
                return visitor.visitChildren(self)




    def memberspecification(self):

        localctx = grCpp2Parser.MemberspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_memberspecification)
        self._la = 0 # Token type
        try:
            self.state = 1997
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 6, 7, 11, 12, 13, 14, 15, 16, 19, 23, 26, 27, 29, 32, 34, 37, 38, 39, 40, 45, 50, 53, 54, 56, 57, 59, 61, 63, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 80, 86, 90, 92, 113, 121, 122, 123, 126, 127]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1988
                self.memberdeclaration()
                self.state = 1990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6095725564955854648) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 1855553415263300605) != 0):
                    self.state = 1989
                    self.memberspecification()


                pass
            elif token in [47, 48, 49]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1992
                self.accessspecifier()
                self.state = 1993
                self.match(grCpp2Parser.Colon)
                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6095725564955854648) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 1855553415263300605) != 0):
                    self.state = 1994
                    self.memberspecification()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(grCpp2Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclspecifierseqContext,0)


        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(grCpp2Parser.MemberdeclaratorlistContext,0)


        def functiondefinition(self):
            return self.getTypedRuleContext(grCpp2Parser.FunctiondefinitionContext,0)


        def usingdeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.UsingdeclarationContext,0)


        def static_assertdeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.Static_assertdeclarationContext,0)


        def templatedeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.TemplatedeclarationContext,0)


        def aliasdeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.AliasdeclarationContext,0)


        def emptydeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.EmptydeclarationContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_memberdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration" ):
                listener.enterMemberdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration" ):
                listener.exitMemberdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration" ):
                return visitor.visitMemberdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def memberdeclaration(self):

        localctx = grCpp2Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_memberdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2000
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 1999
                    self.attributespecifierseq(0)


                self.state = 2003
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                if la_ == 1:
                    self.state = 2002
                    self.declspecifierseq()


                self.state = 2006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35184372613128) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 870847568957701) != 0):
                    self.state = 2005
                    self.memberdeclaratorlist(0)


                self.state = 2008
                self.match(grCpp2Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2009
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2010
                self.usingdeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2011
                self.static_assertdeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2012
                self.templatedeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2013
                self.aliasdeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2014
                self.emptydeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclaratorlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.MemberdeclaratorContext,0)


        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(grCpp2Parser.MemberdeclaratorlistContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_memberdeclaratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaratorlist" ):
                listener.enterMemberdeclaratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaratorlist" ):
                listener.exitMemberdeclaratorlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaratorlist" ):
                return visitor.visitMemberdeclaratorlist(self)
            else:
                return visitor.visitChildren(self)



    def memberdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.MemberdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 306
        self.enterRecursionRule(localctx, 306, self.RULE_memberdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2018
            self.memberdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2025
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.MemberdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_memberdeclaratorlist)
                    self.state = 2020
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2021
                    self.match(grCpp2Parser.Comma)
                    self.state = 2022
                    self.memberdeclarator() 
                self.state = 2027
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MemberdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclaratorContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.VirtspecifierseqContext,0)


        def purespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.PurespecifierContext,0)


        def braceorequalinitializer(self):
            return self.getTypedRuleContext(grCpp2Parser.BraceorequalinitializerContext,0)


        def Colon(self):
            return self.getToken(grCpp2Parser.Colon, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ConstantexpressionContext,0)


        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_memberdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclarator" ):
                listener.enterMemberdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclarator" ):
                listener.exitMemberdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclarator" ):
                return visitor.visitMemberdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def memberdeclarator(self):

        localctx = grCpp2Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_memberdeclarator)
        self._la = 0 # Token type
        try:
            self.state = 2047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2028
                self.declarator()
                self.state = 2030
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                if la_ == 1:
                    self.state = 2029
                    self.virtspecifierseq(0)


                self.state = 2033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 2032
                    self.purespecifier()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2035
                self.declarator()
                self.state = 2037
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 2036
                    self.braceorequalinitializer()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 2039
                    self.match(grCpp2Parser.Identifier)


                self.state = 2043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 2042
                    self.attributespecifierseq(0)


                self.state = 2045
                self.match(grCpp2Parser.Colon)
                self.state = 2046
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtspecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def virtspecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.VirtspecifierContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.VirtspecifierseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_virtspecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifierseq" ):
                listener.enterVirtspecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifierseq" ):
                listener.exitVirtspecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifierseq" ):
                return visitor.visitVirtspecifierseq(self)
            else:
                return visitor.visitChildren(self)



    def virtspecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.VirtspecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 310
        self.enterRecursionRule(localctx, 310, self.RULE_virtspecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2050
            self.virtspecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2056
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.VirtspecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_virtspecifierseq)
                    self.state = 2052
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2053
                    self.virtspecifier() 
                self.state = 2058
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VirtspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Override(self):
            return self.getToken(grCpp2Parser.Override, 0)

        def Final(self):
            return self.getToken(grCpp2Parser.Final, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_virtspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifier" ):
                listener.enterVirtspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifier" ):
                listener.exitVirtspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifier" ):
                return visitor.visitVirtspecifier(self)
            else:
                return visitor.visitChildren(self)




    def virtspecifier(self):

        localctx = grCpp2Parser.VirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_virtspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2059
            _la = self._input.LA(1)
            if not(_la==31 or _la==46):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PurespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # Token

        def Assign(self):
            return self.getToken(grCpp2Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(grCpp2Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_purespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurespecifier" ):
                listener.enterPurespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurespecifier" ):
                listener.exitPurespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPurespecifier" ):
                return visitor.visitPurespecifier(self)
            else:
                return visitor.visitChildren(self)




#    def purespecifier(self):

 #       localctx = grCpp2Parser.PurespecifierContext(self, self._ctx, self.state)
  #      self.enterRule(localctx, 314, self.RULE_purespecifier)
   #     try:
    #        self.enterOuterAlt(localctx, 1)
     #       self.state = 2061
      #      self.match(grCpp2Parser.Assign)
       #     self.state = 2062
        #    localctx.val = self.match(grCpp2Parser.Octalliteral)
         #   if((None if localctx.val is None else localctx.val.text).compareTo("0")!=0) throw new InputMismatchException(this);
#        except RecognitionException as re:
 #           localctx.exception = re
  #          self._errHandler.reportError(self, re)
   #         self._errHandler.recover(self, re)
    #    finally:
     #       self.exitRule()
#        return localctx


    class BaseclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(grCpp2Parser.Colon, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(grCpp2Parser.BasespecifierlistContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_baseclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseclause" ):
                listener.enterBaseclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseclause" ):
                listener.exitBaseclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseclause" ):
                return visitor.visitBaseclause(self)
            else:
                return visitor.visitChildren(self)




    def baseclause(self):

        localctx = grCpp2Parser.BaseclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_baseclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.match(grCpp2Parser.Colon)
            self.state = 2066
            self.basespecifierlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasespecifierlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.BasespecifierContext,0)


        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(grCpp2Parser.BasespecifierlistContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_basespecifierlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifierlist" ):
                listener.enterBasespecifierlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifierlist" ):
                listener.exitBasespecifierlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifierlist" ):
                return visitor.visitBasespecifierlist(self)
            else:
                return visitor.visitChildren(self)



    def basespecifierlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.BasespecifierlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 318
        self.enterRecursionRule(localctx, 318, self.RULE_basespecifierlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2069
            self.basespecifier()
            self.state = 2071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 2070
                self.match(grCpp2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2081
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,257,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.BasespecifierlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_basespecifierlist)
                    self.state = 2073
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2074
                    self.match(grCpp2Parser.Comma)
                    self.state = 2075
                    self.basespecifier()
                    self.state = 2077
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                    if la_ == 1:
                        self.state = 2076
                        self.match(grCpp2Parser.Ellipsis)

             
                self.state = 2083
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basetypespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.BasetypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def Virtual(self):
            return self.getToken(grCpp2Parser.Virtual, 0)

        def accessspecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.AccessspecifierContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_basespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifier" ):
                listener.enterBasespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifier" ):
                listener.exitBasespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifier" ):
                return visitor.visitBasespecifier(self)
            else:
                return visitor.visitChildren(self)




    def basespecifier(self):

        localctx = grCpp2Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_basespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 2084
                    self.attributespecifierseq(0)


                self.state = 2087
                self.basetypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 2088
                    self.attributespecifierseq(0)


                self.state = 2091
                self.match(grCpp2Parser.Virtual)
                self.state = 2093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 985162418487296) != 0):
                    self.state = 2092
                    self.accessspecifier()


                self.state = 2095
                self.basetypespecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 2096
                    self.attributespecifierseq(0)


                self.state = 2099
                self.accessspecifier()
                self.state = 2101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 2100
                    self.match(grCpp2Parser.Virtual)


                self.state = 2103
                self.basetypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassordecltypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(grCpp2Parser.ClassnameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.NestednamespecifierContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_classordecltype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassordecltype" ):
                listener.enterClassordecltype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassordecltype" ):
                listener.exitClassordecltype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassordecltype" ):
                return visitor.visitClassordecltype(self)
            else:
                return visitor.visitChildren(self)




    def classordecltype(self):

        localctx = grCpp2Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_classordecltype)
        try:
            self.state = 2112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2108
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 2107
                    self.nestednamespecifier(0)


                self.state = 2110
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2111
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasetypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(grCpp2Parser.ClassordecltypeContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_basetypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasetypespecifier" ):
                listener.enterBasetypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasetypespecifier" ):
                listener.exitBasetypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasetypespecifier" ):
                return visitor.visitBasetypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def basetypespecifier(self):

        localctx = grCpp2Parser.BasetypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_basetypespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2114
            self.classordecltype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Private(self):
            return self.getToken(grCpp2Parser.Private, 0)

        def Protected(self):
            return self.getToken(grCpp2Parser.Protected, 0)

        def Public(self):
            return self.getToken(grCpp2Parser.Public, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_accessspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessspecifier" ):
                listener.enterAccessspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessspecifier" ):
                listener.exitAccessspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessspecifier" ):
                return visitor.visitAccessspecifier(self)
            else:
                return visitor.visitChildren(self)




    def accessspecifier(self):

        localctx = grCpp2Parser.AccessspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_accessspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2116
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 985162418487296) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversionfunctionidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(grCpp2Parser.Operator, 0)

        def conversiontypeid(self):
            return self.getTypedRuleContext(grCpp2Parser.ConversiontypeidContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_conversionfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionfunctionid" ):
                listener.enterConversionfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionfunctionid" ):
                listener.exitConversionfunctionid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversionfunctionid" ):
                return visitor.visitConversionfunctionid(self)
            else:
                return visitor.visitChildren(self)




    def conversionfunctionid(self):

        localctx = grCpp2Parser.ConversionfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_conversionfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            self.match(grCpp2Parser.Operator)
            self.state = 2119
            self.conversiontypeid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversiontypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.TypespecifierseqContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_conversiontypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiontypeid" ):
                listener.enterConversiontypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiontypeid" ):
                listener.exitConversiontypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversiontypeid" ):
                return visitor.visitConversiontypeid(self)
            else:
                return visitor.visitChildren(self)




    def conversiontypeid(self):

        localctx = grCpp2Parser.ConversiontypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_conversiontypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2121
            self.typespecifierseq()
            self.state = 2123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 2122
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversiondeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(grCpp2Parser.PtroperatorContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_conversiondeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiondeclarator" ):
                listener.enterConversiondeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiondeclarator" ):
                listener.exitConversiondeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversiondeclarator" ):
                return visitor.visitConversiondeclarator(self)
            else:
                return visitor.visitChildren(self)




    def conversiondeclarator(self):

        localctx = grCpp2Parser.ConversiondeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_conversiondeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2125
            self.ptroperator()
            self.state = 2127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.state = 2126
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtorinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(grCpp2Parser.Colon, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(grCpp2Parser.MeminitializerlistContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_ctorinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtorinitializer" ):
                listener.enterCtorinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtorinitializer" ):
                listener.exitCtorinitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtorinitializer" ):
                return visitor.visitCtorinitializer(self)
            else:
                return visitor.visitChildren(self)




    def ctorinitializer(self):

        localctx = grCpp2Parser.CtorinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_ctorinitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2129
            self.match(grCpp2Parser.Colon)
            self.state = 2130
            self.meminitializerlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializerlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializer(self):
            return self.getTypedRuleContext(grCpp2Parser.MeminitializerContext,0)


        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(grCpp2Parser.MeminitializerlistContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_meminitializerlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerlist" ):
                listener.enterMeminitializerlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerlist" ):
                listener.exitMeminitializerlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerlist" ):
                return visitor.visitMeminitializerlist(self)
            else:
                return visitor.visitChildren(self)




    def meminitializerlist(self):

        localctx = grCpp2Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_meminitializerlist)
        self._la = 0 # Token type
        try:
            self.state = 2143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2132
                self.meminitializer()
                self.state = 2134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 2133
                    self.match(grCpp2Parser.Ellipsis)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2136
                self.meminitializer()
                self.state = 2138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 2137
                    self.match(grCpp2Parser.Ellipsis)


                self.state = 2140
                self.match(grCpp2Parser.Comma)
                self.state = 2141
                self.meminitializerlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerid(self):
            return self.getTypedRuleContext(grCpp2Parser.MeminitializeridContext,0)


        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(grCpp2Parser.ExpressionlistContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(grCpp2Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_meminitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializer" ):
                listener.enterMeminitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializer" ):
                listener.exitMeminitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializer" ):
                return visitor.visitMeminitializer(self)
            else:
                return visitor.visitChildren(self)




    def meminitializer(self):

        localctx = grCpp2Parser.MeminitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_meminitializer)
        self._la = 0 # Token type
        try:
            self.state = 2155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2145
                self.meminitializerid()
                self.state = 2146
                self.match(grCpp2Parser.LeftParen)
                self.state = 2148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4965285389904001232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8928386260247685965) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 8129) != 0):
                    self.state = 2147
                    self.expressionlist()


                self.state = 2150
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2152
                self.meminitializerid()
                self.state = 2153
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializeridContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(grCpp2Parser.ClassordecltypeContext,0)


        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_meminitializerid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerid" ):
                listener.enterMeminitializerid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerid" ):
                listener.exitMeminitializerid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerid" ):
                return visitor.visitMeminitializerid(self)
            else:
                return visitor.visitChildren(self)




    def meminitializerid(self):

        localctx = grCpp2Parser.MeminitializeridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_meminitializerid)
        try:
            self.state = 2159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2157
                self.classordecltype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2158
                self.match(grCpp2Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorfunctionidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(grCpp2Parser.Operator, 0)

        def theoperator(self):
            return self.getTypedRuleContext(grCpp2Parser.TheoperatorContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_operatorfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorfunctionid" ):
                listener.enterOperatorfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorfunctionid" ):
                listener.exitOperatorfunctionid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperatorfunctionid" ):
                return visitor.visitOperatorfunctionid(self)
            else:
                return visitor.visitChildren(self)




    def operatorfunctionid(self):

        localctx = grCpp2Parser.OperatorfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_operatorfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2161
            self.match(grCpp2Parser.Operator)
            self.state = 2162
            self.theoperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteraloperatoridContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(grCpp2Parser.Operator, 0)

        def Stringliteral(self):
            return self.getToken(grCpp2Parser.Stringliteral, 0)

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(grCpp2Parser.Userdefinedstringliteral, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_literaloperatorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteraloperatorid" ):
                listener.enterLiteraloperatorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteraloperatorid" ):
                listener.exitLiteraloperatorid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteraloperatorid" ):
                return visitor.visitLiteraloperatorid(self)
            else:
                return visitor.visitChildren(self)




    def literaloperatorid(self):

        localctx = grCpp2Parser.LiteraloperatoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_literaloperatorid)
        try:
            self.state = 2169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2164
                self.match(grCpp2Parser.Operator)
                self.state = 2165
                self.match(grCpp2Parser.Stringliteral)
                self.state = 2166
                self.match(grCpp2Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2167
                self.match(grCpp2Parser.Operator)
                self.state = 2168
                self.match(grCpp2Parser.Userdefinedstringliteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplatedeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(grCpp2Parser.Template, 0)

        def Less(self):
            return self.getToken(grCpp2Parser.Less, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(grCpp2Parser.TemplateparameterlistContext,0)


        def Greater(self):
            return self.getToken(grCpp2Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_templatedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatedeclaration" ):
                listener.enterTemplatedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatedeclaration" ):
                listener.exitTemplatedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplatedeclaration" ):
                return visitor.visitTemplatedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def templatedeclaration(self):

        localctx = grCpp2Parser.TemplatedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_templatedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            self.match(grCpp2Parser.Template)
            self.state = 2172
            self.match(grCpp2Parser.Less)
            self.state = 2173
            self.templateparameterlist(0)
            self.state = 2174
            self.match(grCpp2Parser.Greater)
            self.state = 2175
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateparameterlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateparameter(self):
            return self.getTypedRuleContext(grCpp2Parser.TemplateparameterContext,0)


        def templateparameterlist(self):
            return self.getTypedRuleContext(grCpp2Parser.TemplateparameterlistContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_templateparameterlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameterlist" ):
                listener.enterTemplateparameterlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameterlist" ):
                listener.exitTemplateparameterlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameterlist" ):
                return visitor.visitTemplateparameterlist(self)
            else:
                return visitor.visitChildren(self)



    def templateparameterlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.TemplateparameterlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 348
        self.enterRecursionRule(localctx, 348, self.RULE_templateparameterlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2178
            self.templateparameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2185
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,275,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.TemplateparameterlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateparameterlist)
                    self.state = 2180
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2181
                    self.match(grCpp2Parser.Comma)
                    self.state = 2182
                    self.templateparameter() 
                self.state = 2187
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,275,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TemplateparameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeparameter(self):
            return self.getTypedRuleContext(grCpp2Parser.TypeparameterContext,0)


        def parameterdeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.ParameterdeclarationContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_templateparameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameter" ):
                listener.enterTemplateparameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameter" ):
                listener.exitTemplateparameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameter" ):
                return visitor.visitTemplateparameter(self)
            else:
                return visitor.visitChildren(self)




    def templateparameter(self):

        localctx = grCpp2Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_templateparameter)
        try:
            self.state = 2190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2188
                self.typeparameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2189
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeparameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(grCpp2Parser.Class, 0)

        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(grCpp2Parser.Assign, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(grCpp2Parser.ThetypeidContext,0)


        def Typename_(self):
            return self.getToken(grCpp2Parser.Typename_, 0)

        def Template(self):
            return self.getToken(grCpp2Parser.Template, 0)

        def Less(self):
            return self.getToken(grCpp2Parser.Less, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(grCpp2Parser.TemplateparameterlistContext,0)


        def Greater(self):
            return self.getToken(grCpp2Parser.Greater, 0)

        def idexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.IdexpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_typeparameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter" ):
                listener.enterTypeparameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter" ):
                listener.exitTypeparameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter" ):
                return visitor.visitTypeparameter(self)
            else:
                return visitor.visitChildren(self)




    def typeparameter(self):

        localctx = grCpp2Parser.TypeparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_typeparameter)
        self._la = 0 # Token type
        try:
            self.state = 2240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2192
                self.match(grCpp2Parser.Class)
                self.state = 2194
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
                if la_ == 1:
                    self.state = 2193
                    self.match(grCpp2Parser.Ellipsis)


                self.state = 2197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
                if la_ == 1:
                    self.state = 2196
                    self.match(grCpp2Parser.Identifier)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2199
                self.match(grCpp2Parser.Class)
                self.state = 2201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 2200
                    self.match(grCpp2Parser.Identifier)


                self.state = 2203
                self.match(grCpp2Parser.Assign)
                self.state = 2204
                self.thetypeid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2205
                self.match(grCpp2Parser.Typename_)
                self.state = 2207
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                if la_ == 1:
                    self.state = 2206
                    self.match(grCpp2Parser.Ellipsis)


                self.state = 2210
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
                if la_ == 1:
                    self.state = 2209
                    self.match(grCpp2Parser.Identifier)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2212
                self.match(grCpp2Parser.Typename_)
                self.state = 2214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 2213
                    self.match(grCpp2Parser.Identifier)


                self.state = 2216
                self.match(grCpp2Parser.Assign)
                self.state = 2217
                self.thetypeid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2218
                self.match(grCpp2Parser.Template)
                self.state = 2219
                self.match(grCpp2Parser.Less)
                self.state = 2220
                self.templateparameterlist(0)
                self.state = 2221
                self.match(grCpp2Parser.Greater)
                self.state = 2222
                self.match(grCpp2Parser.Class)
                self.state = 2224
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 2223
                    self.match(grCpp2Parser.Ellipsis)


                self.state = 2227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                if la_ == 1:
                    self.state = 2226
                    self.match(grCpp2Parser.Identifier)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2229
                self.match(grCpp2Parser.Template)
                self.state = 2230
                self.match(grCpp2Parser.Less)
                self.state = 2231
                self.templateparameterlist(0)
                self.state = 2232
                self.match(grCpp2Parser.Greater)
                self.state = 2233
                self.match(grCpp2Parser.Class)
                self.state = 2235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 2234
                    self.match(grCpp2Parser.Identifier)


                self.state = 2237
                self.match(grCpp2Parser.Assign)
                self.state = 2238
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletemplateidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templatename(self):
            return self.getTypedRuleContext(grCpp2Parser.TemplatenameContext,0)


        def Less(self):
            return self.getToken(grCpp2Parser.Less, 0)

        def Greater(self):
            return self.getToken(grCpp2Parser.Greater, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(grCpp2Parser.TemplateargumentlistContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_simpletemplateid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletemplateid" ):
                listener.enterSimpletemplateid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletemplateid" ):
                listener.exitSimpletemplateid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletemplateid" ):
                return visitor.visitSimpletemplateid(self)
            else:
                return visitor.visitChildren(self)




    def simpletemplateid(self):

        localctx = grCpp2Parser.SimpletemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_simpletemplateid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2242
            self.templatename()
            self.state = 2243
            self.match(grCpp2Parser.Less)
            self.state = 2245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5541746142274582736) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -4464193130123972999) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 127) != 0):
                self.state = 2244
                self.templateargumentlist(0)


            self.state = 2247
            self.match(grCpp2Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletemplateid(self):
            return self.getTypedRuleContext(grCpp2Parser.SimpletemplateidContext,0)


        def operatorfunctionid(self):
            return self.getTypedRuleContext(grCpp2Parser.OperatorfunctionidContext,0)


        def Less(self):
            return self.getToken(grCpp2Parser.Less, 0)

        def Greater(self):
            return self.getToken(grCpp2Parser.Greater, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(grCpp2Parser.TemplateargumentlistContext,0)


        def literaloperatorid(self):
            return self.getTypedRuleContext(grCpp2Parser.LiteraloperatoridContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_templateid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateid" ):
                listener.enterTemplateid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateid" ):
                listener.exitTemplateid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateid" ):
                return visitor.visitTemplateid(self)
            else:
                return visitor.visitChildren(self)




    def templateid(self):

        localctx = grCpp2Parser.TemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_templateid)
        self._la = 0 # Token type
        try:
            self.state = 2264
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2249
                self.simpletemplateid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2250
                self.operatorfunctionid()
                self.state = 2251
                self.match(grCpp2Parser.Less)
                self.state = 2253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5541746142274582736) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -4464193130123972999) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 127) != 0):
                    self.state = 2252
                    self.templateargumentlist(0)


                self.state = 2255
                self.match(grCpp2Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2257
                self.literaloperatorid()
                self.state = 2258
                self.match(grCpp2Parser.Less)
                self.state = 2260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5541746142274582736) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -4464193130123972999) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 127) != 0):
                    self.state = 2259
                    self.templateargumentlist(0)


                self.state = 2262
                self.match(grCpp2Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplatenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_templatename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatename" ):
                listener.enterTemplatename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatename" ):
                listener.exitTemplatename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplatename" ):
                return visitor.visitTemplatename(self)
            else:
                return visitor.visitChildren(self)




    def templatename(self):

        localctx = grCpp2Parser.TemplatenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_templatename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2266
            self.match(grCpp2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateargumentlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateargument(self):
            return self.getTypedRuleContext(grCpp2Parser.TemplateargumentContext,0)


        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(grCpp2Parser.TemplateargumentlistContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_templateargumentlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargumentlist" ):
                listener.enterTemplateargumentlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargumentlist" ):
                listener.exitTemplateargumentlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargumentlist" ):
                return visitor.visitTemplateargumentlist(self)
            else:
                return visitor.visitChildren(self)



    def templateargumentlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.TemplateargumentlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 360
        self.enterRecursionRule(localctx, 360, self.RULE_templateargumentlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2269
            self.templateargument()
            self.state = 2271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 2270
                self.match(grCpp2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2281
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,293,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.TemplateargumentlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateargumentlist)
                    self.state = 2273
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2274
                    self.match(grCpp2Parser.Comma)
                    self.state = 2275
                    self.templateargument()
                    self.state = 2277
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
                    if la_ == 1:
                        self.state = 2276
                        self.match(grCpp2Parser.Ellipsis)

             
                self.state = 2283
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,293,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TemplateargumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypeid(self):
            return self.getTypedRuleContext(grCpp2Parser.ThetypeidContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ConstantexpressionContext,0)


        def idexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.IdexpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_templateargument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargument" ):
                listener.enterTemplateargument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargument" ):
                listener.exitTemplateargument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargument" ):
                return visitor.visitTemplateargument(self)
            else:
                return visitor.visitChildren(self)




    def templateargument(self):

        localctx = grCpp2Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_templateargument)
        try:
            self.state = 2287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2284
                self.thetypeid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2285
                self.constantexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2286
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypenamespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typename_(self):
            return self.getToken(grCpp2Parser.Typename_, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(grCpp2Parser.NestednamespecifierContext,0)


        def Identifier(self):
            return self.getToken(grCpp2Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(grCpp2Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(grCpp2Parser.Template, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_typenamespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypenamespecifier" ):
                listener.enterTypenamespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypenamespecifier" ):
                listener.exitTypenamespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypenamespecifier" ):
                return visitor.visitTypenamespecifier(self)
            else:
                return visitor.visitChildren(self)




    def typenamespecifier(self):

        localctx = grCpp2Parser.TypenamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_typenamespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2289
                self.match(grCpp2Parser.Typename_)
                self.state = 2290
                self.nestednamespecifier(0)
                self.state = 2291
                self.match(grCpp2Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2293
                self.match(grCpp2Parser.Typename_)
                self.state = 2294
                self.nestednamespecifier(0)
                self.state = 2296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 2295
                    self.match(grCpp2Parser.Template)


                self.state = 2298
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitinstantiationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(grCpp2Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclarationContext,0)


        def Extern(self):
            return self.getToken(grCpp2Parser.Extern, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_explicitinstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitinstantiation" ):
                listener.enterExplicitinstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitinstantiation" ):
                listener.exitExplicitinstantiation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitinstantiation" ):
                return visitor.visitExplicitinstantiation(self)
            else:
                return visitor.visitChildren(self)




    def explicitinstantiation(self):

        localctx = grCpp2Parser.ExplicitinstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_explicitinstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 2302
                self.match(grCpp2Parser.Extern)


            self.state = 2305
            self.match(grCpp2Parser.Template)
            self.state = 2306
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitspecializationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(grCpp2Parser.Template, 0)

        def Less(self):
            return self.getToken(grCpp2Parser.Less, 0)

        def Greater(self):
            return self.getToken(grCpp2Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_explicitspecialization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitspecialization" ):
                listener.enterExplicitspecialization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitspecialization" ):
                listener.exitExplicitspecialization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitspecialization" ):
                return visitor.visitExplicitspecialization(self)
            else:
                return visitor.visitChildren(self)




    def explicitspecialization(self):

        localctx = grCpp2Parser.ExplicitspecializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_explicitspecialization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2308
            self.match(grCpp2Parser.Template)
            self.state = 2309
            self.match(grCpp2Parser.Less)
            self.state = 2310
            self.match(grCpp2Parser.Greater)
            self.state = 2311
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryblockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(grCpp2Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(grCpp2Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_tryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryblock" ):
                listener.enterTryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryblock" ):
                listener.exitTryblock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryblock" ):
                return visitor.visitTryblock(self)
            else:
                return visitor.visitChildren(self)




    def tryblock(self):

        localctx = grCpp2Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_tryblock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2313
            self.match(grCpp2Parser.Try)
            self.state = 2314
            self.compoundstatement()
            self.state = 2315
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiontryblockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(grCpp2Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(grCpp2Parser.HandlerseqContext,0)


        def ctorinitializer(self):
            return self.getTypedRuleContext(grCpp2Parser.CtorinitializerContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_functiontryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiontryblock" ):
                listener.enterFunctiontryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiontryblock" ):
                listener.exitFunctiontryblock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiontryblock" ):
                return visitor.visitFunctiontryblock(self)
            else:
                return visitor.visitChildren(self)




    def functiontryblock(self):

        localctx = grCpp2Parser.FunctiontryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_functiontryblock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2317
            self.match(grCpp2Parser.Try)
            self.state = 2319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 2318
                self.ctorinitializer()


            self.state = 2321
            self.compoundstatement()
            self.state = 2322
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handler(self):
            return self.getTypedRuleContext(grCpp2Parser.HandlerContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(grCpp2Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_handlerseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerseq" ):
                listener.enterHandlerseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerseq" ):
                listener.exitHandlerseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerseq" ):
                return visitor.visitHandlerseq(self)
            else:
                return visitor.visitChildren(self)




    def handlerseq(self):

        localctx = grCpp2Parser.HandlerseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_handlerseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2324
            self.handler()
            self.state = 2326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 2325
                self.handlerseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(grCpp2Parser.Catch, 0)

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def exceptiondeclaration(self):
            return self.getTypedRuleContext(grCpp2Parser.ExceptiondeclarationContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(grCpp2Parser.CompoundstatementContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandler" ):
                listener.enterHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandler" ):
                listener.exitHandler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandler" ):
                return visitor.visitHandler(self)
            else:
                return visitor.visitChildren(self)




    def handler(self):

        localctx = grCpp2Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_handler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2328
            self.match(grCpp2Parser.Catch)
            self.state = 2329
            self.match(grCpp2Parser.LeftParen)
            self.state = 2330
            self.exceptiondeclaration()
            self.state = 2331
            self.match(grCpp2Parser.RightParen)
            self.state = 2332
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptiondeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.TypespecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(grCpp2Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(grCpp2Parser.AttributespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(grCpp2Parser.AbstractdeclaratorContext,0)


        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_exceptiondeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptiondeclaration" ):
                listener.enterExceptiondeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptiondeclaration" ):
                listener.exitExceptiondeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptiondeclaration" ):
                return visitor.visitExceptiondeclaration(self)
            else:
                return visitor.visitChildren(self)




    def exceptiondeclaration(self):

        localctx = grCpp2Parser.ExceptiondeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_exceptiondeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 2334
                    self.attributespecifierseq(0)


                self.state = 2337
                self.typespecifierseq()
                self.state = 2338
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==80:
                    self.state = 2340
                    self.attributespecifierseq(0)


                self.state = 2343
                self.typespecifierseq()
                self.state = 2345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19 or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 862051475919109) != 0):
                    self.state = 2344
                    self.abstractdeclarator()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2347
                self.match(grCpp2Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(grCpp2Parser.Throw, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.AssignmentexpressionContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_throwexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowexpression" ):
                listener.enterThrowexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowexpression" ):
                listener.exitThrowexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowexpression" ):
                return visitor.visitThrowexpression(self)
            else:
                return visitor.visitChildren(self)




    def throwexpression(self):

        localctx = grCpp2Parser.ThrowexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_throwexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2350
            self.match(grCpp2Parser.Throw)
            self.state = 2352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 2351
                self.assignmentexpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicexceptionspecification(self):
            return self.getTypedRuleContext(grCpp2Parser.DynamicexceptionspecificationContext,0)


        def noexceptspecification(self):
            return self.getTypedRuleContext(grCpp2Parser.NoexceptspecificationContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_exceptionspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionspecification" ):
                listener.enterExceptionspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionspecification" ):
                listener.exitExceptionspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptionspecification" ):
                return visitor.visitExceptionspecification(self)
            else:
                return visitor.visitChildren(self)




    def exceptionspecification(self):

        localctx = grCpp2Parser.ExceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_exceptionspecification)
        try:
            self.state = 2356
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2354
                self.dynamicexceptionspecification()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2355
                self.noexceptspecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicexceptionspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(grCpp2Parser.Throw, 0)

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(grCpp2Parser.TypeidlistContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_dynamicexceptionspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicexceptionspecification" ):
                listener.enterDynamicexceptionspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicexceptionspecification" ):
                listener.exitDynamicexceptionspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicexceptionspecification" ):
                return visitor.visitDynamicexceptionspecification(self)
            else:
                return visitor.visitChildren(self)




    def dynamicexceptionspecification(self):

        localctx = grCpp2Parser.DynamicexceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_dynamicexceptionspecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2358
            self.match(grCpp2Parser.Throw)
            self.state = 2359
            self.match(grCpp2Parser.LeftParen)
            self.state = 2361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 603483179072420032) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 297237575406452967) != 0):
                self.state = 2360
                self.typeidlist(0)


            self.state = 2363
            self.match(grCpp2Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeidlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypeid(self):
            return self.getTypedRuleContext(grCpp2Parser.ThetypeidContext,0)


        def Ellipsis(self):
            return self.getToken(grCpp2Parser.Ellipsis, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(grCpp2Parser.TypeidlistContext,0)


        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_typeidlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidlist" ):
                listener.enterTypeidlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidlist" ):
                listener.exitTypeidlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidlist" ):
                return visitor.visitTypeidlist(self)
            else:
                return visitor.visitChildren(self)



    def typeidlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = grCpp2Parser.TypeidlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 386
        self.enterRecursionRule(localctx, 386, self.RULE_typeidlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            self.thetypeid()
            self.state = 2368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.state = 2367
                self.match(grCpp2Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2378
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,309,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = grCpp2Parser.TypeidlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeidlist)
                    self.state = 2370
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2371
                    self.match(grCpp2Parser.Comma)
                    self.state = 2372
                    self.thetypeid()
                    self.state = 2374
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                    if la_ == 1:
                        self.state = 2373
                        self.match(grCpp2Parser.Ellipsis)

             
                self.state = 2380
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,309,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NoexceptspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(grCpp2Parser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(grCpp2Parser.ConstantexpressionContext,0)


        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_noexceptspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptspecification" ):
                listener.enterNoexceptspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptspecification" ):
                listener.exitNoexceptspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoexceptspecification" ):
                return visitor.visitNoexceptspecification(self)
            else:
                return visitor.visitChildren(self)




    def noexceptspecification(self):

        localctx = grCpp2Parser.NoexceptspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_noexceptspecification)
        try:
            self.state = 2387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2381
                self.match(grCpp2Parser.Noexcept)
                self.state = 2382
                self.match(grCpp2Parser.LeftParen)
                self.state = 2383
                self.constantexpression()
                self.state = 2384
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2386
                self.match(grCpp2Parser.Noexcept)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(grCpp2Parser.New, 0)

        def Delete(self):
            return self.getToken(grCpp2Parser.Delete, 0)

        def LeftBracket(self):
            return self.getToken(grCpp2Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(grCpp2Parser.RightBracket, 0)

        def Plus(self):
            return self.getToken(grCpp2Parser.Plus, 0)

        def Minus(self):
            return self.getToken(grCpp2Parser.Minus, 0)

        def Star(self):
            return self.getToken(grCpp2Parser.Star, 0)

        def Div(self):
            return self.getToken(grCpp2Parser.Div, 0)

        def Mod(self):
            return self.getToken(grCpp2Parser.Mod, 0)

        def Caret(self):
            return self.getToken(grCpp2Parser.Caret, 0)

        def And(self):
            return self.getToken(grCpp2Parser.And, 0)

        def Or(self):
            return self.getToken(grCpp2Parser.Or, 0)

        def Tilde(self):
            return self.getToken(grCpp2Parser.Tilde, 0)

        def Not(self):
            return self.getToken(grCpp2Parser.Not, 0)

        def Assign(self):
            return self.getToken(grCpp2Parser.Assign, 0)

        def Less(self):
            return self.getToken(grCpp2Parser.Less, 0)

        def Greater(self):
            return self.getToken(grCpp2Parser.Greater, 0)

        def PlusAssign(self):
            return self.getToken(grCpp2Parser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(grCpp2Parser.MinusAssign, 0)

        def StarAssign(self):
            return self.getToken(grCpp2Parser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(grCpp2Parser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(grCpp2Parser.ModAssign, 0)

        def XorAssign(self):
            return self.getToken(grCpp2Parser.XorAssign, 0)

        def AndAssign(self):
            return self.getToken(grCpp2Parser.AndAssign, 0)

        def OrAssign(self):
            return self.getToken(grCpp2Parser.OrAssign, 0)

        def LeftShift(self):
            return self.getToken(grCpp2Parser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(grCpp2Parser.RightShift, 0)

        def RightShiftAssign(self):
            return self.getToken(grCpp2Parser.RightShiftAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(grCpp2Parser.LeftShiftAssign, 0)

        def Equal(self):
            return self.getToken(grCpp2Parser.Equal, 0)

        def NotEqual(self):
            return self.getToken(grCpp2Parser.NotEqual, 0)

        def LessEqual(self):
            return self.getToken(grCpp2Parser.LessEqual, 0)

        def GreaterEqual(self):
            return self.getToken(grCpp2Parser.GreaterEqual, 0)

        def AndAnd(self):
            return self.getToken(grCpp2Parser.AndAnd, 0)

        def OrOr(self):
            return self.getToken(grCpp2Parser.OrOr, 0)

        def PlusPlus(self):
            return self.getToken(grCpp2Parser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(grCpp2Parser.MinusMinus, 0)

        def Comma(self):
            return self.getToken(grCpp2Parser.Comma, 0)

        def ArrowStar(self):
            return self.getToken(grCpp2Parser.ArrowStar, 0)

        def Arrow(self):
            return self.getToken(grCpp2Parser.Arrow, 0)

        def LeftParen(self):
            return self.getToken(grCpp2Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(grCpp2Parser.RightParen, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_theoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator" ):
                listener.enterTheoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator" ):
                listener.exitTheoperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator" ):
                return visitor.visitTheoperator(self)
            else:
                return visitor.visitChildren(self)




    def theoperator(self):

        localctx = grCpp2Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_theoperator)
        try:
            self.state = 2437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2389
                self.match(grCpp2Parser.New)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2390
                self.match(grCpp2Parser.Delete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2391
                self.match(grCpp2Parser.New)
                self.state = 2392
                self.match(grCpp2Parser.LeftBracket)
                self.state = 2393
                self.match(grCpp2Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2394
                self.match(grCpp2Parser.Delete)
                self.state = 2395
                self.match(grCpp2Parser.LeftBracket)
                self.state = 2396
                self.match(grCpp2Parser.RightBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2397
                self.match(grCpp2Parser.Plus)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2398
                self.match(grCpp2Parser.Minus)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2399
                self.match(grCpp2Parser.Star)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2400
                self.match(grCpp2Parser.Div)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2401
                self.match(grCpp2Parser.Mod)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2402
                self.match(grCpp2Parser.Caret)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2403
                self.match(grCpp2Parser.And)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2404
                self.match(grCpp2Parser.Or)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2405
                self.match(grCpp2Parser.Tilde)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2406
                self.match(grCpp2Parser.Not)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2407
                self.match(grCpp2Parser.Assign)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2408
                self.match(grCpp2Parser.Less)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2409
                self.match(grCpp2Parser.Greater)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2410
                self.match(grCpp2Parser.PlusAssign)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2411
                self.match(grCpp2Parser.MinusAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2412
                self.match(grCpp2Parser.StarAssign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2413
                self.match(grCpp2Parser.DivAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2414
                self.match(grCpp2Parser.ModAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2415
                self.match(grCpp2Parser.XorAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2416
                self.match(grCpp2Parser.AndAssign)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2417
                self.match(grCpp2Parser.OrAssign)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2418
                self.match(grCpp2Parser.LeftShift)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2419
                self.match(grCpp2Parser.RightShift)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2420
                self.match(grCpp2Parser.RightShiftAssign)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2421
                self.match(grCpp2Parser.LeftShiftAssign)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2422
                self.match(grCpp2Parser.Equal)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2423
                self.match(grCpp2Parser.NotEqual)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2424
                self.match(grCpp2Parser.LessEqual)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2425
                self.match(grCpp2Parser.GreaterEqual)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2426
                self.match(grCpp2Parser.AndAnd)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2427
                self.match(grCpp2Parser.OrOr)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2428
                self.match(grCpp2Parser.PlusPlus)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2429
                self.match(grCpp2Parser.MinusMinus)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2430
                self.match(grCpp2Parser.Comma)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2431
                self.match(grCpp2Parser.ArrowStar)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2432
                self.match(grCpp2Parser.Arrow)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2433
                self.match(grCpp2Parser.LeftParen)
                self.state = 2434
                self.match(grCpp2Parser.RightParen)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2435
                self.match(grCpp2Parser.LeftBracket)
                self.state = 2436
                self.match(grCpp2Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integerliteral(self):
            return self.getToken(grCpp2Parser.Integerliteral, 0)

        def Characterliteral(self):
            return self.getToken(grCpp2Parser.Characterliteral, 0)

        def Floatingliteral(self):
            return self.getToken(grCpp2Parser.Floatingliteral, 0)

        def Stringliteral(self, i:int=None):
            if i is None:
                return self.getTokens(grCpp2Parser.Stringliteral)
            else:
                return self.getToken(grCpp2Parser.Stringliteral, i)

        def booleanliteral(self):
            return self.getTypedRuleContext(grCpp2Parser.BooleanliteralContext,0)


        def pointerliteral(self):
            return self.getTypedRuleContext(grCpp2Parser.PointerliteralContext,0)


        def userdefinedliteral(self):
            return self.getTypedRuleContext(grCpp2Parser.UserdefinedliteralContext,0)


        def getRuleIndex(self):
            return grCpp2Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = grCpp2Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_literal)
        try:
            self.state = 2450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2439
                self.match(grCpp2Parser.Integerliteral)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2440
                self.match(grCpp2Parser.Characterliteral)
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2441
                self.match(grCpp2Parser.Floatingliteral)
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2443 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2442
                        self.match(grCpp2Parser.Stringliteral)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2445 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

                pass
            elif token in [30, 65]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2447
                self.booleanliteral()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2448
                self.pointerliteral()
                pass
            elif token in [137, 138, 139, 140]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2449
                self.userdefinedliteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanliteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
#-----------
        def False_(self):
            return self.getToken(grCpp2Parser.False_, 0)

        def True_(self):
            return self.getToken(grCpp2Parser.True_, 0)
#-----------
        def getRuleIndex(self):
            return grCpp2Parser.RULE_booleanliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanliteral" ):
                listener.enterBooleanliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanliteral" ):
                listener.exitBooleanliteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanliteral" ):
                return visitor.visitBooleanliteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanliteral(self):

        localctx = grCpp2Parser.BooleanliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_booleanliteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2452
            _la = self._input.LA(1)
            if not(_la==30 or _la==65):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerliteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nullptr(self):
            return self.getToken(grCpp2Parser.Nullptr, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_pointerliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerliteral" ):
                listener.enterPointerliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerliteral" ):
                listener.exitPointerliteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerliteral" ):
                return visitor.visitPointerliteral(self)
            else:
                return visitor.visitChildren(self)




    def pointerliteral(self):

        localctx = grCpp2Parser.PointerliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_pointerliteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2454
            self.match(grCpp2Parser.Nullptr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserdefinedliteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Userdefinedintegerliteral(self):
            return self.getToken(grCpp2Parser.Userdefinedintegerliteral, 0)

        def Userdefinedfloatingliteral(self):
            return self.getToken(grCpp2Parser.Userdefinedfloatingliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(grCpp2Parser.Userdefinedstringliteral, 0)

        def Userdefinedcharacterliteral(self):
            return self.getToken(grCpp2Parser.Userdefinedcharacterliteral, 0)

        def getRuleIndex(self):
            return grCpp2Parser.RULE_userdefinedliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserdefinedliteral" ):
                listener.enterUserdefinedliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserdefinedliteral" ):
                listener.exitUserdefinedliteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserdefinedliteral" ):
                return visitor.visitUserdefinedliteral(self)
            else:
                return visitor.visitChildren(self)




    def userdefinedliteral(self):

        localctx = grCpp2Parser.UserdefinedliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_userdefinedliteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2456
            _la = self._input.LA(1)
            if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[5] = self.nestednamespecifier_sempred
        self._predicates[10] = self.capturelist_sempred
        self._predicates[15] = self.postfixexpression_sempred
        self._predicates[26] = self.noptrnewdeclarator_sempred
        self._predicates[31] = self.pmexpression_sempred
        self._predicates[32] = self.multiplicativeexpression_sempred
        self._predicates[33] = self.additiveexpression_sempred
        self._predicates[34] = self.shiftexpression_sempred
        self._predicates[36] = self.relationalexpression_sempred
        self._predicates[37] = self.equalityexpression_sempred
        self._predicates[38] = self.andexpression_sempred
        self._predicates[39] = self.exclusiveorexpression_sempred
        self._predicates[40] = self.inclusiveorexpression_sempred
        self._predicates[41] = self.logicalandexpression_sempred
        self._predicates[42] = self.logicalorexpression_sempred
        self._predicates[46] = self.expression_sempred
        self._predicates[52] = self.statementseq_sempred
        self._predicates[61] = self.declarationseq_sempred
        self._predicates[88] = self.enumeratorlist_sempred
        self._predicates[106] = self.attributespecifierseq_sempred
        self._predicates[109] = self.attributelist_sempred
        self._predicates[115] = self.balancedtokenseq_sempred
        self._predicates[117] = self.initdeclaratorlist_sempred
        self._predicates[121] = self.noptrdeclarator_sempred
        self._predicates[132] = self.noptrabstractdeclarator_sempred
        self._predicates[134] = self.noptrabstractpackdeclarator_sempred
        self._predicates[136] = self.parameterdeclarationlist_sempred
        self._predicates[143] = self.initializerlist_sempred
        self._predicates[153] = self.memberdeclaratorlist_sempred
        self._predicates[155] = self.virtspecifierseq_sempred
        self._predicates[159] = self.basespecifierlist_sempred
        self._predicates[174] = self.templateparameterlist_sempred
        self._predicates[180] = self.templateargumentlist_sempred
        self._predicates[193] = self.typeidlist_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestednamespecifier_sempred(self, localctx:NestednamespecifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def capturelist_sempred(self, localctx:CapturelistContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def postfixexpression_sempred(self, localctx:PostfixexpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 7)
         

    def noptrnewdeclarator_sempred(self, localctx:NoptrnewdeclaratorContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def pmexpression_sempred(self, localctx:PmexpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeexpression_sempred(self, localctx:MultiplicativeexpressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def additiveexpression_sempred(self, localctx:AdditiveexpressionContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         

    def shiftexpression_sempred(self, localctx:ShiftexpressionContext, predIndex:int):
            if predIndex == 20:
                return self.precpred(self._ctx, 1)
         

    def relationalexpression_sempred(self, localctx:RelationalexpressionContext, predIndex:int):
            if predIndex == 21:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 1)
         

    def equalityexpression_sempred(self, localctx:EqualityexpressionContext, predIndex:int):
            if predIndex == 25:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 1)
         

    def andexpression_sempred(self, localctx:AndexpressionContext, predIndex:int):
            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def exclusiveorexpression_sempred(self, localctx:ExclusiveorexpressionContext, predIndex:int):
            if predIndex == 28:
                return self.precpred(self._ctx, 1)
         

    def inclusiveorexpression_sempred(self, localctx:InclusiveorexpressionContext, predIndex:int):
            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def logicalandexpression_sempred(self, localctx:LogicalandexpressionContext, predIndex:int):
            if predIndex == 30:
                return self.precpred(self._ctx, 1)
         

    def logicalorexpression_sempred(self, localctx:LogicalorexpressionContext, predIndex:int):
            if predIndex == 31:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 32:
                return self.precpred(self._ctx, 1)
         

    def statementseq_sempred(self, localctx:StatementseqContext, predIndex:int):
            if predIndex == 33:
                return self.precpred(self._ctx, 1)
         

    def declarationseq_sempred(self, localctx:DeclarationseqContext, predIndex:int):
            if predIndex == 34:
                return self.precpred(self._ctx, 1)
         

    def enumeratorlist_sempred(self, localctx:EnumeratorlistContext, predIndex:int):
            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def attributespecifierseq_sempred(self, localctx:AttributespecifierseqContext, predIndex:int):
            if predIndex == 36:
                return self.precpred(self._ctx, 1)
         

    def attributelist_sempred(self, localctx:AttributelistContext, predIndex:int):
            if predIndex == 37:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 38:
                return self.precpred(self._ctx, 1)
         

    def balancedtokenseq_sempred(self, localctx:BalancedtokenseqContext, predIndex:int):
            if predIndex == 39:
                return self.precpred(self._ctx, 1)
         

    def initdeclaratorlist_sempred(self, localctx:InitdeclaratorlistContext, predIndex:int):
            if predIndex == 40:
                return self.precpred(self._ctx, 1)
         

    def noptrdeclarator_sempred(self, localctx:NoptrdeclaratorContext, predIndex:int):
            if predIndex == 41:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 42:
                return self.precpred(self._ctx, 2)
         

    def noptrabstractdeclarator_sempred(self, localctx:NoptrabstractdeclaratorContext, predIndex:int):
            if predIndex == 43:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 3)
         

    def noptrabstractpackdeclarator_sempred(self, localctx:NoptrabstractpackdeclaratorContext, predIndex:int):
            if predIndex == 45:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 2)
         

    def parameterdeclarationlist_sempred(self, localctx:ParameterdeclarationlistContext, predIndex:int):
            if predIndex == 47:
                return self.precpred(self._ctx, 1)
         

    def initializerlist_sempred(self, localctx:InitializerlistContext, predIndex:int):
            if predIndex == 48:
                return self.precpred(self._ctx, 1)
         

    def memberdeclaratorlist_sempred(self, localctx:MemberdeclaratorlistContext, predIndex:int):
            if predIndex == 49:
                return self.precpred(self._ctx, 1)
         

    def virtspecifierseq_sempred(self, localctx:VirtspecifierseqContext, predIndex:int):
            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

    def basespecifierlist_sempred(self, localctx:BasespecifierlistContext, predIndex:int):
            if predIndex == 51:
                return self.precpred(self._ctx, 1)
         

    def templateparameterlist_sempred(self, localctx:TemplateparameterlistContext, predIndex:int):
            if predIndex == 52:
                return self.precpred(self._ctx, 1)
         

    def templateargumentlist_sempred(self, localctx:TemplateargumentlistContext, predIndex:int):
            if predIndex == 53:
                return self.precpred(self._ctx, 1)
         

    def typeidlist_sempred(self, localctx:TypeidlistContext, predIndex:int):
            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         




